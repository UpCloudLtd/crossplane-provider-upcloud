/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdditionalIPAddressInitParameters struct {

	// (String) The assigned primary IP address.
	// The assigned additional IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) The type of the primary IP address of this interface (one of IPv4 or IPv6).
	// The type of this additional IP address of this interface (one of `IPv4` or `IPv6`).
	IPAddressFamily *string `json:"ipAddressFamily,omitempty" tf:"ip_address_family,omitempty"`
}

type AdditionalIPAddressObservation struct {

	// (String) The assigned primary IP address.
	// The assigned additional IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) The type of the primary IP address of this interface (one of IPv4 or IPv6).
	// The type of this additional IP address of this interface (one of `IPv4` or `IPv6`).
	IPAddressFamily *string `json:"ipAddressFamily,omitempty" tf:"ip_address_family,omitempty"`

	// (Boolean) true indicates that the primary IP address is a floating IP address.
	// `true` indicates that the additional IP address is a floating IP address.
	IPAddressFloating *bool `json:"ipAddressFloating,omitempty" tf:"ip_address_floating,omitempty"`
}

type AdditionalIPAddressParameters struct {

	// (String) The assigned primary IP address.
	// The assigned additional IP address.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) The type of the primary IP address of this interface (one of IPv4 or IPv6).
	// The type of this additional IP address of this interface (one of `IPv4` or `IPv6`).
	// +kubebuilder:validation:Optional
	IPAddressFamily *string `json:"ipAddressFamily,omitempty" tf:"ip_address_family,omitempty"`
}

type BackupRuleInitParameters struct {

	// (String) The weekday when the backup is created
	// The weekday when the backup is created
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Number) The number of days before a backup is automatically deleted
	// The number of days before a backup is automatically deleted
	Retention *int64 `json:"retention,omitempty" tf:"retention,omitempty"`

	// (String) Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// The time of day when the backup is created
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type BackupRuleObservation struct {

	// (String) The weekday when the backup is created
	// The weekday when the backup is created
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Number) The number of days before a backup is automatically deleted
	// The number of days before a backup is automatically deleted
	Retention *int64 `json:"retention,omitempty" tf:"retention,omitempty"`

	// (String) Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// The time of day when the backup is created
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type BackupRuleParameters struct {

	// (String) The weekday when the backup is created
	// The weekday when the backup is created
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval" tf:"interval,omitempty"`

	// (Number) The number of days before a backup is automatically deleted
	// The number of days before a backup is automatically deleted
	// +kubebuilder:validation:Optional
	Retention *int64 `json:"retention" tf:"retention,omitempty"`

	// (String) Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// The time of day when the backup is created
	// +kubebuilder:validation:Optional
	Time *string `json:"time" tf:"time,omitempty"`
}

type LoginInitParameters struct {

	// (Boolean) Indicates a password should be create to allow access
	// Indicates a password should be create to allow access
	CreatePassword *bool `json:"createPassword,omitempty" tf:"create_password,omitempty"`

	// (List of String) A list of ssh keys to access the server
	// A list of ssh keys to access the server
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// (String) The delivery method for the server's root password (one of none, email or sms)
	// The delivery method for the server's root password (one of `none`, `email` or `sms`)
	PasswordDelivery *string `json:"passwordDelivery,omitempty" tf:"password_delivery,omitempty"`

	// (String) Username to be create to access the server
	// Username to be create to access the server
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type LoginObservation struct {

	// (Boolean) Indicates a password should be create to allow access
	// Indicates a password should be create to allow access
	CreatePassword *bool `json:"createPassword,omitempty" tf:"create_password,omitempty"`

	// (List of String) A list of ssh keys to access the server
	// A list of ssh keys to access the server
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// (String) The delivery method for the server's root password (one of none, email or sms)
	// The delivery method for the server's root password (one of `none`, `email` or `sms`)
	PasswordDelivery *string `json:"passwordDelivery,omitempty" tf:"password_delivery,omitempty"`

	// (String) Username to be create to access the server
	// Username to be create to access the server
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type LoginParameters struct {

	// (Boolean) Indicates a password should be create to allow access
	// Indicates a password should be create to allow access
	// +kubebuilder:validation:Optional
	CreatePassword *bool `json:"createPassword,omitempty" tf:"create_password,omitempty"`

	// (List of String) A list of ssh keys to access the server
	// A list of ssh keys to access the server
	// +kubebuilder:validation:Optional
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// (String) The delivery method for the server's root password (one of none, email or sms)
	// The delivery method for the server's root password (one of `none`, `email` or `sms`)
	// +kubebuilder:validation:Optional
	PasswordDelivery *string `json:"passwordDelivery,omitempty" tf:"password_delivery,omitempty"`

	// (String) Username to be create to access the server
	// Username to be create to access the server
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type NetworkInterfaceInitParameters struct {

	// 4 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type private (see below for nested schema)
	// 0-4 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
	AdditionalIPAddress []AdditionalIPAddressInitParameters `json:"additionalIpAddress,omitempty" tf:"additional_ip_address,omitempty"`

	// (Boolean) true if this interface should be used for network booting.
	// `true` if this interface should be used for network booting.
	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	// (String) The assigned primary IP address.
	// The assigned primary IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) The type of the primary IP address of this interface (one of IPv4 or IPv6).
	// The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
	IPAddressFamily *string `json:"ipAddressFamily,omitempty" tf:"ip_address_family,omitempty"`

	// (String) The unique ID of a network to attach this network to.
	// The unique ID of a network to attach this network to.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Network
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in network to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`

	// (Boolean) true if source IP should be filtered.
	// `true` if source IP should be filtered.
	SourceIPFiltering *bool `json:"sourceIpFiltering,omitempty" tf:"source_ip_filtering,omitempty"`

	// (String) Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// Network interface type. For private network interfaces, a network must be specified with an existing network id.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkInterfaceObservation struct {

	// 4 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type private (see below for nested schema)
	// 0-4 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
	AdditionalIPAddress []AdditionalIPAddressObservation `json:"additionalIpAddress,omitempty" tf:"additional_ip_address,omitempty"`

	// (Boolean) true if this interface should be used for network booting.
	// `true` if this interface should be used for network booting.
	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	// (String) The assigned primary IP address.
	// The assigned primary IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) The type of the primary IP address of this interface (one of IPv4 or IPv6).
	// The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
	IPAddressFamily *string `json:"ipAddressFamily,omitempty" tf:"ip_address_family,omitempty"`

	// (Boolean) true indicates that the primary IP address is a floating IP address.
	// `true` indicates that the primary IP address is a floating IP address.
	IPAddressFloating *bool `json:"ipAddressFloating,omitempty" tf:"ip_address_floating,omitempty"`

	// (String) The assigned MAC address.
	// The assigned MAC address.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// (String) The unique ID of a network to attach this network to.
	// The unique ID of a network to attach this network to.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// (Boolean) true if source IP should be filtered.
	// `true` if source IP should be filtered.
	SourceIPFiltering *bool `json:"sourceIpFiltering,omitempty" tf:"source_ip_filtering,omitempty"`

	// (String) Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// Network interface type. For private network interfaces, a network must be specified with an existing network id.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkInterfaceParameters struct {

	// 4 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type private (see below for nested schema)
	// 0-4 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
	// +kubebuilder:validation:Optional
	AdditionalIPAddress []AdditionalIPAddressParameters `json:"additionalIpAddress,omitempty" tf:"additional_ip_address,omitempty"`

	// (Boolean) true if this interface should be used for network booting.
	// `true` if this interface should be used for network booting.
	// +kubebuilder:validation:Optional
	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	// (String) The assigned primary IP address.
	// The assigned primary IP address.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) The type of the primary IP address of this interface (one of IPv4 or IPv6).
	// The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
	// +kubebuilder:validation:Optional
	IPAddressFamily *string `json:"ipAddressFamily,omitempty" tf:"ip_address_family,omitempty"`

	// (String) The unique ID of a network to attach this network to.
	// The unique ID of a network to attach this network to.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in network to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`

	// (Boolean) true if source IP should be filtered.
	// `true` if source IP should be filtered.
	// +kubebuilder:validation:Optional
	SourceIPFiltering *bool `json:"sourceIpFiltering,omitempty" tf:"source_ip_filtering,omitempty"`

	// (String) Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ServerInitParameters struct {

	// (String) The boot device order, cdrom|disk|network or comma separated combination of those values. Defaults to disk
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder *string `json:"bootOrder,omitempty" tf:"boot_order,omitempty"`

	// (Number) The number of CPU for the server
	// The number of CPU for the server
	CPU *int64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Boolean) Are firewall rules active for the server
	// Are firewall rules active for the server
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// attribute. Only available for private cloud hosts
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
	Host *int64 `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A valid domain name
	// A valid domain name
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// value pairs to classify the server.
	// Key-value pairs to classify the server.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Block Set, Max: 1) Configure access credentials to the server (see below for nested schema)
	// Configure access credentials to the server
	Login []LoginInitParameters `json:"login,omitempty" tf:"login,omitempty"`

	// (Number) The size of memory for the server (in megabytes)
	// The size of memory for the server (in megabytes)
	Mem *int64 `json:"mem,omitempty" tf:"mem,omitempty"`

	// (Boolean) Is the metadata service active for the server
	// Is the metadata service active for the server
	Metadata *bool `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List, Min: 1) One or more blocks describing the network interfaces of the server. (see below for nested schema)
	// One or more blocks describing the network interfaces of the server.
	NetworkInterface []NetworkInterfaceInitParameters `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// (String) The model of the server's network interfaces
	// The model of the server's network interfaces
	NicModel *string `json:"nicModel,omitempty" tf:"nic_model,omitempty"`

	// (String) The pricing plan used for the server. You can list available server plans with upctl server plans
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// zero value.
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud_server_group`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
	ServerGroup *string `json:"serverGroup,omitempty" tf:"server_group,omitempty"`

	// (see below for nested schema)
	// Simple backup schedule configuration
	// The idea behind simple backups is to provide a simplified way of backing up *all* of the storages attached to a given server.
	// This means you cannot have simple backup set for a server, and then some individual backup_rules on the storages attached to said server.
	// Such configuration will throw an error during execution. This also apply to backup_rules set for server templates.
	SimpleBackup []SimpleBackupInitParameters `json:"simpleBackup,omitempty" tf:"simple_backup,omitempty"`

	// (Block Set) A list of storage devices associated with the server (see below for nested schema)
	// A list of storage devices associated with the server
	StorageDevices []StorageDevicesInitParameters `json:"storageDevices,omitempty" tf:"storage_devices,omitempty"`

	// (Set of String) The server related tags
	// The server related tags
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Block describing the preconfigured operating system (see below for nested schema)
	// Block describing the preconfigured operating system
	Template []TemplateInitParameters `json:"template,omitempty" tf:"template,omitempty"`

	// (String) A timezone identifier, e.g. Europe/Helsinki
	// A timezone identifier, e.g. `Europe/Helsinki`
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// (String) A short, informational description
	// A short, informational description
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Defines URL for a server setup script, or the script body itself
	// Defines URL for a server setup script, or the script body itself
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// (String) The model of the server's video interface
	// The model of the server's video interface
	VideoModel *string `json:"videoModel,omitempty" tf:"video_model,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ServerObservation struct {

	// (String) The boot device order, cdrom|disk|network or comma separated combination of those values. Defaults to disk
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder *string `json:"bootOrder,omitempty" tf:"boot_order,omitempty"`

	// (Number) The number of CPU for the server
	// The number of CPU for the server
	CPU *int64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Boolean) Are firewall rules active for the server
	// Are firewall rules active for the server
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// attribute. Only available for private cloud hosts
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
	Host *int64 `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A valid domain name
	// A valid domain name
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value pairs to classify the server.
	// Key-value pairs to classify the server.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Block Set, Max: 1) Configure access credentials to the server (see below for nested schema)
	// Configure access credentials to the server
	Login []LoginObservation `json:"login,omitempty" tf:"login,omitempty"`

	// (Number) The size of memory for the server (in megabytes)
	// The size of memory for the server (in megabytes)
	Mem *int64 `json:"mem,omitempty" tf:"mem,omitempty"`

	// (Boolean) Is the metadata service active for the server
	// Is the metadata service active for the server
	Metadata *bool `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List, Min: 1) One or more blocks describing the network interfaces of the server. (see below for nested schema)
	// One or more blocks describing the network interfaces of the server.
	NetworkInterface []NetworkInterfaceObservation `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// (String) The model of the server's network interfaces
	// The model of the server's network interfaces
	NicModel *string `json:"nicModel,omitempty" tf:"nic_model,omitempty"`

	// (String) The pricing plan used for the server. You can list available server plans with upctl server plans
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// zero value.
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud_server_group`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
	ServerGroup *string `json:"serverGroup,omitempty" tf:"server_group,omitempty"`

	// (see below for nested schema)
	// Simple backup schedule configuration
	// The idea behind simple backups is to provide a simplified way of backing up *all* of the storages attached to a given server.
	// This means you cannot have simple backup set for a server, and then some individual backup_rules on the storages attached to said server.
	// Such configuration will throw an error during execution. This also apply to backup_rules set for server templates.
	SimpleBackup []SimpleBackupObservation `json:"simpleBackup,omitempty" tf:"simple_backup,omitempty"`

	// (Block Set) A list of storage devices associated with the server (see below for nested schema)
	// A list of storage devices associated with the server
	StorageDevices []StorageDevicesObservation `json:"storageDevices,omitempty" tf:"storage_devices,omitempty"`

	// (Set of String) The server related tags
	// The server related tags
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Block describing the preconfigured operating system (see below for nested schema)
	// Block describing the preconfigured operating system
	Template []TemplateObservation `json:"template,omitempty" tf:"template,omitempty"`

	// (String) A timezone identifier, e.g. Europe/Helsinki
	// A timezone identifier, e.g. `Europe/Helsinki`
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// (String) A short, informational description
	// A short, informational description
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Defines URL for a server setup script, or the script body itself
	// Defines URL for a server setup script, or the script body itself
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// (String) The model of the server's video interface
	// The model of the server's video interface
	VideoModel *string `json:"videoModel,omitempty" tf:"video_model,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ServerParameters struct {

	// (String) The boot device order, cdrom|disk|network or comma separated combination of those values. Defaults to disk
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	// +kubebuilder:validation:Optional
	BootOrder *string `json:"bootOrder,omitempty" tf:"boot_order,omitempty"`

	// (Number) The number of CPU for the server
	// The number of CPU for the server
	// +kubebuilder:validation:Optional
	CPU *int64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Boolean) Are firewall rules active for the server
	// Are firewall rules active for the server
	// +kubebuilder:validation:Optional
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// attribute. Only available for private cloud hosts
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
	// +kubebuilder:validation:Optional
	Host *int64 `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A valid domain name
	// A valid domain name
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// value pairs to classify the server.
	// Key-value pairs to classify the server.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Block Set, Max: 1) Configure access credentials to the server (see below for nested schema)
	// Configure access credentials to the server
	// +kubebuilder:validation:Optional
	Login []LoginParameters `json:"login,omitempty" tf:"login,omitempty"`

	// (Number) The size of memory for the server (in megabytes)
	// The size of memory for the server (in megabytes)
	// +kubebuilder:validation:Optional
	Mem *int64 `json:"mem,omitempty" tf:"mem,omitempty"`

	// (Boolean) Is the metadata service active for the server
	// Is the metadata service active for the server
	// +kubebuilder:validation:Optional
	Metadata *bool `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List, Min: 1) One or more blocks describing the network interfaces of the server. (see below for nested schema)
	// One or more blocks describing the network interfaces of the server.
	// +kubebuilder:validation:Optional
	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface" tf:"network_interface,omitempty"`

	// (String) The model of the server's network interfaces
	// The model of the server's network interfaces
	// +kubebuilder:validation:Optional
	NicModel *string `json:"nicModel,omitempty" tf:"nic_model,omitempty"`

	// (String) The pricing plan used for the server. You can list available server plans with upctl server plans
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// zero value.
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud_server_group`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
	// +kubebuilder:validation:Optional
	ServerGroup *string `json:"serverGroup,omitempty" tf:"server_group,omitempty"`

	// (see below for nested schema)
	// Simple backup schedule configuration
	// The idea behind simple backups is to provide a simplified way of backing up *all* of the storages attached to a given server.
	// This means you cannot have simple backup set for a server, and then some individual backup_rules on the storages attached to said server.
	// Such configuration will throw an error during execution. This also apply to backup_rules set for server templates.
	// +kubebuilder:validation:Optional
	SimpleBackup []SimpleBackupParameters `json:"simpleBackup,omitempty" tf:"simple_backup,omitempty"`

	// (Block Set) A list of storage devices associated with the server (see below for nested schema)
	// A list of storage devices associated with the server
	// +kubebuilder:validation:Optional
	StorageDevices []StorageDevicesParameters `json:"storageDevices,omitempty" tf:"storage_devices,omitempty"`

	// (Set of String) The server related tags
	// The server related tags
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Block describing the preconfigured operating system (see below for nested schema)
	// Block describing the preconfigured operating system
	// +kubebuilder:validation:Optional
	Template []TemplateParameters `json:"template,omitempty" tf:"template,omitempty"`

	// (String) A timezone identifier, e.g. Europe/Helsinki
	// A timezone identifier, e.g. `Europe/Helsinki`
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// (String) A short, informational description
	// A short, informational description
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Defines URL for a server setup script, or the script body itself
	// Defines URL for a server setup script, or the script body itself
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// (String) The model of the server's video interface
	// The model of the server's video interface
	// +kubebuilder:validation:Optional
	VideoModel *string `json:"videoModel,omitempty" tf:"video_model,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type SimpleBackupInitParameters struct {

	// (String) The pricing plan used for the server. You can list available server plans with upctl server plans
	// Simple backup plan. Accepted values: daily, dailies, weeklies, monthlies.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (String) Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type SimpleBackupObservation struct {

	// (String) The pricing plan used for the server. You can list available server plans with upctl server plans
	// Simple backup plan. Accepted values: daily, dailies, weeklies, monthlies.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (String) Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type SimpleBackupParameters struct {

	// (String) The pricing plan used for the server. You can list available server plans with upctl server plans
	// Simple backup plan. Accepted values: daily, dailies, weeklies, monthlies.
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// (String) Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
	// +kubebuilder:validation:Optional
	Time *string `json:"time" tf:"time,omitempty"`
}

type StorageDevicesInitParameters struct {

	// select next available address from that bus.
	// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// 15 (0, for example). Valid values for scsi or ide are 0-1:0-1 (0:0, for example). Leave empty to auto-select next available address in the given bus.
	// The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
	AddressPosition *string `json:"addressPosition,omitempty" tf:"address_position,omitempty"`

	// (String) A valid storage UUID
	// A valid storage UUID
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/storage/v1alpha1.Storage
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// Reference to a Storage in storage to populate storage.
	// +kubebuilder:validation:Optional
	StorageRef *v1.Reference `json:"storageRef,omitempty" tf:"-"`

	// Selector for a Storage in storage to populate storage.
	// +kubebuilder:validation:Optional
	StorageSelector *v1.Selector `json:"storageSelector,omitempty" tf:"-"`

	// (String) Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// The device type the storage will be attached as
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StorageDevicesObservation struct {

	// select next available address from that bus.
	// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// 15 (0, for example). Valid values for scsi or ide are 0-1:0-1 (0:0, for example). Leave empty to auto-select next available address in the given bus.
	// The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
	AddressPosition *string `json:"addressPosition,omitempty" tf:"address_position,omitempty"`

	// (String) A valid storage UUID
	// A valid storage UUID
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// (String) Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// The device type the storage will be attached as
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StorageDevicesParameters struct {

	// select next available address from that bus.
	// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// 15 (0, for example). Valid values for scsi or ide are 0-1:0-1 (0:0, for example). Leave empty to auto-select next available address in the given bus.
	// The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
	// +kubebuilder:validation:Optional
	AddressPosition *string `json:"addressPosition,omitempty" tf:"address_position,omitempty"`

	// (String) A valid storage UUID
	// A valid storage UUID
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/storage/v1alpha1.Storage
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// Reference to a Storage in storage to populate storage.
	// +kubebuilder:validation:Optional
	StorageRef *v1.Reference `json:"storageRef,omitempty" tf:"-"`

	// Selector for a Storage in storage to populate storage.
	// +kubebuilder:validation:Optional
	StorageSelector *v1.Selector `json:"storageSelector,omitempty" tf:"-"`

	// (String) Network interface type. For private network interfaces, a network must be specified with an existing network id.
	// The device type the storage will be attached as
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TemplateInitParameters struct {

	// select next available address from that bus.
	// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// 15 (0, for example). Valid values for scsi or ide are 0-1:0-1 (0:0, for example). Leave empty to auto-select next available address in the given bus.
	// The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
	AddressPosition *string `json:"addressPosition,omitempty" tf:"address_position,omitempty"`

	// (see below for nested schema)
	// The criteria to backup the storage
	// Please keep in mind that it's not possible to have a server with backup_rule attached to a server with simple_backup specified.
	// Such configurations will throw errors during execution.
	BackupRule []BackupRuleInitParameters `json:"backupRule,omitempty" tf:"backup_rule,omitempty"`

	// (Boolean) If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
	// If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
	DeleteAutoresizeBackup *bool `json:"deleteAutoresizeBackup,omitempty" tf:"delete_autoresize_backup,omitempty"`

	// (Boolean) Sets if the storage is encrypted at rest
	// Sets if the storage is encrypted at rest
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// (Boolean) If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
	// Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
	// to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
	// Taking and keeping backups incure costs.
	// If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
	// Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
	// to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
	// Taking and keeping backups incure costs.
	FilesystemAutoresize *bool `json:"filesystemAutoresize,omitempty" tf:"filesystem_autoresize,omitempty"`

	// (Number) The size of the storage in gigabytes
	// The size of the storage in gigabytes
	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String) A valid storage UUID
	// A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// (String) A short, informational description
	// A short, informative description
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type TemplateObservation struct {

	// select next available address from that bus.
	// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// 15 (0, for example). Valid values for scsi or ide are 0-1:0-1 (0:0, for example). Leave empty to auto-select next available address in the given bus.
	// The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
	AddressPosition *string `json:"addressPosition,omitempty" tf:"address_position,omitempty"`

	// (see below for nested schema)
	// The criteria to backup the storage
	// Please keep in mind that it's not possible to have a server with backup_rule attached to a server with simple_backup specified.
	// Such configurations will throw errors during execution.
	BackupRule []BackupRuleObservation `json:"backupRule,omitempty" tf:"backup_rule,omitempty"`

	// (Boolean) If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
	// If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
	DeleteAutoresizeBackup *bool `json:"deleteAutoresizeBackup,omitempty" tf:"delete_autoresize_backup,omitempty"`

	// (Boolean) Sets if the storage is encrypted at rest
	// Sets if the storage is encrypted at rest
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// (Boolean) If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
	// Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
	// to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
	// Taking and keeping backups incure costs.
	// If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
	// Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
	// to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
	// Taking and keeping backups incure costs.
	FilesystemAutoresize *bool `json:"filesystemAutoresize,omitempty" tf:"filesystem_autoresize,omitempty"`

	// (String) The ID of this resource.
	// The unique identifier for the storage
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The size of the storage in gigabytes
	// The size of the storage in gigabytes
	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String) A valid storage UUID
	// A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// (String) The storage tier to use
	// The storage tier to use
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// (String) A short, informational description
	// A short, informative description
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type TemplateParameters struct {

	// select next available address from that bus.
	// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// 15 (0, for example). Valid values for scsi or ide are 0-1:0-1 (0:0, for example). Leave empty to auto-select next available address in the given bus.
	// The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
	// +kubebuilder:validation:Optional
	AddressPosition *string `json:"addressPosition,omitempty" tf:"address_position,omitempty"`

	// (see below for nested schema)
	// The criteria to backup the storage
	// Please keep in mind that it's not possible to have a server with backup_rule attached to a server with simple_backup specified.
	// Such configurations will throw errors during execution.
	// +kubebuilder:validation:Optional
	BackupRule []BackupRuleParameters `json:"backupRule,omitempty" tf:"backup_rule,omitempty"`

	// (Boolean) If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
	// If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
	// +kubebuilder:validation:Optional
	DeleteAutoresizeBackup *bool `json:"deleteAutoresizeBackup,omitempty" tf:"delete_autoresize_backup,omitempty"`

	// (Boolean) Sets if the storage is encrypted at rest
	// Sets if the storage is encrypted at rest
	// +kubebuilder:validation:Optional
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// (Boolean) If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
	// Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
	// to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
	// Taking and keeping backups incure costs.
	// If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
	// Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
	// to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
	// Taking and keeping backups incure costs.
	// +kubebuilder:validation:Optional
	FilesystemAutoresize *bool `json:"filesystemAutoresize,omitempty" tf:"filesystem_autoresize,omitempty"`

	// (Number) The size of the storage in gigabytes
	// The size of the storage in gigabytes
	// +kubebuilder:validation:Optional
	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String) A valid storage UUID
	// A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// (String) A short, informational description
	// A short, informative description
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// ServerSpec defines the desired state of Server
type ServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerInitParameters `json:"initProvider,omitempty"`
}

// ServerStatus defines the observed state of Server.
type ServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Server is the Schema for the Servers API. The UpCloud server resource allows the creation, update and deletion of a cloud server https://upcloud.com/products/cloud-servers.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type Server struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostname) || (has(self.initProvider) && has(self.initProvider.hostname))",message="spec.forProvider.hostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkInterface) || (has(self.initProvider) && has(self.initProvider.networkInterface))",message="spec.forProvider.networkInterface is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ServerSpec   `json:"spec"`
	Status ServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerList contains a list of Servers
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Server `json:"items"`
}

// Repository type metadata.
var (
	Server_Kind             = "Server"
	Server_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Server_Kind}.String()
	Server_KindAPIVersion   = Server_Kind + "." + CRDGroupVersion.String()
	Server_GroupVersionKind = CRDGroupVersion.WithKind(Server_Kind)
)

func init() {
	SchemeBuilder.Register(&Server{}, &ServerList{})
}
