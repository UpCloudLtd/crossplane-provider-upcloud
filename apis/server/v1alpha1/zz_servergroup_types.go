/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerGroupInitParameters struct {

	// affinity group. Setting this to strict or yes will
	// result in all servers in the group being placed on separate compute hosts. The value can be strict, yes, or no.
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will
	// result in all servers in the group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`.
	//
	// * `strict` policy doesn't allow servers in the same server group to be on the same host
	// * `yes` refers to best-effort policy and tries to put servers on different hosts, but this is not guaranteed
	// * `no` refers to having no policy and thus no effect on server host affinity
	//
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups.
	//
	// Plese also note that anti-affinity policies are only applied on server start. This means that if anti-affinity
	// policies in server group are not met, you need to manually restart the servers in said group,
	// for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy *string `json:"antiAffinityPolicy,omitempty" tf:"anti_affinity_policy,omitempty"`

	// value pairs to classify the server group.
	// Key-value pairs to classify the server group.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Set of String) UUIDs of the servers that are members of this group. Servers can also be attached to the server group via server_group property of upcloud_server. See also track_members property.
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group` property of `upcloud_server`. See also `track_members` property.
	// +crossplane:generate:reference:type=Server
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// References to Server to populate members.
	// +kubebuilder:validation:Optional
	MembersRefs []v1.Reference `json:"membersRefs,omitempty" tf:"-"`

	// Selector for a list of Server to populate members.
	// +kubebuilder:validation:Optional
	MembersSelector *v1.Selector `json:"membersSelector,omitempty" tf:"-"`

	// (String) Title of your server group
	// Title of your server group
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (Boolean) Controls if members of the server group are being tracked in this resource. Set to false when using server_group property of upcloud_server to attach servers to the server group to avoid delayed state updates.
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group` property of `upcloud_server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers *bool `json:"trackMembers,omitempty" tf:"track_members,omitempty"`
}

type ServerGroupObservation struct {

	// affinity group. Setting this to strict or yes will
	// result in all servers in the group being placed on separate compute hosts. The value can be strict, yes, or no.
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will
	// result in all servers in the group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`.
	//
	// * `strict` policy doesn't allow servers in the same server group to be on the same host
	// * `yes` refers to best-effort policy and tries to put servers on different hosts, but this is not guaranteed
	// * `no` refers to having no policy and thus no effect on server host affinity
	//
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups.
	//
	// Plese also note that anti-affinity policies are only applied on server start. This means that if anti-affinity
	// policies in server group are not met, you need to manually restart the servers in said group,
	// for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy *string `json:"antiAffinityPolicy,omitempty" tf:"anti_affinity_policy,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value pairs to classify the server group.
	// Key-value pairs to classify the server group.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Set of String) UUIDs of the servers that are members of this group. Servers can also be attached to the server group via server_group property of upcloud_server. See also track_members property.
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group` property of `upcloud_server`. See also `track_members` property.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Title of your server group
	// Title of your server group
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (Boolean) Controls if members of the server group are being tracked in this resource. Set to false when using server_group property of upcloud_server to attach servers to the server group to avoid delayed state updates.
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group` property of `upcloud_server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers *bool `json:"trackMembers,omitempty" tf:"track_members,omitempty"`
}

type ServerGroupParameters struct {

	// affinity group. Setting this to strict or yes will
	// result in all servers in the group being placed on separate compute hosts. The value can be strict, yes, or no.
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will
	// result in all servers in the group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`.
	//
	// * `strict` policy doesn't allow servers in the same server group to be on the same host
	// * `yes` refers to best-effort policy and tries to put servers on different hosts, but this is not guaranteed
	// * `no` refers to having no policy and thus no effect on server host affinity
	//
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups.
	//
	// Plese also note that anti-affinity policies are only applied on server start. This means that if anti-affinity
	// policies in server group are not met, you need to manually restart the servers in said group,
	// for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	// +kubebuilder:validation:Optional
	AntiAffinityPolicy *string `json:"antiAffinityPolicy,omitempty" tf:"anti_affinity_policy,omitempty"`

	// value pairs to classify the server group.
	// Key-value pairs to classify the server group.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Set of String) UUIDs of the servers that are members of this group. Servers can also be attached to the server group via server_group property of upcloud_server. See also track_members property.
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group` property of `upcloud_server`. See also `track_members` property.
	// +crossplane:generate:reference:type=Server
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// References to Server to populate members.
	// +kubebuilder:validation:Optional
	MembersRefs []v1.Reference `json:"membersRefs,omitempty" tf:"-"`

	// Selector for a list of Server to populate members.
	// +kubebuilder:validation:Optional
	MembersSelector *v1.Selector `json:"membersSelector,omitempty" tf:"-"`

	// (String) Title of your server group
	// Title of your server group
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (Boolean) Controls if members of the server group are being tracked in this resource. Set to false when using server_group property of upcloud_server to attach servers to the server group to avoid delayed state updates.
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group` property of `upcloud_server` to attach servers to the server group to avoid delayed state updates.
	// +kubebuilder:validation:Optional
	TrackMembers *bool `json:"trackMembers,omitempty" tf:"track_members,omitempty"`
}

// ServerGroupSpec defines the desired state of ServerGroup
type ServerGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerGroupInitParameters `json:"initProvider,omitempty"`
}

// ServerGroupStatus defines the observed state of ServerGroup.
type ServerGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServerGroup is the Schema for the ServerGroups API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type ServerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	Spec   ServerGroupSpec   `json:"spec"`
	Status ServerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerGroupList contains a list of ServerGroups
type ServerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerGroup `json:"items"`
}

// Repository type metadata.
var (
	ServerGroup_Kind             = "ServerGroup"
	ServerGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerGroup_Kind}.String()
	ServerGroup_KindAPIVersion   = ServerGroup_Kind + "." + CRDGroupVersion.String()
	ServerGroup_GroupVersionKind = CRDGroupVersion.WithKind(ServerGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerGroup{}, &ServerGroupList{})
}
