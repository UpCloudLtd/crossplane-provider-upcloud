/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPNetworkInitParameters struct {

	// (String) The CIDR range of the subnet
	// The CIDR range of the subnet
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Boolean) Is DHCP enabled?
	// Is DHCP enabled?
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// (Set of String) The DNS servers given by DHCP
	// The DNS servers given by DHCP
	// +listType=set
	DHCPDNS []*string `json:"dhcpDns,omitempty" tf:"dhcp_dns,omitempty"`

	// (Boolean) Is the gateway the DHCP default route?
	// Is the gateway the DHCP default route?
	DHCPDefaultRoute *bool `json:"dhcpDefaultRoute,omitempty" tf:"dhcp_default_route,omitempty"`

	// (Set of String) The additional DHCP classless static routes given by DHCP
	// The additional DHCP classless static routes given by DHCP
	// +listType=set
	DHCPRoutes []*string `json:"dhcpRoutes,omitempty" tf:"dhcp_routes,omitempty"`

	// (String) IP address family
	// IP address family
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Gateway address given by DHCP
	// Gateway address given by DHCP
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPNetworkObservation struct {

	// (String) The CIDR range of the subnet
	// The CIDR range of the subnet
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Boolean) Is DHCP enabled?
	// Is DHCP enabled?
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// (Set of String) The DNS servers given by DHCP
	// The DNS servers given by DHCP
	// +listType=set
	DHCPDNS []*string `json:"dhcpDns,omitempty" tf:"dhcp_dns,omitempty"`

	// (Boolean) Is the gateway the DHCP default route?
	// Is the gateway the DHCP default route?
	DHCPDefaultRoute *bool `json:"dhcpDefaultRoute,omitempty" tf:"dhcp_default_route,omitempty"`

	// (Set of String) The additional DHCP classless static routes given by DHCP
	// The additional DHCP classless static routes given by DHCP
	// +listType=set
	DHCPRoutes []*string `json:"dhcpRoutes,omitempty" tf:"dhcp_routes,omitempty"`

	// (String) IP address family
	// IP address family
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Gateway address given by DHCP
	// Gateway address given by DHCP
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPNetworkParameters struct {

	// (String) The CIDR range of the subnet
	// The CIDR range of the subnet
	// +kubebuilder:validation:Optional
	Address *string `json:"address" tf:"address,omitempty"`

	// (Boolean) Is DHCP enabled?
	// Is DHCP enabled?
	// +kubebuilder:validation:Optional
	DHCP *bool `json:"dhcp" tf:"dhcp,omitempty"`

	// (Set of String) The DNS servers given by DHCP
	// The DNS servers given by DHCP
	// +kubebuilder:validation:Optional
	// +listType=set
	DHCPDNS []*string `json:"dhcpDns,omitempty" tf:"dhcp_dns,omitempty"`

	// (Boolean) Is the gateway the DHCP default route?
	// Is the gateway the DHCP default route?
	// +kubebuilder:validation:Optional
	DHCPDefaultRoute *bool `json:"dhcpDefaultRoute,omitempty" tf:"dhcp_default_route,omitempty"`

	// (Set of String) The additional DHCP classless static routes given by DHCP
	// The additional DHCP classless static routes given by DHCP
	// +kubebuilder:validation:Optional
	// +listType=set
	DHCPRoutes []*string `json:"dhcpRoutes,omitempty" tf:"dhcp_routes,omitempty"`

	// (String) IP address family
	// IP address family
	// +kubebuilder:validation:Optional
	Family *string `json:"family" tf:"family,omitempty"`

	// (String) Gateway address given by DHCP
	// Gateway address given by DHCP
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type NetworkInitParameters struct {

	// (Block List) IP subnet within the network. Network must have exactly one IP subnet. (see below for nested schema)
	// IP subnet within the network. Network must have exactly one IP subnet.
	IPNetwork []IPNetworkInitParameters `json:"ipNetwork,omitempty" tf:"ip_network,omitempty"`

	// value pairs to classify the network.
	// Key-value pairs to classify the network.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Name of the network.
	// Name of the network.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) UUID of a router to attach to this network.
	// UUID of a router to attach to this network.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Router
	Router *string `json:"router,omitempty" tf:"router,omitempty"`

	// Reference to a Router in network to populate router.
	// +kubebuilder:validation:Optional
	RouterRef *v1.Reference `json:"routerRef,omitempty" tf:"-"`

	// Selector for a Router in network to populate router.
	// +kubebuilder:validation:Optional
	RouterSelector *v1.Selector `json:"routerSelector,omitempty" tf:"-"`

	// fra1. You can list available zones with upctl zone list.
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type NetworkObservation struct {

	// (String) UUID of the network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List) IP subnet within the network. Network must have exactly one IP subnet. (see below for nested schema)
	// IP subnet within the network. Network must have exactly one IP subnet.
	IPNetwork []IPNetworkObservation `json:"ipNetwork,omitempty" tf:"ip_network,omitempty"`

	// value pairs to classify the network.
	// Key-value pairs to classify the network.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Name of the network.
	// Name of the network.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) UUID of a router to attach to this network.
	// UUID of a router to attach to this network.
	Router *string `json:"router,omitempty" tf:"router,omitempty"`

	// (String) The network type
	// The network type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type NetworkParameters struct {

	// (Block List) IP subnet within the network. Network must have exactly one IP subnet. (see below for nested schema)
	// IP subnet within the network. Network must have exactly one IP subnet.
	// +kubebuilder:validation:Optional
	IPNetwork []IPNetworkParameters `json:"ipNetwork,omitempty" tf:"ip_network,omitempty"`

	// value pairs to classify the network.
	// Key-value pairs to classify the network.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Name of the network.
	// Name of the network.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) UUID of a router to attach to this network.
	// UUID of a router to attach to this network.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Router
	// +kubebuilder:validation:Optional
	Router *string `json:"router,omitempty" tf:"router,omitempty"`

	// Reference to a Router in network to populate router.
	// +kubebuilder:validation:Optional
	RouterRef *v1.Reference `json:"routerRef,omitempty" tf:"-"`

	// Selector for a Router in network to populate router.
	// +kubebuilder:validation:Optional
	RouterSelector *v1.Selector `json:"routerSelector,omitempty" tf:"-"`

	// fra1. You can list available zones with upctl zone list.
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// NetworkSpec defines the desired state of Network
type NetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInitParameters `json:"initProvider,omitempty"`
}

// NetworkStatus defines the observed state of Network.
type NetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Network is the Schema for the Networks API. This resource represents an SDN private network that cloud servers and other resources from the same zone can be attached to.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type Network struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   NetworkSpec   `json:"spec"`
	Status NetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkList contains a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Network `json:"items"`
}

// Repository type metadata.
var (
	Network_Kind             = "Network"
	Network_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Network_Kind}.String()
	Network_KindAPIVersion   = Network_Kind + "." + CRDGroupVersion.String()
	Network_GroupVersionKind = CRDGroupVersion.WithKind(Network_Kind)
)

func init() {
	SchemeBuilder.Register(&Network{}, &NetworkList{})
}
