/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouterInitParameters struct {

	// (String) Name of the router
	// Name of the router
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A collection of static routes for this router (see below for nested schema)
	// A collection of static routes for this router
	StaticRoute []StaticRouteInitParameters `json:"staticRoute,omitempty" tf:"static_route,omitempty"`
}

type RouterObservation struct {

	// (List of String) A collection of UUID representing networks attached to this router
	// A collection of UUID representing networks attached to this router
	AttachedNetworks []*string `json:"attachedNetworks,omitempty" tf:"attached_networks,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the router
	// Name of the router
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A collection of static routes for this router (see below for nested schema)
	// A collection of static routes for this router
	StaticRoute []StaticRouteObservation `json:"staticRoute,omitempty" tf:"static_route,omitempty"`

	// (String) The type of router
	// The type of router
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RouterParameters struct {

	// (String) Name of the router
	// Name of the router
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A collection of static routes for this router (see below for nested schema)
	// A collection of static routes for this router
	// +kubebuilder:validation:Optional
	StaticRoute []StaticRouteParameters `json:"staticRoute,omitempty" tf:"static_route,omitempty"`
}

type StaticRouteInitParameters struct {

	// (String) Name of the router
	// Name or description of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Next hop address. NOTE: For static route to be active the next hop has to be an address of a reachable running Cloud Server in one of the Private Networks attached to the router.
	// Next hop address. NOTE: For static route to be active the next hop has to be an address of a reachable running Cloud Server in one of the Private Networks attached to the router.
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// (String) Destination prefix of the route.
	// Destination prefix of the route.
	Route *string `json:"route,omitempty" tf:"route,omitempty"`
}

type StaticRouteObservation struct {

	// (String) Name of the router
	// Name or description of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Next hop address. NOTE: For static route to be active the next hop has to be an address of a reachable running Cloud Server in one of the Private Networks attached to the router.
	// Next hop address. NOTE: For static route to be active the next hop has to be an address of a reachable running Cloud Server in one of the Private Networks attached to the router.
	Nexthop *string `json:"nexthop,omitempty" tf:"nexthop,omitempty"`

	// (String) Destination prefix of the route.
	// Destination prefix of the route.
	Route *string `json:"route,omitempty" tf:"route,omitempty"`
}

type StaticRouteParameters struct {

	// (String) Name of the router
	// Name or description of the route.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Next hop address. NOTE: For static route to be active the next hop has to be an address of a reachable running Cloud Server in one of the Private Networks attached to the router.
	// Next hop address. NOTE: For static route to be active the next hop has to be an address of a reachable running Cloud Server in one of the Private Networks attached to the router.
	// +kubebuilder:validation:Optional
	Nexthop *string `json:"nexthop" tf:"nexthop,omitempty"`

	// (String) Destination prefix of the route.
	// Destination prefix of the route.
	// +kubebuilder:validation:Optional
	Route *string `json:"route" tf:"route,omitempty"`
}

// RouterSpec defines the desired state of Router
type RouterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouterInitParameters `json:"initProvider,omitempty"`
}

// RouterStatus defines the observed state of Router.
type RouterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Router is the Schema for the Routers API. This resource represents a generated UpCloud router resource. Routers can be used to connect multiple Private Networks. UpCloud Servers on any attached network can communicate directly with each other.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type Router struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RouterSpec   `json:"spec"`
	Status RouterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouterList contains a list of Routers
type RouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Router `json:"items"`
}

// Repository type metadata.
var (
	Router_Kind             = "Router"
	Router_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Router_Kind}.String()
	Router_KindAPIVersion   = Router_Kind + "." + CRDGroupVersion.String()
	Router_GroupVersionKind = CRDGroupVersion.WithKind(Router_Kind)
)

func init() {
	SchemeBuilder.Register(&Router{}, &RouterList{})
}
