/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComponentsInitParameters struct {
}

type ComponentsObservation struct {

	// (String)
	// Type of the component
	Component *string `json:"component,omitempty" tf:"component,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname of the component
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the component
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String)
	// Component network route type
	Route *string `json:"route,omitempty" tf:"route,omitempty"`

	// (String)
	// Usage of the component
	Usage *string `json:"usage,omitempty" tf:"usage,omitempty"`
}

type ComponentsParameters struct {
}

type ManagedDatabaseMysqlInitParameters struct {

	// value pairs to classify the managed database.
	// User defined key-value pairs to classify the managed database.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	NodeStates []NodeStatesInitParameters `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (Block List, Max: 1) Database Engine properties for MySQL (see below for nested schema)
	// Database Engine properties for MySQL
	Properties []PropertiesInitParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabaseMysqlObservation struct {

	// (List of Object) Service component information (see below for nested schema)
	// Service component information
	Components []ComponentsObservation `json:"components,omitempty" tf:"components,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value pairs to classify the managed database.
	// User defined key-value pairs to classify the managed database.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	NodeStates []NodeStatesObservation `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (String) Primary database name
	// Primary database name
	PrimaryDatabase *string `json:"primaryDatabase,omitempty" tf:"primary_database,omitempty"`

	// (Block List, Max: 1) Database Engine properties for MySQL (see below for nested schema)
	// Database Engine properties for MySQL
	Properties []PropertiesObservation `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Hostname to the service instance
	// Hostname to the service instance
	ServiceHost *string `json:"serviceHost,omitempty" tf:"service_host,omitempty"`

	// (String) Port to the service instance
	// Port to the service instance
	ServicePort *string `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// (String) Primary username to the service instance
	// Primary username to the service instance
	ServiceUsername *string `json:"serviceUsername,omitempty" tf:"service_username,omitempty"`

	// (String) State of the service
	// State of the service
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Type of the service
	// Type of the service
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabaseMysqlParameters struct {

	// value pairs to classify the managed database.
	// User defined key-value pairs to classify the managed database.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// +kubebuilder:validation:Optional
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	// +kubebuilder:validation:Optional
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	// +kubebuilder:validation:Optional
	NodeStates []NodeStatesParameters `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	// +kubebuilder:validation:Optional
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (Block List, Max: 1) Database Engine properties for MySQL (see below for nested schema)
	// Database Engine properties for MySQL
	// +kubebuilder:validation:Optional
	Properties []PropertiesParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type MigrationInitParameters struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
	// Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
	IgnoreRoles *string `json:"ignoreRoles,omitempty" tf:"ignore_roles,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String, Sensitive) Password for authentication with the server where to migrate data from.
	// Password for authentication with the server where to migrate data from.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type MigrationObservation struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
	// Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
	IgnoreRoles *string `json:"ignoreRoles,omitempty" tf:"ignore_roles,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type MigrationParameters struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	// +kubebuilder:validation:Optional
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// +kubebuilder:validation:Optional
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
	// Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
	// +kubebuilder:validation:Optional
	IgnoreRoles *string `json:"ignoreRoles,omitempty" tf:"ignore_roles,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String, Sensitive) Password for authentication with the server where to migrate data from.
	// Password for authentication with the server where to migrate data from.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	// +kubebuilder:validation:Optional
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type NetworkInitParameters struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/crossplane-provider-upcloud/apis/network/v1alpha1.Network
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type NetworkObservation struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkParameters struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	// +kubebuilder:validation:Optional
	Family *string `json:"family" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/crossplane-provider-upcloud/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type NodeStatesInitParameters struct {

	// (String)
	// Role of the node
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type NodeStatesObservation struct {

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name plus a node iteration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	// Role of the node
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) State of the service
	// State of the node
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type NodeStatesParameters struct {

	// (String)
	// Role of the node
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PropertiesInitParameters struct {

	// (String, Sensitive) Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// (String) Custom username for admin user. This must be set only when a new service is being created.
	// Custom username for admin user. This must be set only when a new service is being created.
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (Number) The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupHour *int64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// (Number) The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupMinute *int64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// (Number) The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *int64 `json:"binlogRetentionPeriod,omitempty" tf:"binlog_retention_period,omitempty"`

	// (Number) The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
	// The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
	ConnectTimeout *int64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// 12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
	DefaultTimeZone *string `json:"defaultTimeZone,omitempty" tf:"default_time_zone,omitempty"`

	// (Number) The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	GroupConcatMaxLen *int64 `json:"groupConcatMaxLen,omitempty" tf:"group_concat_max_len,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Number) The time, in seconds, before cached statistics expire.
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *int64 `json:"informationSchemaStatsExpiry,omitempty" tf:"information_schema_stats_expiry,omitempty"`

	// (Number) Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	InnodbChangeBufferMaxSize *int64 `json:"innodbChangeBufferMaxSize,omitempty" tf:"innodb_change_buffer_max_size,omitempty"`

	// dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	InnodbFlushNeighbors *int64 `json:"innodbFlushNeighbors,omitempty" tf:"innodb_flush_neighbors,omitempty"`

	// (Number) Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	InnodbFtMinTokenSize *int64 `json:"innodbFtMinTokenSize,omitempty" tf:"innodb_ft_min_token_size,omitempty"`

	// (String) This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `json:"innodbFtServerStopwordTable,omitempty" tf:"innodb_ft_server_stopword_table,omitempty"`

	// (Number) The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	InnodbLockWaitTimeout *int64 `json:"innodbLockWaitTimeout,omitempty" tf:"innodb_lock_wait_timeout,omitempty"`

	// (Number) The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	InnodbLogBufferSize *int64 `json:"innodbLogBufferSize,omitempty" tf:"innodb_log_buffer_size,omitempty"`

	// (Number) The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *int64 `json:"innodbOnlineAlterLogMaxSize,omitempty" tf:"innodb_online_alter_log_max_size,omitempty"`

	// (Boolean) When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
	// When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `json:"innodbPrintAllDeadlocks,omitempty" tf:"innodb_print_all_deadlocks,omitempty"`

	// (Number) The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	InnodbReadIoThreads *int64 `json:"innodbReadIoThreads,omitempty" tf:"innodb_read_io_threads,omitempty"`

	// (Boolean) When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	// When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	InnodbRollbackOnTimeout *bool `json:"innodbRollbackOnTimeout,omitempty" tf:"innodb_rollback_on_timeout,omitempty"`

	// no limit).
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	InnodbThreadConcurrency *int64 `json:"innodbThreadConcurrency,omitempty" tf:"innodb_thread_concurrency,omitempty"`

	// (Number) The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	InnodbWriteIoThreads *int64 `json:"innodbWriteIoThreads,omitempty" tf:"innodb_write_io_threads,omitempty"`

	// (Number) The number of seconds the server waits for activity on an interactive connection before closing it.
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	InteractiveTimeout *int64 `json:"interactiveTimeout,omitempty" tf:"interactive_timeout,omitempty"`

	// memory internal temporary tables.
	// The storage engine for in-memory internal temporary tables.
	InternalTmpMemStorageEngine *string `json:"internalTmpMemStorageEngine,omitempty" tf:"internal_tmp_mem_storage_engine,omitempty"`

	// (Number) The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s.
	// The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s.
	LongQueryTime *float64 `json:"longQueryTime,omitempty" tf:"long_query_time,omitempty"`

	// (Number) Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	MaxAllowedPacket *int64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	MaxHeapTableSize *int64 `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	Migration []MigrationInitParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Number) Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	NetBufferLength *int64 `json:"netBufferLength,omitempty" tf:"net_buffer_length,omitempty"`

	// (Number) The number of seconds to wait for more data from a connection before aborting the read.
	// The number of seconds to wait for more data from a connection before aborting the read.
	NetReadTimeout *int64 `json:"netReadTimeout,omitempty" tf:"net_read_timeout,omitempty"`

	// (Number) The number of seconds to wait for a block to be written to a connection before aborting the write.
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *int64 `json:"netWriteTimeout,omitempty" tf:"net_write_timeout,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// (String) Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// (Boolean) Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SQLRequirePrimaryKey *bool `json:"sqlRequirePrimaryKey,omitempty" tf:"sql_require_primary_key,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`

	// (Boolean) Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off.
	// Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off.
	SlowQueryLog *bool `json:"slowQueryLog,omitempty" tf:"slow_query_log,omitempty"`

	// (Number) Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	SortBufferSize *int64 `json:"sortBufferSize,omitempty" tf:"sort_buffer_size,omitempty"`

	// memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	TmpTableSize *int64 `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// (String) MySQL major version.
	// MySQL major version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Number) The number of seconds the server waits for activity on a noninteractive connection before closing it.
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *int64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type PropertiesObservation struct {

	// (String) Custom username for admin user. This must be set only when a new service is being created.
	// Custom username for admin user. This must be set only when a new service is being created.
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (Number) The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupHour *int64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// (Number) The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupMinute *int64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// (Number) The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *int64 `json:"binlogRetentionPeriod,omitempty" tf:"binlog_retention_period,omitempty"`

	// (Number) The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
	// The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
	ConnectTimeout *int64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// 12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
	DefaultTimeZone *string `json:"defaultTimeZone,omitempty" tf:"default_time_zone,omitempty"`

	// (Number) The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	GroupConcatMaxLen *int64 `json:"groupConcatMaxLen,omitempty" tf:"group_concat_max_len,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Number) The time, in seconds, before cached statistics expire.
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *int64 `json:"informationSchemaStatsExpiry,omitempty" tf:"information_schema_stats_expiry,omitempty"`

	// (Number) Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	InnodbChangeBufferMaxSize *int64 `json:"innodbChangeBufferMaxSize,omitempty" tf:"innodb_change_buffer_max_size,omitempty"`

	// dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	InnodbFlushNeighbors *int64 `json:"innodbFlushNeighbors,omitempty" tf:"innodb_flush_neighbors,omitempty"`

	// (Number) Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	InnodbFtMinTokenSize *int64 `json:"innodbFtMinTokenSize,omitempty" tf:"innodb_ft_min_token_size,omitempty"`

	// (String) This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `json:"innodbFtServerStopwordTable,omitempty" tf:"innodb_ft_server_stopword_table,omitempty"`

	// (Number) The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	InnodbLockWaitTimeout *int64 `json:"innodbLockWaitTimeout,omitempty" tf:"innodb_lock_wait_timeout,omitempty"`

	// (Number) The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	InnodbLogBufferSize *int64 `json:"innodbLogBufferSize,omitempty" tf:"innodb_log_buffer_size,omitempty"`

	// (Number) The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *int64 `json:"innodbOnlineAlterLogMaxSize,omitempty" tf:"innodb_online_alter_log_max_size,omitempty"`

	// (Boolean) When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
	// When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `json:"innodbPrintAllDeadlocks,omitempty" tf:"innodb_print_all_deadlocks,omitempty"`

	// (Number) The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	InnodbReadIoThreads *int64 `json:"innodbReadIoThreads,omitempty" tf:"innodb_read_io_threads,omitempty"`

	// (Boolean) When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	// When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	InnodbRollbackOnTimeout *bool `json:"innodbRollbackOnTimeout,omitempty" tf:"innodb_rollback_on_timeout,omitempty"`

	// no limit).
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	InnodbThreadConcurrency *int64 `json:"innodbThreadConcurrency,omitempty" tf:"innodb_thread_concurrency,omitempty"`

	// (Number) The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	InnodbWriteIoThreads *int64 `json:"innodbWriteIoThreads,omitempty" tf:"innodb_write_io_threads,omitempty"`

	// (Number) The number of seconds the server waits for activity on an interactive connection before closing it.
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	InteractiveTimeout *int64 `json:"interactiveTimeout,omitempty" tf:"interactive_timeout,omitempty"`

	// memory internal temporary tables.
	// The storage engine for in-memory internal temporary tables.
	InternalTmpMemStorageEngine *string `json:"internalTmpMemStorageEngine,omitempty" tf:"internal_tmp_mem_storage_engine,omitempty"`

	// (Number) The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s.
	// The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s.
	LongQueryTime *float64 `json:"longQueryTime,omitempty" tf:"long_query_time,omitempty"`

	// (Number) Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	MaxAllowedPacket *int64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	MaxHeapTableSize *int64 `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	Migration []MigrationObservation `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Number) Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	NetBufferLength *int64 `json:"netBufferLength,omitempty" tf:"net_buffer_length,omitempty"`

	// (Number) The number of seconds to wait for more data from a connection before aborting the read.
	// The number of seconds to wait for more data from a connection before aborting the read.
	NetReadTimeout *int64 `json:"netReadTimeout,omitempty" tf:"net_read_timeout,omitempty"`

	// (Number) The number of seconds to wait for a block to be written to a connection before aborting the write.
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *int64 `json:"netWriteTimeout,omitempty" tf:"net_write_timeout,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// (String) Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// (Boolean) Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SQLRequirePrimaryKey *bool `json:"sqlRequirePrimaryKey,omitempty" tf:"sql_require_primary_key,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`

	// (Boolean) Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off.
	// Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off.
	SlowQueryLog *bool `json:"slowQueryLog,omitempty" tf:"slow_query_log,omitempty"`

	// (Number) Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	SortBufferSize *int64 `json:"sortBufferSize,omitempty" tf:"sort_buffer_size,omitempty"`

	// memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	TmpTableSize *int64 `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// (String) MySQL major version.
	// MySQL major version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Number) The number of seconds the server waits for activity on a noninteractive connection before closing it.
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *int64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type PropertiesParameters struct {

	// (String, Sensitive) Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// (String) Custom username for admin user. This must be set only when a new service is being created.
	// Custom username for admin user. This must be set only when a new service is being created.
	// +kubebuilder:validation:Optional
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// +kubebuilder:validation:Optional
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (Number) The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// +kubebuilder:validation:Optional
	BackupHour *int64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// (Number) The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// +kubebuilder:validation:Optional
	BackupMinute *int64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// (Number) The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
	// +kubebuilder:validation:Optional
	BinlogRetentionPeriod *int64 `json:"binlogRetentionPeriod,omitempty" tf:"binlog_retention_period,omitempty"`

	// (Number) The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
	// The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
	// +kubebuilder:validation:Optional
	ConnectTimeout *int64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// 12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
	// +kubebuilder:validation:Optional
	DefaultTimeZone *string `json:"defaultTimeZone,omitempty" tf:"default_time_zone,omitempty"`

	// (Number) The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	// +kubebuilder:validation:Optional
	GroupConcatMaxLen *int64 `json:"groupConcatMaxLen,omitempty" tf:"group_concat_max_len,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Number) The time, in seconds, before cached statistics expire.
	// The time, in seconds, before cached statistics expire.
	// +kubebuilder:validation:Optional
	InformationSchemaStatsExpiry *int64 `json:"informationSchemaStatsExpiry,omitempty" tf:"information_schema_stats_expiry,omitempty"`

	// (Number) Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	// +kubebuilder:validation:Optional
	InnodbChangeBufferMaxSize *int64 `json:"innodbChangeBufferMaxSize,omitempty" tf:"innodb_change_buffer_max_size,omitempty"`

	// dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	// +kubebuilder:validation:Optional
	InnodbFlushNeighbors *int64 `json:"innodbFlushNeighbors,omitempty" tf:"innodb_flush_neighbors,omitempty"`

	// (Number) Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	// +kubebuilder:validation:Optional
	InnodbFtMinTokenSize *int64 `json:"innodbFtMinTokenSize,omitempty" tf:"innodb_ft_min_token_size,omitempty"`

	// (String) This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
	// +kubebuilder:validation:Optional
	InnodbFtServerStopwordTable *string `json:"innodbFtServerStopwordTable,omitempty" tf:"innodb_ft_server_stopword_table,omitempty"`

	// (Number) The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	// +kubebuilder:validation:Optional
	InnodbLockWaitTimeout *int64 `json:"innodbLockWaitTimeout,omitempty" tf:"innodb_lock_wait_timeout,omitempty"`

	// (Number) The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	// +kubebuilder:validation:Optional
	InnodbLogBufferSize *int64 `json:"innodbLogBufferSize,omitempty" tf:"innodb_log_buffer_size,omitempty"`

	// (Number) The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	// +kubebuilder:validation:Optional
	InnodbOnlineAlterLogMaxSize *int64 `json:"innodbOnlineAlterLogMaxSize,omitempty" tf:"innodb_online_alter_log_max_size,omitempty"`

	// (Boolean) When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
	// When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
	// +kubebuilder:validation:Optional
	InnodbPrintAllDeadlocks *bool `json:"innodbPrintAllDeadlocks,omitempty" tf:"innodb_print_all_deadlocks,omitempty"`

	// (Number) The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// +kubebuilder:validation:Optional
	InnodbReadIoThreads *int64 `json:"innodbReadIoThreads,omitempty" tf:"innodb_read_io_threads,omitempty"`

	// (Boolean) When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	// When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	// +kubebuilder:validation:Optional
	InnodbRollbackOnTimeout *bool `json:"innodbRollbackOnTimeout,omitempty" tf:"innodb_rollback_on_timeout,omitempty"`

	// no limit).
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	// +kubebuilder:validation:Optional
	InnodbThreadConcurrency *int64 `json:"innodbThreadConcurrency,omitempty" tf:"innodb_thread_concurrency,omitempty"`

	// (Number) The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	// +kubebuilder:validation:Optional
	InnodbWriteIoThreads *int64 `json:"innodbWriteIoThreads,omitempty" tf:"innodb_write_io_threads,omitempty"`

	// (Number) The number of seconds the server waits for activity on an interactive connection before closing it.
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	// +kubebuilder:validation:Optional
	InteractiveTimeout *int64 `json:"interactiveTimeout,omitempty" tf:"interactive_timeout,omitempty"`

	// memory internal temporary tables.
	// The storage engine for in-memory internal temporary tables.
	// +kubebuilder:validation:Optional
	InternalTmpMemStorageEngine *string `json:"internalTmpMemStorageEngine,omitempty" tf:"internal_tmp_mem_storage_engine,omitempty"`

	// (Number) The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s.
	// The slow_query_logs work as SQL statements that take more than long_query_time seconds to execute. Default is 10s.
	// +kubebuilder:validation:Optional
	LongQueryTime *float64 `json:"longQueryTime,omitempty" tf:"long_query_time,omitempty"`

	// (Number) Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	// +kubebuilder:validation:Optional
	MaxAllowedPacket *int64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	// +kubebuilder:validation:Optional
	MaxHeapTableSize *int64 `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	// +kubebuilder:validation:Optional
	Migration []MigrationParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Number) Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	// +kubebuilder:validation:Optional
	NetBufferLength *int64 `json:"netBufferLength,omitempty" tf:"net_buffer_length,omitempty"`

	// (Number) The number of seconds to wait for more data from a connection before aborting the read.
	// The number of seconds to wait for more data from a connection before aborting the read.
	// +kubebuilder:validation:Optional
	NetReadTimeout *int64 `json:"netReadTimeout,omitempty" tf:"net_read_timeout,omitempty"`

	// (Number) The number of seconds to wait for a block to be written to a connection before aborting the write.
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	// +kubebuilder:validation:Optional
	NetWriteTimeout *int64 `json:"netWriteTimeout,omitempty" tf:"net_write_timeout,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	// +kubebuilder:validation:Optional
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// (String) Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
	// +kubebuilder:validation:Optional
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// (Boolean) Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	// +kubebuilder:validation:Optional
	SQLRequirePrimaryKey *bool `json:"sqlRequirePrimaryKey,omitempty" tf:"sql_require_primary_key,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// +kubebuilder:validation:Optional
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`

	// (Boolean) Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off.
	// Slow query log enables capturing of slow queries. Setting slow_query_log to false also truncates the mysql.slow_log table. Default is off.
	// +kubebuilder:validation:Optional
	SlowQueryLog *bool `json:"slowQueryLog,omitempty" tf:"slow_query_log,omitempty"`

	// (Number) Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	// +kubebuilder:validation:Optional
	SortBufferSize *int64 `json:"sortBufferSize,omitempty" tf:"sort_buffer_size,omitempty"`

	// memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	// +kubebuilder:validation:Optional
	TmpTableSize *int64 `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// (String) MySQL major version.
	// MySQL major version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Number) The number of seconds the server waits for activity on a noninteractive connection before closing it.
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	// +kubebuilder:validation:Optional
	WaitTimeout *int64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

// ManagedDatabaseMysqlSpec defines the desired state of ManagedDatabaseMysql
type ManagedDatabaseMysqlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedDatabaseMysqlParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedDatabaseMysqlInitParameters `json:"initProvider,omitempty"`
}

// ManagedDatabaseMysqlStatus defines the observed state of ManagedDatabaseMysql.
type ManagedDatabaseMysqlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedDatabaseMysqlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedDatabaseMysql is the Schema for the ManagedDatabaseMysqls API. This resource represents MySQL managed database. See UpCloud Managed Databases https://upcloud.com/products/managed-databases product page for more details about the service.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type ManagedDatabaseMysql struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plan) || (has(self.initProvider) && has(self.initProvider.plan))",message="spec.forProvider.plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ManagedDatabaseMysqlSpec   `json:"spec"`
	Status ManagedDatabaseMysqlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDatabaseMysqlList contains a list of ManagedDatabaseMysqls
type ManagedDatabaseMysqlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedDatabaseMysql `json:"items"`
}

// Repository type metadata.
var (
	ManagedDatabaseMysql_Kind             = "ManagedDatabaseMysql"
	ManagedDatabaseMysql_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedDatabaseMysql_Kind}.String()
	ManagedDatabaseMysql_KindAPIVersion   = ManagedDatabaseMysql_Kind + "." + CRDGroupVersion.String()
	ManagedDatabaseMysql_GroupVersionKind = CRDGroupVersion.WithKind(ManagedDatabaseMysql_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedDatabaseMysql{}, &ManagedDatabaseMysqlList{})
}
