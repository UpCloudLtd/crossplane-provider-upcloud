/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedDatabasePostgresqlComponentsInitParameters struct {
}

type ManagedDatabasePostgresqlComponentsObservation struct {

	// (String)
	// Type of the component
	Component *string `json:"component,omitempty" tf:"component,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname of the component
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the component
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String)
	// Component network route type
	Route *string `json:"route,omitempty" tf:"route,omitempty"`

	// (String)
	// Usage of the component
	Usage *string `json:"usage,omitempty" tf:"usage,omitempty"`
}

type ManagedDatabasePostgresqlComponentsParameters struct {
}

type ManagedDatabasePostgresqlInitParameters struct {

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	Network []ManagedDatabasePostgresqlNetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	NodeStates []ManagedDatabasePostgresqlNodeStatesInitParameters `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (Block List, Max: 1) Database Engine properties for PostgreSQL (see below for nested schema)
	// Database Engine properties for PostgreSQL
	Properties []ManagedDatabasePostgresqlPropertiesInitParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabasePostgresqlNetworkInitParameters struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Network
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type ManagedDatabasePostgresqlNetworkObservation struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ManagedDatabasePostgresqlNetworkParameters struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	// +kubebuilder:validation:Optional
	Family *string `json:"family" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type ManagedDatabasePostgresqlNodeStatesInitParameters struct {

	// (String)
	// Role of the node
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type ManagedDatabasePostgresqlNodeStatesObservation struct {

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name plus a node iteration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	// Role of the node
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) State of the service
	// State of the node
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ManagedDatabasePostgresqlNodeStatesParameters struct {

	// (String)
	// Role of the node
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type ManagedDatabasePostgresqlObservation struct {

	// (List of Object) Service component information (see below for nested schema)
	// Service component information
	Components []ManagedDatabasePostgresqlComponentsObservation `json:"components,omitempty" tf:"components,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	Network []ManagedDatabasePostgresqlNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	NodeStates []ManagedDatabasePostgresqlNodeStatesObservation `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (String) Primary database name
	// Primary database name
	PrimaryDatabase *string `json:"primaryDatabase,omitempty" tf:"primary_database,omitempty"`

	// (Block List, Max: 1) Database Engine properties for PostgreSQL (see below for nested schema)
	// Database Engine properties for PostgreSQL
	Properties []ManagedDatabasePostgresqlPropertiesObservation `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Hostname to the service instance
	// Hostname to the service instance
	ServiceHost *string `json:"serviceHost,omitempty" tf:"service_host,omitempty"`

	// (String) Port to the service instance
	// Port to the service instance
	ServicePort *string `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// (String) Primary username to the service instance
	// Primary username to the service instance
	ServiceUsername *string `json:"serviceUsername,omitempty" tf:"service_username,omitempty"`

	// (String) SSL Connection Mode for PostgreSQL
	// SSL Connection Mode for PostgreSQL
	Sslmode *string `json:"sslmode,omitempty" tf:"sslmode,omitempty"`

	// (String) State of the service
	// State of the service
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Type of the service
	// Type of the service
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabasePostgresqlParameters struct {

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// +kubebuilder:validation:Optional
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	// +kubebuilder:validation:Optional
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	// +kubebuilder:validation:Optional
	Network []ManagedDatabasePostgresqlNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	// +kubebuilder:validation:Optional
	NodeStates []ManagedDatabasePostgresqlNodeStatesParameters `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	// +kubebuilder:validation:Optional
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (Block List, Max: 1) Database Engine properties for PostgreSQL (see below for nested schema)
	// Database Engine properties for PostgreSQL
	// +kubebuilder:validation:Optional
	Properties []ManagedDatabasePostgresqlPropertiesParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type ManagedDatabasePostgresqlPropertiesInitParameters struct {

	// (String, Sensitive) Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// (String) Custom username for admin user. This must be set only when a new service is being created.
	// Custom username for admin user. This must be set only when a new service is being created.
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (Number) Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	// Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor *float64 `json:"autovacuumAnalyzeScaleFactor,omitempty" tf:"autovacuum_analyze_scale_factor,omitempty"`

	// (Number) Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold *int64 `json:"autovacuumAnalyzeThreshold,omitempty" tf:"autovacuum_analyze_threshold,omitempty"`

	// (Number) Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge *int64 `json:"autovacuumFreezeMaxAge,omitempty" tf:"autovacuum_freeze_max_age,omitempty"`

	// (Number) Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers *int64 `json:"autovacuumMaxWorkers,omitempty" tf:"autovacuum_max_workers,omitempty"`

	// (Number) Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
	AutovacuumNaptime *int64 `json:"autovacuumNaptime,omitempty" tf:"autovacuum_naptime,omitempty"`

	// 1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
	AutovacuumVacuumCostDelay *int64 `json:"autovacuumVacuumCostDelay,omitempty" tf:"autovacuum_vacuum_cost_delay,omitempty"`

	// 1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	AutovacuumVacuumCostLimit *int64 `json:"autovacuumVacuumCostLimit,omitempty" tf:"autovacuum_vacuum_cost_limit,omitempty"`

	// (Number) Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	// Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor *float64 `json:"autovacuumVacuumScaleFactor,omitempty" tf:"autovacuum_vacuum_scale_factor,omitempty"`

	// (Number) Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold *int64 `json:"autovacuumVacuumThreshold,omitempty" tf:"autovacuum_vacuum_threshold,omitempty"`

	// (Number) The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupHour *int64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// (Number) The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupMinute *int64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// (Number) Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	BgwriterDelay *int64 `json:"bgwriterDelay,omitempty" tf:"bgwriter_delay,omitempty"`

	// (Number) Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	// Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter *int64 `json:"bgwriterFlushAfter,omitempty" tf:"bgwriter_flush_after,omitempty"`

	// (Number) In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages *int64 `json:"bgwriterLruMaxpages,omitempty" tf:"bgwriter_lru_maxpages,omitempty"`

	// (Number) The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier *float64 `json:"bgwriterLruMultiplier,omitempty" tf:"bgwriter_lru_multiplier,omitempty"`

	// (Number) This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout *int64 `json:"deadlockTimeout,omitempty" tf:"deadlock_timeout,omitempty"`

	// (String) Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	DefaultToastCompression *string `json:"defaultToastCompression,omitempty" tf:"default_toast_compression,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Number) Time out sessions with open transactions after this number of milliseconds.
	// Time out sessions with open transactions after this number of milliseconds.
	IdleInTransactionSessionTimeout *int64 `json:"idleInTransactionSessionTimeout,omitempty" tf:"idle_in_transaction_session_timeout,omitempty"`

	// wide use of Just-in-Time Compilation (JIT).
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	Jit *bool `json:"jit,omitempty" tf:"jit,omitempty"`

	// one (the default) disables logging autovacuum actions.
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration *int64 `json:"logAutovacuumMinDuration,omitempty" tf:"log_autovacuum_min_duration,omitempty"`

	// (String) Controls the amount of detail written in the server log for each message that is logged.
	// Controls the amount of detail written in the server log for each message that is logged.
	LogErrorVerbosity *string `json:"logErrorVerbosity,omitempty" tf:"log_error_verbosity,omitempty"`

	// (String) Choose from one of the available log formats.
	// Choose from one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze etc.
	LogLinePrefix *string `json:"logLinePrefix,omitempty" tf:"log_line_prefix,omitempty"`

	// 1 disables.
	// Log statements that take more than this number of milliseconds to run, -1 disables.
	LogMinDurationStatement *int64 `json:"logMinDurationStatement,omitempty" tf:"log_min_duration_statement,omitempty"`

	// 1 disables.
	// Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
	LogTempFiles *int64 `json:"logTempFiles,omitempty" tf:"log_temp_files,omitempty"`

	// (Number) PostgreSQL maximum number of files that can be open per process.
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess *int64 `json:"maxFilesPerProcess,omitempty" tf:"max_files_per_process,omitempty"`

	// (Number) PostgreSQL maximum locks per transaction.
	// PostgreSQL maximum locks per transaction.
	MaxLocksPerTransaction *int64 `json:"maxLocksPerTransaction,omitempty" tf:"max_locks_per_transaction,omitempty"`

	// (Number) PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers *int64 `json:"maxLogicalReplicationWorkers,omitempty" tf:"max_logical_replication_workers,omitempty"`

	// (Number) Sets the maximum number of workers that the system can support for parallel queries.
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers *int64 `json:"maxParallelWorkers,omitempty" tf:"max_parallel_workers,omitempty"`

	// (Number) Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather *int64 `json:"maxParallelWorkersPerGather,omitempty" tf:"max_parallel_workers_per_gather,omitempty"`

	// (Number) PostgreSQL maximum predicate locks per transaction.
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction *int64 `json:"maxPredLocksPerTransaction,omitempty" tf:"max_pred_locks_per_transaction,omitempty"`

	// (Number) PostgreSQL maximum prepared transactions.
	// PostgreSQL maximum prepared transactions.
	MaxPreparedTransactions *int64 `json:"maxPreparedTransactions,omitempty" tf:"max_prepared_transactions,omitempty"`

	// (Number) PostgreSQL maximum replication slots.
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots *int64 `json:"maxReplicationSlots,omitempty" tf:"max_replication_slots,omitempty"`

	// 1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
	MaxSlotWalKeepSize *int64 `json:"maxSlotWalKeepSize,omitempty" tf:"max_slot_wal_keep_size,omitempty"`

	// (Number) Maximum depth of the stack in bytes.
	// Maximum depth of the stack in bytes.
	MaxStackDepth *int64 `json:"maxStackDepth,omitempty" tf:"max_stack_depth,omitempty"`

	// (Number) Max standby archive delay in milliseconds.
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay *int64 `json:"maxStandbyArchiveDelay,omitempty" tf:"max_standby_archive_delay,omitempty"`

	// (Number) Max standby streaming delay in milliseconds.
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay *int64 `json:"maxStandbyStreamingDelay,omitempty" tf:"max_standby_streaming_delay,omitempty"`

	// (Number) PostgreSQL maximum WAL senders.
	// PostgreSQL maximum WAL senders.
	MaxWalSenders *int64 `json:"maxWalSenders,omitempty" tf:"max_wal_senders,omitempty"`

	// (Number) Sets the maximum number of background processes that the system can support.
	// Sets the maximum number of background processes that the system can support.
	MaxWorkerProcesses *int64 `json:"maxWorkerProcesses,omitempty" tf:"max_worker_processes,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	Migration []PropertiesMigrationInitParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Number) Sets the time interval to run pg_partman's scheduled tasks.
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval *int64 `json:"pgPartmanBgwInterval,omitempty" tf:"pg_partman_bgw_interval,omitempty"`

	// (String) Controls which role to use for pg_partman's scheduled background tasks.
	// Controls which role to use for pg_partman's scheduled background tasks.
	PgPartmanBgwRole *string `json:"pgPartmanBgwRole,omitempty" tf:"pg_partman_bgw_role,omitempty"`

	// (Boolean) Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	// Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	PgStatMonitorEnable *bool `json:"pgStatMonitorEnable,omitempty" tf:"pg_stat_monitor_enable,omitempty"`

	// (Boolean) Enables or disables query plan monitoring.
	// Enables or disables query plan monitoring.
	PgStatMonitorPgsmEnableQueryPlan *bool `json:"pgStatMonitorPgsmEnableQueryPlan,omitempty" tf:"pg_stat_monitor_pgsm_enable_query_plan,omitempty"`

	// (Number) Sets the maximum number of buckets.
	// Sets the maximum number of buckets.
	PgStatMonitorPgsmMaxBuckets *int64 `json:"pgStatMonitorPgsmMaxBuckets,omitempty" tf:"pg_stat_monitor_pgsm_max_buckets,omitempty"`

	// level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	PgStatStatementsTrack *string `json:"pgStatStatementsTrack,omitempty" tf:"pg_stat_statements_track,omitempty"`

	// PGAudit settings. System-wide settings for the pgaudit extension.
	Pgaudit []PgauditInitParameters `json:"pgaudit,omitempty" tf:"pgaudit,omitempty"`

	// wide settings for pgbouncer. (see below for nested schema)
	// PGBouncer connection pooling settings. System-wide settings for pgbouncer.
	Pgbouncer []PgbouncerInitParameters `json:"pgbouncer,omitempty" tf:"pgbouncer,omitempty"`

	// wide settings for pglookout. (see below for nested schema)
	// PGLookout settings. System-wide settings for pglookout.
	Pglookout []PglookoutInitParameters `json:"pglookout,omitempty" tf:"pglookout,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`

	// 60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
	SharedBuffersPercentage *float64 `json:"sharedBuffersPercentage,omitempty" tf:"shared_buffers_percentage,omitempty"`

	// (String) Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	SynchronousReplication *string `json:"synchronousReplication,omitempty" tf:"synchronous_replication,omitempty"`

	// 1 for unlimited.
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	TempFileLimit *int64 `json:"tempFileLimit,omitempty" tf:"temp_file_limit,omitempty"`

	// wide settings for the timescaledb extension. (see below for nested schema)
	// TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
	Timescaledb []TimescaledbInitParameters `json:"timescaledb,omitempty" tf:"timescaledb,omitempty"`

	// (String) PostgreSQL service timezone.
	// PostgreSQL service timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// (Number) Specifies the number of bytes reserved to track the currently executing command for each active session.
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize *int64 `json:"trackActivityQuerySize,omitempty" tf:"track_activity_query_size,omitempty"`

	// (String) Record commit time of transactions.
	// Record commit time of transactions.
	TrackCommitTimestamp *string `json:"trackCommitTimestamp,omitempty" tf:"track_commit_timestamp,omitempty"`

	// (String) Enables tracking of function call counts and time used.
	// Enables tracking of function call counts and time used.
	TrackFunctions *string `json:"trackFunctions,omitempty" tf:"track_functions,omitempty"`

	// (String) Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	TrackIoTiming *string `json:"trackIoTiming,omitempty" tf:"track_io_timing,omitempty"`

	// (String) Variant of the PostgreSQL service, may affect the features that are exposed by default.
	// Variant of the PostgreSQL service, may affect the features that are exposed by default.
	Variant *string `json:"variant,omitempty" tf:"variant,omitempty"`

	// (String) PostgreSQL major version.
	// PostgreSQL major version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Number) Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	WalSenderTimeout *int64 `json:"walSenderTimeout,omitempty" tf:"wal_sender_timeout,omitempty"`

	// (Number) WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	WalWriterDelay *int64 `json:"walWriterDelay,omitempty" tf:"wal_writer_delay,omitempty"`

	// (Number) Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem *int64 `json:"workMem,omitempty" tf:"work_mem,omitempty"`
}

type ManagedDatabasePostgresqlPropertiesObservation struct {

	// (String) Custom username for admin user. This must be set only when a new service is being created.
	// Custom username for admin user. This must be set only when a new service is being created.
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (Number) Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	// Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor *float64 `json:"autovacuumAnalyzeScaleFactor,omitempty" tf:"autovacuum_analyze_scale_factor,omitempty"`

	// (Number) Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold *int64 `json:"autovacuumAnalyzeThreshold,omitempty" tf:"autovacuum_analyze_threshold,omitempty"`

	// (Number) Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge *int64 `json:"autovacuumFreezeMaxAge,omitempty" tf:"autovacuum_freeze_max_age,omitempty"`

	// (Number) Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers *int64 `json:"autovacuumMaxWorkers,omitempty" tf:"autovacuum_max_workers,omitempty"`

	// (Number) Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
	AutovacuumNaptime *int64 `json:"autovacuumNaptime,omitempty" tf:"autovacuum_naptime,omitempty"`

	// 1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
	AutovacuumVacuumCostDelay *int64 `json:"autovacuumVacuumCostDelay,omitempty" tf:"autovacuum_vacuum_cost_delay,omitempty"`

	// 1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	AutovacuumVacuumCostLimit *int64 `json:"autovacuumVacuumCostLimit,omitempty" tf:"autovacuum_vacuum_cost_limit,omitempty"`

	// (Number) Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	// Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor *float64 `json:"autovacuumVacuumScaleFactor,omitempty" tf:"autovacuum_vacuum_scale_factor,omitempty"`

	// (Number) Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold *int64 `json:"autovacuumVacuumThreshold,omitempty" tf:"autovacuum_vacuum_threshold,omitempty"`

	// (Number) The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupHour *int64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// (Number) The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	BackupMinute *int64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// (Number) Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	BgwriterDelay *int64 `json:"bgwriterDelay,omitempty" tf:"bgwriter_delay,omitempty"`

	// (Number) Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	// Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter *int64 `json:"bgwriterFlushAfter,omitempty" tf:"bgwriter_flush_after,omitempty"`

	// (Number) In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages *int64 `json:"bgwriterLruMaxpages,omitempty" tf:"bgwriter_lru_maxpages,omitempty"`

	// (Number) The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier *float64 `json:"bgwriterLruMultiplier,omitempty" tf:"bgwriter_lru_multiplier,omitempty"`

	// (Number) This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout *int64 `json:"deadlockTimeout,omitempty" tf:"deadlock_timeout,omitempty"`

	// (String) Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	DefaultToastCompression *string `json:"defaultToastCompression,omitempty" tf:"default_toast_compression,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Number) Time out sessions with open transactions after this number of milliseconds.
	// Time out sessions with open transactions after this number of milliseconds.
	IdleInTransactionSessionTimeout *int64 `json:"idleInTransactionSessionTimeout,omitempty" tf:"idle_in_transaction_session_timeout,omitempty"`

	// wide use of Just-in-Time Compilation (JIT).
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	Jit *bool `json:"jit,omitempty" tf:"jit,omitempty"`

	// one (the default) disables logging autovacuum actions.
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration *int64 `json:"logAutovacuumMinDuration,omitempty" tf:"log_autovacuum_min_duration,omitempty"`

	// (String) Controls the amount of detail written in the server log for each message that is logged.
	// Controls the amount of detail written in the server log for each message that is logged.
	LogErrorVerbosity *string `json:"logErrorVerbosity,omitempty" tf:"log_error_verbosity,omitempty"`

	// (String) Choose from one of the available log formats.
	// Choose from one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze etc.
	LogLinePrefix *string `json:"logLinePrefix,omitempty" tf:"log_line_prefix,omitempty"`

	// 1 disables.
	// Log statements that take more than this number of milliseconds to run, -1 disables.
	LogMinDurationStatement *int64 `json:"logMinDurationStatement,omitempty" tf:"log_min_duration_statement,omitempty"`

	// 1 disables.
	// Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
	LogTempFiles *int64 `json:"logTempFiles,omitempty" tf:"log_temp_files,omitempty"`

	// (Number) PostgreSQL maximum number of files that can be open per process.
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess *int64 `json:"maxFilesPerProcess,omitempty" tf:"max_files_per_process,omitempty"`

	// (Number) PostgreSQL maximum locks per transaction.
	// PostgreSQL maximum locks per transaction.
	MaxLocksPerTransaction *int64 `json:"maxLocksPerTransaction,omitempty" tf:"max_locks_per_transaction,omitempty"`

	// (Number) PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers *int64 `json:"maxLogicalReplicationWorkers,omitempty" tf:"max_logical_replication_workers,omitempty"`

	// (Number) Sets the maximum number of workers that the system can support for parallel queries.
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers *int64 `json:"maxParallelWorkers,omitempty" tf:"max_parallel_workers,omitempty"`

	// (Number) Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather *int64 `json:"maxParallelWorkersPerGather,omitempty" tf:"max_parallel_workers_per_gather,omitempty"`

	// (Number) PostgreSQL maximum predicate locks per transaction.
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction *int64 `json:"maxPredLocksPerTransaction,omitempty" tf:"max_pred_locks_per_transaction,omitempty"`

	// (Number) PostgreSQL maximum prepared transactions.
	// PostgreSQL maximum prepared transactions.
	MaxPreparedTransactions *int64 `json:"maxPreparedTransactions,omitempty" tf:"max_prepared_transactions,omitempty"`

	// (Number) PostgreSQL maximum replication slots.
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots *int64 `json:"maxReplicationSlots,omitempty" tf:"max_replication_slots,omitempty"`

	// 1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
	MaxSlotWalKeepSize *int64 `json:"maxSlotWalKeepSize,omitempty" tf:"max_slot_wal_keep_size,omitempty"`

	// (Number) Maximum depth of the stack in bytes.
	// Maximum depth of the stack in bytes.
	MaxStackDepth *int64 `json:"maxStackDepth,omitempty" tf:"max_stack_depth,omitempty"`

	// (Number) Max standby archive delay in milliseconds.
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay *int64 `json:"maxStandbyArchiveDelay,omitempty" tf:"max_standby_archive_delay,omitempty"`

	// (Number) Max standby streaming delay in milliseconds.
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay *int64 `json:"maxStandbyStreamingDelay,omitempty" tf:"max_standby_streaming_delay,omitempty"`

	// (Number) PostgreSQL maximum WAL senders.
	// PostgreSQL maximum WAL senders.
	MaxWalSenders *int64 `json:"maxWalSenders,omitempty" tf:"max_wal_senders,omitempty"`

	// (Number) Sets the maximum number of background processes that the system can support.
	// Sets the maximum number of background processes that the system can support.
	MaxWorkerProcesses *int64 `json:"maxWorkerProcesses,omitempty" tf:"max_worker_processes,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	Migration []PropertiesMigrationObservation `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Number) Sets the time interval to run pg_partman's scheduled tasks.
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval *int64 `json:"pgPartmanBgwInterval,omitempty" tf:"pg_partman_bgw_interval,omitempty"`

	// (String) Controls which role to use for pg_partman's scheduled background tasks.
	// Controls which role to use for pg_partman's scheduled background tasks.
	PgPartmanBgwRole *string `json:"pgPartmanBgwRole,omitempty" tf:"pg_partman_bgw_role,omitempty"`

	// (Boolean) Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	// Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	PgStatMonitorEnable *bool `json:"pgStatMonitorEnable,omitempty" tf:"pg_stat_monitor_enable,omitempty"`

	// (Boolean) Enables or disables query plan monitoring.
	// Enables or disables query plan monitoring.
	PgStatMonitorPgsmEnableQueryPlan *bool `json:"pgStatMonitorPgsmEnableQueryPlan,omitempty" tf:"pg_stat_monitor_pgsm_enable_query_plan,omitempty"`

	// (Number) Sets the maximum number of buckets.
	// Sets the maximum number of buckets.
	PgStatMonitorPgsmMaxBuckets *int64 `json:"pgStatMonitorPgsmMaxBuckets,omitempty" tf:"pg_stat_monitor_pgsm_max_buckets,omitempty"`

	// level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	PgStatStatementsTrack *string `json:"pgStatStatementsTrack,omitempty" tf:"pg_stat_statements_track,omitempty"`

	// PGAudit settings. System-wide settings for the pgaudit extension.
	Pgaudit []PgauditObservation `json:"pgaudit,omitempty" tf:"pgaudit,omitempty"`

	// wide settings for pgbouncer. (see below for nested schema)
	// PGBouncer connection pooling settings. System-wide settings for pgbouncer.
	Pgbouncer []PgbouncerObservation `json:"pgbouncer,omitempty" tf:"pgbouncer,omitempty"`

	// wide settings for pglookout. (see below for nested schema)
	// PGLookout settings. System-wide settings for pglookout.
	Pglookout []PglookoutObservation `json:"pglookout,omitempty" tf:"pglookout,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`

	// 60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
	SharedBuffersPercentage *float64 `json:"sharedBuffersPercentage,omitempty" tf:"shared_buffers_percentage,omitempty"`

	// (String) Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	SynchronousReplication *string `json:"synchronousReplication,omitempty" tf:"synchronous_replication,omitempty"`

	// 1 for unlimited.
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	TempFileLimit *int64 `json:"tempFileLimit,omitempty" tf:"temp_file_limit,omitempty"`

	// wide settings for the timescaledb extension. (see below for nested schema)
	// TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
	Timescaledb []TimescaledbObservation `json:"timescaledb,omitempty" tf:"timescaledb,omitempty"`

	// (String) PostgreSQL service timezone.
	// PostgreSQL service timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// (Number) Specifies the number of bytes reserved to track the currently executing command for each active session.
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize *int64 `json:"trackActivityQuerySize,omitempty" tf:"track_activity_query_size,omitempty"`

	// (String) Record commit time of transactions.
	// Record commit time of transactions.
	TrackCommitTimestamp *string `json:"trackCommitTimestamp,omitempty" tf:"track_commit_timestamp,omitempty"`

	// (String) Enables tracking of function call counts and time used.
	// Enables tracking of function call counts and time used.
	TrackFunctions *string `json:"trackFunctions,omitempty" tf:"track_functions,omitempty"`

	// (String) Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	TrackIoTiming *string `json:"trackIoTiming,omitempty" tf:"track_io_timing,omitempty"`

	// (String) Variant of the PostgreSQL service, may affect the features that are exposed by default.
	// Variant of the PostgreSQL service, may affect the features that are exposed by default.
	Variant *string `json:"variant,omitempty" tf:"variant,omitempty"`

	// (String) PostgreSQL major version.
	// PostgreSQL major version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Number) Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	WalSenderTimeout *int64 `json:"walSenderTimeout,omitempty" tf:"wal_sender_timeout,omitempty"`

	// (Number) WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	WalWriterDelay *int64 `json:"walWriterDelay,omitempty" tf:"wal_writer_delay,omitempty"`

	// (Number) Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem *int64 `json:"workMem,omitempty" tf:"work_mem,omitempty"`
}

type ManagedDatabasePostgresqlPropertiesParameters struct {

	// (String, Sensitive) Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// (String) Custom username for admin user. This must be set only when a new service is being created.
	// Custom username for admin user. This must be set only when a new service is being created.
	// +kubebuilder:validation:Optional
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username,omitempty"`

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// +kubebuilder:validation:Optional
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (Number) Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	// Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	// +kubebuilder:validation:Optional
	AutovacuumAnalyzeScaleFactor *float64 `json:"autovacuumAnalyzeScaleFactor,omitempty" tf:"autovacuum_analyze_scale_factor,omitempty"`

	// (Number) Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	// +kubebuilder:validation:Optional
	AutovacuumAnalyzeThreshold *int64 `json:"autovacuumAnalyzeThreshold,omitempty" tf:"autovacuum_analyze_threshold,omitempty"`

	// (Number) Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	// +kubebuilder:validation:Optional
	AutovacuumFreezeMaxAge *int64 `json:"autovacuumFreezeMaxAge,omitempty" tf:"autovacuum_freeze_max_age,omitempty"`

	// (Number) Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	// +kubebuilder:validation:Optional
	AutovacuumMaxWorkers *int64 `json:"autovacuumMaxWorkers,omitempty" tf:"autovacuum_max_workers,omitempty"`

	// (Number) Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
	// +kubebuilder:validation:Optional
	AutovacuumNaptime *int64 `json:"autovacuumNaptime,omitempty" tf:"autovacuum_naptime,omitempty"`

	// 1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
	// +kubebuilder:validation:Optional
	AutovacuumVacuumCostDelay *int64 `json:"autovacuumVacuumCostDelay,omitempty" tf:"autovacuum_vacuum_cost_delay,omitempty"`

	// 1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	// +kubebuilder:validation:Optional
	AutovacuumVacuumCostLimit *int64 `json:"autovacuumVacuumCostLimit,omitempty" tf:"autovacuum_vacuum_cost_limit,omitempty"`

	// (Number) Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	// Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	// +kubebuilder:validation:Optional
	AutovacuumVacuumScaleFactor *float64 `json:"autovacuumVacuumScaleFactor,omitempty" tf:"autovacuum_vacuum_scale_factor,omitempty"`

	// (Number) Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	// +kubebuilder:validation:Optional
	AutovacuumVacuumThreshold *int64 `json:"autovacuumVacuumThreshold,omitempty" tf:"autovacuum_vacuum_threshold,omitempty"`

	// (Number) The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
	// +kubebuilder:validation:Optional
	BackupHour *int64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// (Number) The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
	// +kubebuilder:validation:Optional
	BackupMinute *int64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// (Number) Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	// +kubebuilder:validation:Optional
	BgwriterDelay *int64 `json:"bgwriterDelay,omitempty" tf:"bgwriter_delay,omitempty"`

	// (Number) Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	// Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	// +kubebuilder:validation:Optional
	BgwriterFlushAfter *int64 `json:"bgwriterFlushAfter,omitempty" tf:"bgwriter_flush_after,omitempty"`

	// (Number) In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	// +kubebuilder:validation:Optional
	BgwriterLruMaxpages *int64 `json:"bgwriterLruMaxpages,omitempty" tf:"bgwriter_lru_maxpages,omitempty"`

	// (Number) The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	// +kubebuilder:validation:Optional
	BgwriterLruMultiplier *float64 `json:"bgwriterLruMultiplier,omitempty" tf:"bgwriter_lru_multiplier,omitempty"`

	// (Number) This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	// +kubebuilder:validation:Optional
	DeadlockTimeout *int64 `json:"deadlockTimeout,omitempty" tf:"deadlock_timeout,omitempty"`

	// (String) Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	// +kubebuilder:validation:Optional
	DefaultToastCompression *string `json:"defaultToastCompression,omitempty" tf:"default_toast_compression,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Number) Time out sessions with open transactions after this number of milliseconds.
	// Time out sessions with open transactions after this number of milliseconds.
	// +kubebuilder:validation:Optional
	IdleInTransactionSessionTimeout *int64 `json:"idleInTransactionSessionTimeout,omitempty" tf:"idle_in_transaction_session_timeout,omitempty"`

	// wide use of Just-in-Time Compilation (JIT).
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	// +kubebuilder:validation:Optional
	Jit *bool `json:"jit,omitempty" tf:"jit,omitempty"`

	// one (the default) disables logging autovacuum actions.
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	// +kubebuilder:validation:Optional
	LogAutovacuumMinDuration *int64 `json:"logAutovacuumMinDuration,omitempty" tf:"log_autovacuum_min_duration,omitempty"`

	// (String) Controls the amount of detail written in the server log for each message that is logged.
	// Controls the amount of detail written in the server log for each message that is logged.
	// +kubebuilder:validation:Optional
	LogErrorVerbosity *string `json:"logErrorVerbosity,omitempty" tf:"log_error_verbosity,omitempty"`

	// (String) Choose from one of the available log formats.
	// Choose from one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze etc.
	// +kubebuilder:validation:Optional
	LogLinePrefix *string `json:"logLinePrefix,omitempty" tf:"log_line_prefix,omitempty"`

	// 1 disables.
	// Log statements that take more than this number of milliseconds to run, -1 disables.
	// +kubebuilder:validation:Optional
	LogMinDurationStatement *int64 `json:"logMinDurationStatement,omitempty" tf:"log_min_duration_statement,omitempty"`

	// 1 disables.
	// Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
	// +kubebuilder:validation:Optional
	LogTempFiles *int64 `json:"logTempFiles,omitempty" tf:"log_temp_files,omitempty"`

	// (Number) PostgreSQL maximum number of files that can be open per process.
	// PostgreSQL maximum number of files that can be open per process.
	// +kubebuilder:validation:Optional
	MaxFilesPerProcess *int64 `json:"maxFilesPerProcess,omitempty" tf:"max_files_per_process,omitempty"`

	// (Number) PostgreSQL maximum locks per transaction.
	// PostgreSQL maximum locks per transaction.
	// +kubebuilder:validation:Optional
	MaxLocksPerTransaction *int64 `json:"maxLocksPerTransaction,omitempty" tf:"max_locks_per_transaction,omitempty"`

	// (Number) PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	// +kubebuilder:validation:Optional
	MaxLogicalReplicationWorkers *int64 `json:"maxLogicalReplicationWorkers,omitempty" tf:"max_logical_replication_workers,omitempty"`

	// (Number) Sets the maximum number of workers that the system can support for parallel queries.
	// Sets the maximum number of workers that the system can support for parallel queries.
	// +kubebuilder:validation:Optional
	MaxParallelWorkers *int64 `json:"maxParallelWorkers,omitempty" tf:"max_parallel_workers,omitempty"`

	// (Number) Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	// +kubebuilder:validation:Optional
	MaxParallelWorkersPerGather *int64 `json:"maxParallelWorkersPerGather,omitempty" tf:"max_parallel_workers_per_gather,omitempty"`

	// (Number) PostgreSQL maximum predicate locks per transaction.
	// PostgreSQL maximum predicate locks per transaction.
	// +kubebuilder:validation:Optional
	MaxPredLocksPerTransaction *int64 `json:"maxPredLocksPerTransaction,omitempty" tf:"max_pred_locks_per_transaction,omitempty"`

	// (Number) PostgreSQL maximum prepared transactions.
	// PostgreSQL maximum prepared transactions.
	// +kubebuilder:validation:Optional
	MaxPreparedTransactions *int64 `json:"maxPreparedTransactions,omitempty" tf:"max_prepared_transactions,omitempty"`

	// (Number) PostgreSQL maximum replication slots.
	// PostgreSQL maximum replication slots.
	// +kubebuilder:validation:Optional
	MaxReplicationSlots *int64 `json:"maxReplicationSlots,omitempty" tf:"max_replication_slots,omitempty"`

	// 1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
	// +kubebuilder:validation:Optional
	MaxSlotWalKeepSize *int64 `json:"maxSlotWalKeepSize,omitempty" tf:"max_slot_wal_keep_size,omitempty"`

	// (Number) Maximum depth of the stack in bytes.
	// Maximum depth of the stack in bytes.
	// +kubebuilder:validation:Optional
	MaxStackDepth *int64 `json:"maxStackDepth,omitempty" tf:"max_stack_depth,omitempty"`

	// (Number) Max standby archive delay in milliseconds.
	// Max standby archive delay in milliseconds.
	// +kubebuilder:validation:Optional
	MaxStandbyArchiveDelay *int64 `json:"maxStandbyArchiveDelay,omitempty" tf:"max_standby_archive_delay,omitempty"`

	// (Number) Max standby streaming delay in milliseconds.
	// Max standby streaming delay in milliseconds.
	// +kubebuilder:validation:Optional
	MaxStandbyStreamingDelay *int64 `json:"maxStandbyStreamingDelay,omitempty" tf:"max_standby_streaming_delay,omitempty"`

	// (Number) PostgreSQL maximum WAL senders.
	// PostgreSQL maximum WAL senders.
	// +kubebuilder:validation:Optional
	MaxWalSenders *int64 `json:"maxWalSenders,omitempty" tf:"max_wal_senders,omitempty"`

	// (Number) Sets the maximum number of background processes that the system can support.
	// Sets the maximum number of background processes that the system can support.
	// +kubebuilder:validation:Optional
	MaxWorkerProcesses *int64 `json:"maxWorkerProcesses,omitempty" tf:"max_worker_processes,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	// +kubebuilder:validation:Optional
	Migration []PropertiesMigrationParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Number) Sets the time interval to run pg_partman's scheduled tasks.
	// Sets the time interval to run pg_partman's scheduled tasks.
	// +kubebuilder:validation:Optional
	PgPartmanBgwInterval *int64 `json:"pgPartmanBgwInterval,omitempty" tf:"pg_partman_bgw_interval,omitempty"`

	// (String) Controls which role to use for pg_partman's scheduled background tasks.
	// Controls which role to use for pg_partman's scheduled background tasks.
	// +kubebuilder:validation:Optional
	PgPartmanBgwRole *string `json:"pgPartmanBgwRole,omitempty" tf:"pg_partman_bgw_role,omitempty"`

	// (Boolean) Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	// Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	// +kubebuilder:validation:Optional
	PgStatMonitorEnable *bool `json:"pgStatMonitorEnable,omitempty" tf:"pg_stat_monitor_enable,omitempty"`

	// (Boolean) Enables or disables query plan monitoring.
	// Enables or disables query plan monitoring.
	// +kubebuilder:validation:Optional
	PgStatMonitorPgsmEnableQueryPlan *bool `json:"pgStatMonitorPgsmEnableQueryPlan,omitempty" tf:"pg_stat_monitor_pgsm_enable_query_plan,omitempty"`

	// (Number) Sets the maximum number of buckets.
	// Sets the maximum number of buckets.
	// +kubebuilder:validation:Optional
	PgStatMonitorPgsmMaxBuckets *int64 `json:"pgStatMonitorPgsmMaxBuckets,omitempty" tf:"pg_stat_monitor_pgsm_max_buckets,omitempty"`

	// level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	// +kubebuilder:validation:Optional
	PgStatStatementsTrack *string `json:"pgStatStatementsTrack,omitempty" tf:"pg_stat_statements_track,omitempty"`

	// PGAudit settings. System-wide settings for the pgaudit extension.
	// +kubebuilder:validation:Optional
	Pgaudit []PgauditParameters `json:"pgaudit,omitempty" tf:"pgaudit,omitempty"`

	// wide settings for pgbouncer. (see below for nested schema)
	// PGBouncer connection pooling settings. System-wide settings for pgbouncer.
	// +kubebuilder:validation:Optional
	Pgbouncer []PgbouncerParameters `json:"pgbouncer,omitempty" tf:"pgbouncer,omitempty"`

	// wide settings for pglookout. (see below for nested schema)
	// PGLookout settings. System-wide settings for pglookout.
	// +kubebuilder:validation:Optional
	Pglookout []PglookoutParameters `json:"pglookout,omitempty" tf:"pglookout,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	// +kubebuilder:validation:Optional
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// +kubebuilder:validation:Optional
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`

	// 60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
	// +kubebuilder:validation:Optional
	SharedBuffersPercentage *float64 `json:"sharedBuffersPercentage,omitempty" tf:"shared_buffers_percentage,omitempty"`

	// (String) Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	// +kubebuilder:validation:Optional
	SynchronousReplication *string `json:"synchronousReplication,omitempty" tf:"synchronous_replication,omitempty"`

	// 1 for unlimited.
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	// +kubebuilder:validation:Optional
	TempFileLimit *int64 `json:"tempFileLimit,omitempty" tf:"temp_file_limit,omitempty"`

	// wide settings for the timescaledb extension. (see below for nested schema)
	// TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
	// +kubebuilder:validation:Optional
	Timescaledb []TimescaledbParameters `json:"timescaledb,omitempty" tf:"timescaledb,omitempty"`

	// (String) PostgreSQL service timezone.
	// PostgreSQL service timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// (Number) Specifies the number of bytes reserved to track the currently executing command for each active session.
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	// +kubebuilder:validation:Optional
	TrackActivityQuerySize *int64 `json:"trackActivityQuerySize,omitempty" tf:"track_activity_query_size,omitempty"`

	// (String) Record commit time of transactions.
	// Record commit time of transactions.
	// +kubebuilder:validation:Optional
	TrackCommitTimestamp *string `json:"trackCommitTimestamp,omitempty" tf:"track_commit_timestamp,omitempty"`

	// (String) Enables tracking of function call counts and time used.
	// Enables tracking of function call counts and time used.
	// +kubebuilder:validation:Optional
	TrackFunctions *string `json:"trackFunctions,omitempty" tf:"track_functions,omitempty"`

	// (String) Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	// +kubebuilder:validation:Optional
	TrackIoTiming *string `json:"trackIoTiming,omitempty" tf:"track_io_timing,omitempty"`

	// (String) Variant of the PostgreSQL service, may affect the features that are exposed by default.
	// Variant of the PostgreSQL service, may affect the features that are exposed by default.
	// +kubebuilder:validation:Optional
	Variant *string `json:"variant,omitempty" tf:"variant,omitempty"`

	// (String) PostgreSQL major version.
	// PostgreSQL major version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (Number) Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	// +kubebuilder:validation:Optional
	WalSenderTimeout *int64 `json:"walSenderTimeout,omitempty" tf:"wal_sender_timeout,omitempty"`

	// (Number) WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	// +kubebuilder:validation:Optional
	WalWriterDelay *int64 `json:"walWriterDelay,omitempty" tf:"wal_writer_delay,omitempty"`

	// (Number) Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	// +kubebuilder:validation:Optional
	WorkMem *int64 `json:"workMem,omitempty" tf:"work_mem,omitempty"`
}

type PgauditInitParameters struct {

	// Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
	FeatureEnabled *bool `json:"featureEnabled,omitempty" tf:"feature_enabled,omitempty"`

	// Specifies which classes of statements will be logged by session audit logging.
	Log []*string `json:"log,omitempty" tf:"log,omitempty"`

	// Specifies that session logging should be enabled in the casewhere all relations in a statement are in pg_catalog.
	LogCatalog *bool `json:"logCatalog,omitempty" tf:"log_catalog,omitempty"`

	// Specifies whether log messages will be visible to a client process such as psql.
	LogClient *bool `json:"logClient,omitempty" tf:"log_client,omitempty"`

	// Specifies the log level that will be used for log entries.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Crop parameters representation and whole statements if they exceed this threshold. A (default) value of -1 disable the truncation.
	LogMaxStringLength *int64 `json:"logMaxStringLength,omitempty" tf:"log_max_string_length,omitempty"`

	// This GUC allows to turn off logging nested statements, that is, statements that are executed as part of another ExecutorRun.
	LogNestedStatements *bool `json:"logNestedStatements,omitempty" tf:"log_nested_statements,omitempty"`

	// Specifies that audit logging should include the parameters that were passed with the statement.
	LogParameter *bool `json:"logParameter,omitempty" tf:"log_parameter,omitempty"`

	// Specifies that parameter values longer than this setting (in bytes) should not be logged, but replaced with <long param suppressed>.
	LogParameterMaxSize *int64 `json:"logParameterMaxSize,omitempty" tf:"log_parameter_max_size,omitempty"`

	// Specifies whether session audit logging should create a separate log entry for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
	LogRelation *bool `json:"logRelation,omitempty" tf:"log_relation,omitempty"`

	// Specifies that audit logging should include the rows retrieved or affected by a statement. When enabled the rows field will be included after the parameter field.
	LogRows *bool `json:"logRows,omitempty" tf:"log_rows,omitempty"`

	// Specifies whether logging will include the statement text and parameters (if enabled).
	LogStatement *bool `json:"logStatement,omitempty" tf:"log_statement,omitempty"`

	// Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry.
	LogStatementOnce *bool `json:"logStatementOnce,omitempty" tf:"log_statement_once,omitempty"`

	// (String)
	// Specifies the master role to use for object audit logging.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PgauditObservation struct {

	// Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
	FeatureEnabled *bool `json:"featureEnabled,omitempty" tf:"feature_enabled,omitempty"`

	// Specifies which classes of statements will be logged by session audit logging.
	Log []*string `json:"log,omitempty" tf:"log,omitempty"`

	// Specifies that session logging should be enabled in the casewhere all relations in a statement are in pg_catalog.
	LogCatalog *bool `json:"logCatalog,omitempty" tf:"log_catalog,omitempty"`

	// Specifies whether log messages will be visible to a client process such as psql.
	LogClient *bool `json:"logClient,omitempty" tf:"log_client,omitempty"`

	// Specifies the log level that will be used for log entries.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Crop parameters representation and whole statements if they exceed this threshold. A (default) value of -1 disable the truncation.
	LogMaxStringLength *int64 `json:"logMaxStringLength,omitempty" tf:"log_max_string_length,omitempty"`

	// This GUC allows to turn off logging nested statements, that is, statements that are executed as part of another ExecutorRun.
	LogNestedStatements *bool `json:"logNestedStatements,omitempty" tf:"log_nested_statements,omitempty"`

	// Specifies that audit logging should include the parameters that were passed with the statement.
	LogParameter *bool `json:"logParameter,omitempty" tf:"log_parameter,omitempty"`

	// Specifies that parameter values longer than this setting (in bytes) should not be logged, but replaced with <long param suppressed>.
	LogParameterMaxSize *int64 `json:"logParameterMaxSize,omitempty" tf:"log_parameter_max_size,omitempty"`

	// Specifies whether session audit logging should create a separate log entry for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
	LogRelation *bool `json:"logRelation,omitempty" tf:"log_relation,omitempty"`

	// Specifies that audit logging should include the rows retrieved or affected by a statement. When enabled the rows field will be included after the parameter field.
	LogRows *bool `json:"logRows,omitempty" tf:"log_rows,omitempty"`

	// Specifies whether logging will include the statement text and parameters (if enabled).
	LogStatement *bool `json:"logStatement,omitempty" tf:"log_statement,omitempty"`

	// Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry.
	LogStatementOnce *bool `json:"logStatementOnce,omitempty" tf:"log_statement_once,omitempty"`

	// (String)
	// Specifies the master role to use for object audit logging.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PgauditParameters struct {

	// Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
	// +kubebuilder:validation:Optional
	FeatureEnabled *bool `json:"featureEnabled,omitempty" tf:"feature_enabled,omitempty"`

	// Specifies which classes of statements will be logged by session audit logging.
	// +kubebuilder:validation:Optional
	Log []*string `json:"log,omitempty" tf:"log,omitempty"`

	// Specifies that session logging should be enabled in the casewhere all relations in a statement are in pg_catalog.
	// +kubebuilder:validation:Optional
	LogCatalog *bool `json:"logCatalog,omitempty" tf:"log_catalog,omitempty"`

	// Specifies whether log messages will be visible to a client process such as psql.
	// +kubebuilder:validation:Optional
	LogClient *bool `json:"logClient,omitempty" tf:"log_client,omitempty"`

	// Specifies the log level that will be used for log entries.
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Crop parameters representation and whole statements if they exceed this threshold. A (default) value of -1 disable the truncation.
	// +kubebuilder:validation:Optional
	LogMaxStringLength *int64 `json:"logMaxStringLength,omitempty" tf:"log_max_string_length,omitempty"`

	// This GUC allows to turn off logging nested statements, that is, statements that are executed as part of another ExecutorRun.
	// +kubebuilder:validation:Optional
	LogNestedStatements *bool `json:"logNestedStatements,omitempty" tf:"log_nested_statements,omitempty"`

	// Specifies that audit logging should include the parameters that were passed with the statement.
	// +kubebuilder:validation:Optional
	LogParameter *bool `json:"logParameter,omitempty" tf:"log_parameter,omitempty"`

	// Specifies that parameter values longer than this setting (in bytes) should not be logged, but replaced with <long param suppressed>.
	// +kubebuilder:validation:Optional
	LogParameterMaxSize *int64 `json:"logParameterMaxSize,omitempty" tf:"log_parameter_max_size,omitempty"`

	// Specifies whether session audit logging should create a separate log entry for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
	// +kubebuilder:validation:Optional
	LogRelation *bool `json:"logRelation,omitempty" tf:"log_relation,omitempty"`

	// Specifies that audit logging should include the rows retrieved or affected by a statement. When enabled the rows field will be included after the parameter field.
	// +kubebuilder:validation:Optional
	LogRows *bool `json:"logRows,omitempty" tf:"log_rows,omitempty"`

	// Specifies whether logging will include the statement text and parameters (if enabled).
	// +kubebuilder:validation:Optional
	LogStatement *bool `json:"logStatement,omitempty" tf:"log_statement,omitempty"`

	// Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry.
	// +kubebuilder:validation:Optional
	LogStatementOnce *bool `json:"logStatementOnce,omitempty" tf:"log_statement_once,omitempty"`

	// (String)
	// Specifies the master role to use for object audit logging.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PgbouncerInitParameters struct {

	// (Number) If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
	// If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
	AutodbIdleTimeout *int64 `json:"autodbIdleTimeout,omitempty" tf:"autodb_idle_timeout,omitempty"`

	// (Number) Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
	// Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
	AutodbMaxDBConnections *int64 `json:"autodbMaxDbConnections,omitempty" tf:"autodb_max_db_connections,omitempty"`

	// (String) PGBouncer pool mode.
	// PGBouncer pool mode.
	AutodbPoolMode *string `json:"autodbPoolMode,omitempty" tf:"autodb_pool_mode,omitempty"`

	// zero then create automatically a pool of that size per user when a pool doesn't exist.
	// If non-zero then create automatically a pool of that size per user when a pool doesn't exist.
	AutodbPoolSize *int64 `json:"autodbPoolSize,omitempty" tf:"autodb_pool_size,omitempty"`

	// (List of String) List of parameters to ignore when given in startup packet.
	// List of parameters to ignore when given in startup packet.
	IgnoreStartupParameters []*string `json:"ignoreStartupParameters,omitempty" tf:"ignore_startup_parameters,omitempty"`

	// (Number) Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	// Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	MinPoolSize *int64 `json:"minPoolSize,omitempty" tf:"min_pool_size,omitempty"`

	// (Number) If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
	// If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
	ServerIdleTimeout *int64 `json:"serverIdleTimeout,omitempty" tf:"server_idle_timeout,omitempty"`

	// (Number) The pooler will close an unused server connection that has been connected longer than this. [seconds].
	// The pooler will close an unused server connection that has been connected longer than this. [seconds].
	ServerLifetime *int64 `json:"serverLifetime,omitempty" tf:"server_lifetime,omitempty"`

	// (Boolean) Run server_reset_query (DISCARD ALL) in all pooling modes.
	// Run server_reset_query (DISCARD ALL) in all pooling modes.
	ServerResetQueryAlways *bool `json:"serverResetQueryAlways,omitempty" tf:"server_reset_query_always,omitempty"`
}

type PgbouncerObservation struct {

	// (Number) If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
	// If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
	AutodbIdleTimeout *int64 `json:"autodbIdleTimeout,omitempty" tf:"autodb_idle_timeout,omitempty"`

	// (Number) Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
	// Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
	AutodbMaxDBConnections *int64 `json:"autodbMaxDbConnections,omitempty" tf:"autodb_max_db_connections,omitempty"`

	// (String) PGBouncer pool mode.
	// PGBouncer pool mode.
	AutodbPoolMode *string `json:"autodbPoolMode,omitempty" tf:"autodb_pool_mode,omitempty"`

	// zero then create automatically a pool of that size per user when a pool doesn't exist.
	// If non-zero then create automatically a pool of that size per user when a pool doesn't exist.
	AutodbPoolSize *int64 `json:"autodbPoolSize,omitempty" tf:"autodb_pool_size,omitempty"`

	// (List of String) List of parameters to ignore when given in startup packet.
	// List of parameters to ignore when given in startup packet.
	IgnoreStartupParameters []*string `json:"ignoreStartupParameters,omitempty" tf:"ignore_startup_parameters,omitempty"`

	// (Number) Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	// Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	MinPoolSize *int64 `json:"minPoolSize,omitempty" tf:"min_pool_size,omitempty"`

	// (Number) If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
	// If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
	ServerIdleTimeout *int64 `json:"serverIdleTimeout,omitempty" tf:"server_idle_timeout,omitempty"`

	// (Number) The pooler will close an unused server connection that has been connected longer than this. [seconds].
	// The pooler will close an unused server connection that has been connected longer than this. [seconds].
	ServerLifetime *int64 `json:"serverLifetime,omitempty" tf:"server_lifetime,omitempty"`

	// (Boolean) Run server_reset_query (DISCARD ALL) in all pooling modes.
	// Run server_reset_query (DISCARD ALL) in all pooling modes.
	ServerResetQueryAlways *bool `json:"serverResetQueryAlways,omitempty" tf:"server_reset_query_always,omitempty"`
}

type PgbouncerParameters struct {

	// (Number) If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
	// If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
	// +kubebuilder:validation:Optional
	AutodbIdleTimeout *int64 `json:"autodbIdleTimeout,omitempty" tf:"autodb_idle_timeout,omitempty"`

	// (Number) Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
	// Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
	// +kubebuilder:validation:Optional
	AutodbMaxDBConnections *int64 `json:"autodbMaxDbConnections,omitempty" tf:"autodb_max_db_connections,omitempty"`

	// (String) PGBouncer pool mode.
	// PGBouncer pool mode.
	// +kubebuilder:validation:Optional
	AutodbPoolMode *string `json:"autodbPoolMode,omitempty" tf:"autodb_pool_mode,omitempty"`

	// zero then create automatically a pool of that size per user when a pool doesn't exist.
	// If non-zero then create automatically a pool of that size per user when a pool doesn't exist.
	// +kubebuilder:validation:Optional
	AutodbPoolSize *int64 `json:"autodbPoolSize,omitempty" tf:"autodb_pool_size,omitempty"`

	// (List of String) List of parameters to ignore when given in startup packet.
	// List of parameters to ignore when given in startup packet.
	// +kubebuilder:validation:Optional
	IgnoreStartupParameters []*string `json:"ignoreStartupParameters,omitempty" tf:"ignore_startup_parameters,omitempty"`

	// (Number) Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	// Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	// +kubebuilder:validation:Optional
	MinPoolSize *int64 `json:"minPoolSize,omitempty" tf:"min_pool_size,omitempty"`

	// (Number) If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
	// If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
	// +kubebuilder:validation:Optional
	ServerIdleTimeout *int64 `json:"serverIdleTimeout,omitempty" tf:"server_idle_timeout,omitempty"`

	// (Number) The pooler will close an unused server connection that has been connected longer than this. [seconds].
	// The pooler will close an unused server connection that has been connected longer than this. [seconds].
	// +kubebuilder:validation:Optional
	ServerLifetime *int64 `json:"serverLifetime,omitempty" tf:"server_lifetime,omitempty"`

	// (Boolean) Run server_reset_query (DISCARD ALL) in all pooling modes.
	// Run server_reset_query (DISCARD ALL) in all pooling modes.
	// +kubebuilder:validation:Optional
	ServerResetQueryAlways *bool `json:"serverResetQueryAlways,omitempty" tf:"server_reset_query_always,omitempty"`
}

type PglookoutInitParameters struct {

	// (Number) Number of seconds of master unavailability before triggering database failover to standby.
	// Number of seconds of master unavailability before triggering database failover to standby.
	MaxFailoverReplicationTimeLag *int64 `json:"maxFailoverReplicationTimeLag,omitempty" tf:"max_failover_replication_time_lag,omitempty"`
}

type PglookoutObservation struct {

	// (Number) Number of seconds of master unavailability before triggering database failover to standby.
	// Number of seconds of master unavailability before triggering database failover to standby.
	MaxFailoverReplicationTimeLag *int64 `json:"maxFailoverReplicationTimeLag,omitempty" tf:"max_failover_replication_time_lag,omitempty"`
}

type PglookoutParameters struct {

	// (Number) Number of seconds of master unavailability before triggering database failover to standby.
	// Number of seconds of master unavailability before triggering database failover to standby.
	// +kubebuilder:validation:Optional
	MaxFailoverReplicationTimeLag *int64 `json:"maxFailoverReplicationTimeLag,omitempty" tf:"max_failover_replication_time_lag,omitempty"`
}

type PropertiesMigrationInitParameters struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String, Sensitive) Password for authentication with the server where to migrate data from.
	// Password for authentication with the server where to migrate data from.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PropertiesMigrationObservation struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PropertiesMigrationParameters struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	// +kubebuilder:validation:Optional
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// +kubebuilder:validation:Optional
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String, Sensitive) Password for authentication with the server where to migrate data from.
	// Password for authentication with the server where to migrate data from.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	// +kubebuilder:validation:Optional
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type TimescaledbInitParameters struct {

	// (Number) The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	// The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	MaxBackgroundWorkers *int64 `json:"maxBackgroundWorkers,omitempty" tf:"max_background_workers,omitempty"`
}

type TimescaledbObservation struct {

	// (Number) The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	// The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	MaxBackgroundWorkers *int64 `json:"maxBackgroundWorkers,omitempty" tf:"max_background_workers,omitempty"`
}

type TimescaledbParameters struct {

	// (Number) The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	// The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	// +kubebuilder:validation:Optional
	MaxBackgroundWorkers *int64 `json:"maxBackgroundWorkers,omitempty" tf:"max_background_workers,omitempty"`
}

// ManagedDatabasePostgresqlSpec defines the desired state of ManagedDatabasePostgresql
type ManagedDatabasePostgresqlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedDatabasePostgresqlParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedDatabasePostgresqlInitParameters `json:"initProvider,omitempty"`
}

// ManagedDatabasePostgresqlStatus defines the observed state of ManagedDatabasePostgresql.
type ManagedDatabasePostgresqlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedDatabasePostgresqlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedDatabasePostgresql is the Schema for the ManagedDatabasePostgresqls API. This resource represents PostgreSQL managed database. See UpCloud Managed Databases https://upcloud.com/products/managed-databases product page for more details about the service.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type ManagedDatabasePostgresql struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plan) || (has(self.initProvider) && has(self.initProvider.plan))",message="spec.forProvider.plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ManagedDatabasePostgresqlSpec   `json:"spec"`
	Status ManagedDatabasePostgresqlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDatabasePostgresqlList contains a list of ManagedDatabasePostgresqls
type ManagedDatabasePostgresqlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedDatabasePostgresql `json:"items"`
}

// Repository type metadata.
var (
	ManagedDatabasePostgresql_Kind             = "ManagedDatabasePostgresql"
	ManagedDatabasePostgresql_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedDatabasePostgresql_Kind}.String()
	ManagedDatabasePostgresql_KindAPIVersion   = ManagedDatabasePostgresql_Kind + "." + CRDGroupVersion.String()
	ManagedDatabasePostgresql_GroupVersionKind = CRDGroupVersion.WithKind(ManagedDatabasePostgresql_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedDatabasePostgresql{}, &ManagedDatabasePostgresqlList{})
}
