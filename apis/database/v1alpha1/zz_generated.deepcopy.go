//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthFailureListenersInitParameters) DeepCopyInto(out *AuthFailureListenersInitParameters) {
	*out = *in
	if in.IPRateLimiting != nil {
		in, out := &in.IPRateLimiting, &out.IPRateLimiting
		*out = make([]IPRateLimitingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InternalAuthenticationBackendLimiting != nil {
		in, out := &in.InternalAuthenticationBackendLimiting, &out.InternalAuthenticationBackendLimiting
		*out = make([]InternalAuthenticationBackendLimitingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthFailureListenersInitParameters.
func (in *AuthFailureListenersInitParameters) DeepCopy() *AuthFailureListenersInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthFailureListenersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthFailureListenersObservation) DeepCopyInto(out *AuthFailureListenersObservation) {
	*out = *in
	if in.IPRateLimiting != nil {
		in, out := &in.IPRateLimiting, &out.IPRateLimiting
		*out = make([]IPRateLimitingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InternalAuthenticationBackendLimiting != nil {
		in, out := &in.InternalAuthenticationBackendLimiting, &out.InternalAuthenticationBackendLimiting
		*out = make([]InternalAuthenticationBackendLimitingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthFailureListenersObservation.
func (in *AuthFailureListenersObservation) DeepCopy() *AuthFailureListenersObservation {
	if in == nil {
		return nil
	}
	out := new(AuthFailureListenersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthFailureListenersParameters) DeepCopyInto(out *AuthFailureListenersParameters) {
	*out = *in
	if in.IPRateLimiting != nil {
		in, out := &in.IPRateLimiting, &out.IPRateLimiting
		*out = make([]IPRateLimitingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InternalAuthenticationBackendLimiting != nil {
		in, out := &in.InternalAuthenticationBackendLimiting, &out.InternalAuthenticationBackendLimiting
		*out = make([]InternalAuthenticationBackendLimitingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthFailureListenersParameters.
func (in *AuthFailureListenersParameters) DeepCopy() *AuthFailureListenersParameters {
	if in == nil {
		return nil
	}
	out := new(AuthFailureListenersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureMigrationInitParameters) DeepCopyInto(out *AzureMigrationInitParameters) {
	*out = *in
	if in.Account != nil {
		in, out := &in.Account, &out.Account
		*out = new(string)
		**out = **in
	}
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(string)
		**out = **in
	}
	if in.EndpointSuffix != nil {
		in, out := &in.EndpointSuffix, &out.EndpointSuffix
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.SasToken != nil {
		in, out := &in.SasToken, &out.SasToken
		*out = new(string)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureMigrationInitParameters.
func (in *AzureMigrationInitParameters) DeepCopy() *AzureMigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(AzureMigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureMigrationObservation) DeepCopyInto(out *AzureMigrationObservation) {
	*out = *in
	if in.Account != nil {
		in, out := &in.Account, &out.Account
		*out = new(string)
		**out = **in
	}
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(string)
		**out = **in
	}
	if in.EndpointSuffix != nil {
		in, out := &in.EndpointSuffix, &out.EndpointSuffix
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.SasToken != nil {
		in, out := &in.SasToken, &out.SasToken
		*out = new(string)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureMigrationObservation.
func (in *AzureMigrationObservation) DeepCopy() *AzureMigrationObservation {
	if in == nil {
		return nil
	}
	out := new(AzureMigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureMigrationParameters) DeepCopyInto(out *AzureMigrationParameters) {
	*out = *in
	if in.Account != nil {
		in, out := &in.Account, &out.Account
		*out = new(string)
		**out = **in
	}
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(string)
		**out = **in
	}
	if in.EndpointSuffix != nil {
		in, out := &in.EndpointSuffix, &out.EndpointSuffix
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.SasToken != nil {
		in, out := &in.SasToken, &out.SasToken
		*out = new(string)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureMigrationParameters.
func (in *AzureMigrationParameters) DeepCopy() *AzureMigrationParameters {
	if in == nil {
		return nil
	}
	out := new(AzureMigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentsInitParameters) DeepCopyInto(out *ComponentsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentsInitParameters.
func (in *ComponentsInitParameters) DeepCopy() *ComponentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentsObservation) DeepCopyInto(out *ComponentsObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentsObservation.
func (in *ComponentsObservation) DeepCopy() *ComponentsObservation {
	if in == nil {
		return nil
	}
	out := new(ComponentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentsParameters) DeepCopyInto(out *ComponentsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentsParameters.
func (in *ComponentsParameters) DeepCopy() *ComponentsParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GcsMigrationInitParameters) DeepCopyInto(out *GcsMigrationInitParameters) {
	*out = *in
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = new(string)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GcsMigrationInitParameters.
func (in *GcsMigrationInitParameters) DeepCopy() *GcsMigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GcsMigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GcsMigrationObservation) DeepCopyInto(out *GcsMigrationObservation) {
	*out = *in
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = new(string)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GcsMigrationObservation.
func (in *GcsMigrationObservation) DeepCopy() *GcsMigrationObservation {
	if in == nil {
		return nil
	}
	out := new(GcsMigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GcsMigrationParameters) DeepCopyInto(out *GcsMigrationParameters) {
	*out = *in
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Credentials != nil {
		in, out := &in.Credentials, &out.Credentials
		*out = new(string)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GcsMigrationParameters.
func (in *GcsMigrationParameters) DeepCopy() *GcsMigrationParameters {
	if in == nil {
		return nil
	}
	out := new(GcsMigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPRateLimitingInitParameters) DeepCopyInto(out *IPRateLimitingInitParameters) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int64)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int64)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int64)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPRateLimitingInitParameters.
func (in *IPRateLimitingInitParameters) DeepCopy() *IPRateLimitingInitParameters {
	if in == nil {
		return nil
	}
	out := new(IPRateLimitingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPRateLimitingObservation) DeepCopyInto(out *IPRateLimitingObservation) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int64)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int64)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int64)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPRateLimitingObservation.
func (in *IPRateLimitingObservation) DeepCopy() *IPRateLimitingObservation {
	if in == nil {
		return nil
	}
	out := new(IPRateLimitingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPRateLimitingParameters) DeepCopyInto(out *IPRateLimitingParameters) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int64)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int64)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int64)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPRateLimitingParameters.
func (in *IPRateLimitingParameters) DeepCopy() *IPRateLimitingParameters {
	if in == nil {
		return nil
	}
	out := new(IPRateLimitingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexRollupInitParameters) DeepCopyInto(out *IndexRollupInitParameters) {
	*out = *in
	if in.RollupDashboardsEnabled != nil {
		in, out := &in.RollupDashboardsEnabled, &out.RollupDashboardsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupEnabled != nil {
		in, out := &in.RollupEnabled, &out.RollupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupSearchBackoffCount != nil {
		in, out := &in.RollupSearchBackoffCount, &out.RollupSearchBackoffCount
		*out = new(int64)
		**out = **in
	}
	if in.RollupSearchBackoffMillis != nil {
		in, out := &in.RollupSearchBackoffMillis, &out.RollupSearchBackoffMillis
		*out = new(int64)
		**out = **in
	}
	if in.RollupSearchSearchAllJobs != nil {
		in, out := &in.RollupSearchSearchAllJobs, &out.RollupSearchSearchAllJobs
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexRollupInitParameters.
func (in *IndexRollupInitParameters) DeepCopy() *IndexRollupInitParameters {
	if in == nil {
		return nil
	}
	out := new(IndexRollupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexRollupObservation) DeepCopyInto(out *IndexRollupObservation) {
	*out = *in
	if in.RollupDashboardsEnabled != nil {
		in, out := &in.RollupDashboardsEnabled, &out.RollupDashboardsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupEnabled != nil {
		in, out := &in.RollupEnabled, &out.RollupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupSearchBackoffCount != nil {
		in, out := &in.RollupSearchBackoffCount, &out.RollupSearchBackoffCount
		*out = new(int64)
		**out = **in
	}
	if in.RollupSearchBackoffMillis != nil {
		in, out := &in.RollupSearchBackoffMillis, &out.RollupSearchBackoffMillis
		*out = new(int64)
		**out = **in
	}
	if in.RollupSearchSearchAllJobs != nil {
		in, out := &in.RollupSearchSearchAllJobs, &out.RollupSearchSearchAllJobs
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexRollupObservation.
func (in *IndexRollupObservation) DeepCopy() *IndexRollupObservation {
	if in == nil {
		return nil
	}
	out := new(IndexRollupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexRollupParameters) DeepCopyInto(out *IndexRollupParameters) {
	*out = *in
	if in.RollupDashboardsEnabled != nil {
		in, out := &in.RollupDashboardsEnabled, &out.RollupDashboardsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupEnabled != nil {
		in, out := &in.RollupEnabled, &out.RollupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RollupSearchBackoffCount != nil {
		in, out := &in.RollupSearchBackoffCount, &out.RollupSearchBackoffCount
		*out = new(int64)
		**out = **in
	}
	if in.RollupSearchBackoffMillis != nil {
		in, out := &in.RollupSearchBackoffMillis, &out.RollupSearchBackoffMillis
		*out = new(int64)
		**out = **in
	}
	if in.RollupSearchSearchAllJobs != nil {
		in, out := &in.RollupSearchSearchAllJobs, &out.RollupSearchSearchAllJobs
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexRollupParameters.
func (in *IndexRollupParameters) DeepCopy() *IndexRollupParameters {
	if in == nil {
		return nil
	}
	out := new(IndexRollupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexTemplateInitParameters) DeepCopyInto(out *IndexTemplateInitParameters) {
	*out = *in
	if in.MappingNestedObjectsLimit != nil {
		in, out := &in.MappingNestedObjectsLimit, &out.MappingNestedObjectsLimit
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexTemplateInitParameters.
func (in *IndexTemplateInitParameters) DeepCopy() *IndexTemplateInitParameters {
	if in == nil {
		return nil
	}
	out := new(IndexTemplateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexTemplateObservation) DeepCopyInto(out *IndexTemplateObservation) {
	*out = *in
	if in.MappingNestedObjectsLimit != nil {
		in, out := &in.MappingNestedObjectsLimit, &out.MappingNestedObjectsLimit
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexTemplateObservation.
func (in *IndexTemplateObservation) DeepCopy() *IndexTemplateObservation {
	if in == nil {
		return nil
	}
	out := new(IndexTemplateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexTemplateParameters) DeepCopyInto(out *IndexTemplateParameters) {
	*out = *in
	if in.MappingNestedObjectsLimit != nil {
		in, out := &in.MappingNestedObjectsLimit, &out.MappingNestedObjectsLimit
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfReplicas != nil {
		in, out := &in.NumberOfReplicas, &out.NumberOfReplicas
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfShards != nil {
		in, out := &in.NumberOfShards, &out.NumberOfShards
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexTemplateParameters.
func (in *IndexTemplateParameters) DeepCopy() *IndexTemplateParameters {
	if in == nil {
		return nil
	}
	out := new(IndexTemplateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalAuthenticationBackendLimitingInitParameters) DeepCopyInto(out *InternalAuthenticationBackendLimitingInitParameters) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int64)
		**out = **in
	}
	if in.AuthenticationBackend != nil {
		in, out := &in.AuthenticationBackend, &out.AuthenticationBackend
		*out = new(string)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int64)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int64)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalAuthenticationBackendLimitingInitParameters.
func (in *InternalAuthenticationBackendLimitingInitParameters) DeepCopy() *InternalAuthenticationBackendLimitingInitParameters {
	if in == nil {
		return nil
	}
	out := new(InternalAuthenticationBackendLimitingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalAuthenticationBackendLimitingObservation) DeepCopyInto(out *InternalAuthenticationBackendLimitingObservation) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int64)
		**out = **in
	}
	if in.AuthenticationBackend != nil {
		in, out := &in.AuthenticationBackend, &out.AuthenticationBackend
		*out = new(string)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int64)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int64)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalAuthenticationBackendLimitingObservation.
func (in *InternalAuthenticationBackendLimitingObservation) DeepCopy() *InternalAuthenticationBackendLimitingObservation {
	if in == nil {
		return nil
	}
	out := new(InternalAuthenticationBackendLimitingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalAuthenticationBackendLimitingParameters) DeepCopyInto(out *InternalAuthenticationBackendLimitingParameters) {
	*out = *in
	if in.AllowedTries != nil {
		in, out := &in.AllowedTries, &out.AllowedTries
		*out = new(int64)
		**out = **in
	}
	if in.AuthenticationBackend != nil {
		in, out := &in.AuthenticationBackend, &out.AuthenticationBackend
		*out = new(string)
		**out = **in
	}
	if in.BlockExpirySeconds != nil {
		in, out := &in.BlockExpirySeconds, &out.BlockExpirySeconds
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockedClients != nil {
		in, out := &in.MaxBlockedClients, &out.MaxBlockedClients
		*out = new(int64)
		**out = **in
	}
	if in.MaxTrackedClients != nil {
		in, out := &in.MaxTrackedClients, &out.MaxTrackedClients
		*out = new(int64)
		**out = **in
	}
	if in.TimeWindowSeconds != nil {
		in, out := &in.TimeWindowSeconds, &out.TimeWindowSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalAuthenticationBackendLimitingParameters.
func (in *InternalAuthenticationBackendLimitingParameters) DeepCopy() *InternalAuthenticationBackendLimitingParameters {
	if in == nil {
		return nil
	}
	out := new(InternalAuthenticationBackendLimitingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabase) DeepCopyInto(out *ManagedDatabaseLogicalDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabase.
func (in *ManagedDatabaseLogicalDatabase) DeepCopy() *ManagedDatabaseLogicalDatabase {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseLogicalDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabaseInitParameters) DeepCopyInto(out *ManagedDatabaseLogicalDatabaseInitParameters) {
	*out = *in
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabaseInitParameters.
func (in *ManagedDatabaseLogicalDatabaseInitParameters) DeepCopy() *ManagedDatabaseLogicalDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabaseList) DeepCopyInto(out *ManagedDatabaseLogicalDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedDatabaseLogicalDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabaseList.
func (in *ManagedDatabaseLogicalDatabaseList) DeepCopy() *ManagedDatabaseLogicalDatabaseList {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseLogicalDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabaseObservation) DeepCopyInto(out *ManagedDatabaseLogicalDatabaseObservation) {
	*out = *in
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabaseObservation.
func (in *ManagedDatabaseLogicalDatabaseObservation) DeepCopy() *ManagedDatabaseLogicalDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabaseParameters) DeepCopyInto(out *ManagedDatabaseLogicalDatabaseParameters) {
	*out = *in
	if in.CharacterSet != nil {
		in, out := &in.CharacterSet, &out.CharacterSet
		*out = new(string)
		**out = **in
	}
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
	if in.ServiceRef != nil {
		in, out := &in.ServiceRef, &out.ServiceRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceSelector != nil {
		in, out := &in.ServiceSelector, &out.ServiceSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabaseParameters.
func (in *ManagedDatabaseLogicalDatabaseParameters) DeepCopy() *ManagedDatabaseLogicalDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabaseSpec) DeepCopyInto(out *ManagedDatabaseLogicalDatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabaseSpec.
func (in *ManagedDatabaseLogicalDatabaseSpec) DeepCopy() *ManagedDatabaseLogicalDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseLogicalDatabaseStatus) DeepCopyInto(out *ManagedDatabaseLogicalDatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseLogicalDatabaseStatus.
func (in *ManagedDatabaseLogicalDatabaseStatus) DeepCopy() *ManagedDatabaseLogicalDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseLogicalDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysql) DeepCopyInto(out *ManagedDatabaseMysql) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysql.
func (in *ManagedDatabaseMysql) DeepCopy() *ManagedDatabaseMysql {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysql)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseMysql) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysqlInitParameters) DeepCopyInto(out *ManagedDatabaseMysqlInitParameters) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]NetworkInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]NodeStatesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]PropertiesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysqlInitParameters.
func (in *ManagedDatabaseMysqlInitParameters) DeepCopy() *ManagedDatabaseMysqlInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysqlInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysqlList) DeepCopyInto(out *ManagedDatabaseMysqlList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedDatabaseMysql, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysqlList.
func (in *ManagedDatabaseMysqlList) DeepCopy() *ManagedDatabaseMysqlList {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysqlList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseMysqlList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysqlObservation) DeepCopyInto(out *ManagedDatabaseMysqlObservation) {
	*out = *in
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]ComponentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]NetworkObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]NodeStatesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.PrimaryDatabase != nil {
		in, out := &in.PrimaryDatabase, &out.PrimaryDatabase
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]PropertiesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysqlObservation.
func (in *ManagedDatabaseMysqlObservation) DeepCopy() *ManagedDatabaseMysqlObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysqlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysqlParameters) DeepCopyInto(out *ManagedDatabaseMysqlParameters) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]NetworkParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]NodeStatesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]PropertiesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysqlParameters.
func (in *ManagedDatabaseMysqlParameters) DeepCopy() *ManagedDatabaseMysqlParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysqlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysqlSpec) DeepCopyInto(out *ManagedDatabaseMysqlSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysqlSpec.
func (in *ManagedDatabaseMysqlSpec) DeepCopy() *ManagedDatabaseMysqlSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysqlSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseMysqlStatus) DeepCopyInto(out *ManagedDatabaseMysqlStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseMysqlStatus.
func (in *ManagedDatabaseMysqlStatus) DeepCopy() *ManagedDatabaseMysqlStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseMysqlStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearch) DeepCopyInto(out *ManagedDatabaseOpensearch) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearch.
func (in *ManagedDatabaseOpensearch) DeepCopy() *ManagedDatabaseOpensearch {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseOpensearch) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchComponentsInitParameters) DeepCopyInto(out *ManagedDatabaseOpensearchComponentsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchComponentsInitParameters.
func (in *ManagedDatabaseOpensearchComponentsInitParameters) DeepCopy() *ManagedDatabaseOpensearchComponentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchComponentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchComponentsObservation) DeepCopyInto(out *ManagedDatabaseOpensearchComponentsObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchComponentsObservation.
func (in *ManagedDatabaseOpensearchComponentsObservation) DeepCopy() *ManagedDatabaseOpensearchComponentsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchComponentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchComponentsParameters) DeepCopyInto(out *ManagedDatabaseOpensearchComponentsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchComponentsParameters.
func (in *ManagedDatabaseOpensearchComponentsParameters) DeepCopy() *ManagedDatabaseOpensearchComponentsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchComponentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchInitParameters) DeepCopyInto(out *ManagedDatabaseOpensearchInitParameters) {
	*out = *in
	if in.AccessControl != nil {
		in, out := &in.AccessControl, &out.AccessControl
		*out = new(bool)
		**out = **in
	}
	if in.ExtendedAccessControl != nil {
		in, out := &in.ExtendedAccessControl, &out.ExtendedAccessControl
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabaseOpensearchNetworkInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabaseOpensearchNodeStatesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabaseOpensearchPropertiesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchInitParameters.
func (in *ManagedDatabaseOpensearchInitParameters) DeepCopy() *ManagedDatabaseOpensearchInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchList) DeepCopyInto(out *ManagedDatabaseOpensearchList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedDatabaseOpensearch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchList.
func (in *ManagedDatabaseOpensearchList) DeepCopy() *ManagedDatabaseOpensearchList {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseOpensearchList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchNetworkInitParameters) DeepCopyInto(out *ManagedDatabaseOpensearchNetworkInitParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchNetworkInitParameters.
func (in *ManagedDatabaseOpensearchNetworkInitParameters) DeepCopy() *ManagedDatabaseOpensearchNetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchNetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchNetworkObservation) DeepCopyInto(out *ManagedDatabaseOpensearchNetworkObservation) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchNetworkObservation.
func (in *ManagedDatabaseOpensearchNetworkObservation) DeepCopy() *ManagedDatabaseOpensearchNetworkObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchNetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchNetworkParameters) DeepCopyInto(out *ManagedDatabaseOpensearchNetworkParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchNetworkParameters.
func (in *ManagedDatabaseOpensearchNetworkParameters) DeepCopy() *ManagedDatabaseOpensearchNetworkParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchNetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchNodeStatesInitParameters) DeepCopyInto(out *ManagedDatabaseOpensearchNodeStatesInitParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchNodeStatesInitParameters.
func (in *ManagedDatabaseOpensearchNodeStatesInitParameters) DeepCopy() *ManagedDatabaseOpensearchNodeStatesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchNodeStatesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchNodeStatesObservation) DeepCopyInto(out *ManagedDatabaseOpensearchNodeStatesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchNodeStatesObservation.
func (in *ManagedDatabaseOpensearchNodeStatesObservation) DeepCopy() *ManagedDatabaseOpensearchNodeStatesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchNodeStatesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchNodeStatesParameters) DeepCopyInto(out *ManagedDatabaseOpensearchNodeStatesParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchNodeStatesParameters.
func (in *ManagedDatabaseOpensearchNodeStatesParameters) DeepCopy() *ManagedDatabaseOpensearchNodeStatesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchNodeStatesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchObservation) DeepCopyInto(out *ManagedDatabaseOpensearchObservation) {
	*out = *in
	if in.AccessControl != nil {
		in, out := &in.AccessControl, &out.AccessControl
		*out = new(bool)
		**out = **in
	}
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]ManagedDatabaseOpensearchComponentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtendedAccessControl != nil {
		in, out := &in.ExtendedAccessControl, &out.ExtendedAccessControl
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabaseOpensearchNetworkObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabaseOpensearchNodeStatesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.PrimaryDatabase != nil {
		in, out := &in.PrimaryDatabase, &out.PrimaryDatabase
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabaseOpensearchPropertiesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchObservation.
func (in *ManagedDatabaseOpensearchObservation) DeepCopy() *ManagedDatabaseOpensearchObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchParameters) DeepCopyInto(out *ManagedDatabaseOpensearchParameters) {
	*out = *in
	if in.AccessControl != nil {
		in, out := &in.AccessControl, &out.AccessControl
		*out = new(bool)
		**out = **in
	}
	if in.ExtendedAccessControl != nil {
		in, out := &in.ExtendedAccessControl, &out.ExtendedAccessControl
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabaseOpensearchNetworkParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabaseOpensearchNodeStatesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabaseOpensearchPropertiesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchParameters.
func (in *ManagedDatabaseOpensearchParameters) DeepCopy() *ManagedDatabaseOpensearchParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchPropertiesInitParameters) DeepCopyInto(out *ManagedDatabaseOpensearchPropertiesInitParameters) {
	*out = *in
	if in.ActionAutoCreateIndexEnabled != nil {
		in, out := &in.ActionAutoCreateIndexEnabled, &out.ActionAutoCreateIndexEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ActionDestructiveRequiresName != nil {
		in, out := &in.ActionDestructiveRequiresName, &out.ActionDestructiveRequiresName
		*out = new(bool)
		**out = **in
	}
	if in.AuthFailureListeners != nil {
		in, out := &in.AuthFailureListeners, &out.AuthFailureListeners
		*out = make([]AuthFailureListenersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AzureMigration != nil {
		in, out := &in.AzureMigration, &out.AzureMigration
		*out = make([]AzureMigrationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterMaxShardsPerNode != nil {
		in, out := &in.ClusterMaxShardsPerNode, &out.ClusterMaxShardsPerNode
		*out = new(int64)
		**out = **in
	}
	if in.ClusterRoutingAllocationNodeConcurrentRecoveries != nil {
		in, out := &in.ClusterRoutingAllocationNodeConcurrentRecoveries, &out.ClusterRoutingAllocationNodeConcurrentRecoveries
		*out = new(int64)
		**out = **in
	}
	if in.CustomDomain != nil {
		in, out := &in.CustomDomain, &out.CustomDomain
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderName != nil {
		in, out := &in.EmailSenderName, &out.EmailSenderName
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderPasswordSecretRef != nil {
		in, out := &in.EmailSenderPasswordSecretRef, &out.EmailSenderPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.EmailSenderUsername != nil {
		in, out := &in.EmailSenderUsername, &out.EmailSenderUsername
		*out = new(string)
		**out = **in
	}
	if in.EnableSecurityAudit != nil {
		in, out := &in.EnableSecurityAudit, &out.EnableSecurityAudit
		*out = new(bool)
		**out = **in
	}
	if in.GcsMigration != nil {
		in, out := &in.GcsMigration, &out.GcsMigration
		*out = make([]GcsMigrationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMaxContentLength != nil {
		in, out := &in.HTTPMaxContentLength, &out.HTTPMaxContentLength
		*out = new(int64)
		**out = **in
	}
	if in.HTTPMaxHeaderSize != nil {
		in, out := &in.HTTPMaxHeaderSize, &out.HTTPMaxHeaderSize
		*out = new(int64)
		**out = **in
	}
	if in.HTTPMaxInitialLineLength != nil {
		in, out := &in.HTTPMaxInitialLineLength, &out.HTTPMaxInitialLineLength
		*out = new(int64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexRollup != nil {
		in, out := &in.IndexRollup, &out.IndexRollup
		*out = make([]IndexRollupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IndexTemplate != nil {
		in, out := &in.IndexTemplate, &out.IndexTemplate
		*out = make([]IndexTemplateInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IndicesFielddataCacheSize != nil {
		in, out := &in.IndicesFielddataCacheSize, &out.IndicesFielddataCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryIndexBufferSize != nil {
		in, out := &in.IndicesMemoryIndexBufferSize, &out.IndicesMemoryIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryMaxIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMaxIndexBufferSize, &out.IndicesMemoryMaxIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryMinIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMinIndexBufferSize, &out.IndicesMemoryMinIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesQueriesCacheSize != nil {
		in, out := &in.IndicesQueriesCacheSize, &out.IndicesQueriesCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesQueryBoolMaxClauseCount != nil {
		in, out := &in.IndicesQueryBoolMaxClauseCount, &out.IndicesQueryBoolMaxClauseCount
		*out = new(int64)
		**out = **in
	}
	if in.IndicesRecoveryMaxBytesPerSec != nil {
		in, out := &in.IndicesRecoveryMaxBytesPerSec, &out.IndicesRecoveryMaxBytesPerSec
		*out = new(int64)
		**out = **in
	}
	if in.IndicesRecoveryMaxConcurrentFileChunks != nil {
		in, out := &in.IndicesRecoveryMaxConcurrentFileChunks, &out.IndicesRecoveryMaxConcurrentFileChunks
		*out = new(int64)
		**out = **in
	}
	if in.IsmEnabled != nil {
		in, out := &in.IsmEnabled, &out.IsmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryEnabled != nil {
		in, out := &in.IsmHistoryEnabled, &out.IsmHistoryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryMaxAge != nil {
		in, out := &in.IsmHistoryMaxAge, &out.IsmHistoryMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryMaxDocs != nil {
		in, out := &in.IsmHistoryMaxDocs, &out.IsmHistoryMaxDocs
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryRolloverCheckPeriod != nil {
		in, out := &in.IsmHistoryRolloverCheckPeriod, &out.IsmHistoryRolloverCheckPeriod
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryRolloverRetentionPeriod != nil {
		in, out := &in.IsmHistoryRolloverRetentionPeriod, &out.IsmHistoryRolloverRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.KeepIndexRefreshInterval != nil {
		in, out := &in.KeepIndexRefreshInterval, &out.KeepIndexRefreshInterval
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerEnabled != nil {
		in, out := &in.KnnMemoryCircuitBreakerEnabled, &out.KnnMemoryCircuitBreakerEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerLimit != nil {
		in, out := &in.KnnMemoryCircuitBreakerLimit, &out.KnnMemoryCircuitBreakerLimit
		*out = new(int64)
		**out = **in
	}
	if in.OpenID != nil {
		in, out := &in.OpenID, &out.OpenID
		*out = make([]OpenIDInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = make([]OpensearchDashboardsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OverrideMainResponseVersion != nil {
		in, out := &in.OverrideMainResponseVersion, &out.OverrideMainResponseVersion
		*out = new(bool)
		**out = **in
	}
	if in.PluginsAlertingFilterByBackendRoles != nil {
		in, out := &in.PluginsAlertingFilterByBackendRoles, &out.PluginsAlertingFilterByBackendRoles
		*out = new(bool)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.ReindexRemoteWhitelist != nil {
		in, out := &in.ReindexRemoteWhitelist, &out.ReindexRemoteWhitelist
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.S3Migration != nil {
		in, out := &in.S3Migration, &out.S3Migration
		*out = make([]S3MigrationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SAML != nil {
		in, out := &in.SAML, &out.SAML
		*out = make([]SAMLInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScriptMaxCompilationsRate != nil {
		in, out := &in.ScriptMaxCompilationsRate, &out.ScriptMaxCompilationsRate
		*out = new(string)
		**out = **in
	}
	if in.SearchMaxBuckets != nil {
		in, out := &in.SearchMaxBuckets, &out.SearchMaxBuckets
		*out = new(int64)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.ThreadPoolAnalyzeQueueSize != nil {
		in, out := &in.ThreadPoolAnalyzeQueueSize, &out.ThreadPoolAnalyzeQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolAnalyzeSize != nil {
		in, out := &in.ThreadPoolAnalyzeSize, &out.ThreadPoolAnalyzeSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolForceMergeSize != nil {
		in, out := &in.ThreadPoolForceMergeSize, &out.ThreadPoolForceMergeSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolGetQueueSize != nil {
		in, out := &in.ThreadPoolGetQueueSize, &out.ThreadPoolGetQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolGetSize != nil {
		in, out := &in.ThreadPoolGetSize, &out.ThreadPoolGetSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchQueueSize != nil {
		in, out := &in.ThreadPoolSearchQueueSize, &out.ThreadPoolSearchQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchSize != nil {
		in, out := &in.ThreadPoolSearchSize, &out.ThreadPoolSearchSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledQueueSize != nil {
		in, out := &in.ThreadPoolSearchThrottledQueueSize, &out.ThreadPoolSearchThrottledQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledSize != nil {
		in, out := &in.ThreadPoolSearchThrottledSize, &out.ThreadPoolSearchThrottledSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolWriteQueueSize != nil {
		in, out := &in.ThreadPoolWriteQueueSize, &out.ThreadPoolWriteQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolWriteSize != nil {
		in, out := &in.ThreadPoolWriteSize, &out.ThreadPoolWriteSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchPropertiesInitParameters.
func (in *ManagedDatabaseOpensearchPropertiesInitParameters) DeepCopy() *ManagedDatabaseOpensearchPropertiesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchPropertiesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchPropertiesObservation) DeepCopyInto(out *ManagedDatabaseOpensearchPropertiesObservation) {
	*out = *in
	if in.ActionAutoCreateIndexEnabled != nil {
		in, out := &in.ActionAutoCreateIndexEnabled, &out.ActionAutoCreateIndexEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ActionDestructiveRequiresName != nil {
		in, out := &in.ActionDestructiveRequiresName, &out.ActionDestructiveRequiresName
		*out = new(bool)
		**out = **in
	}
	if in.AuthFailureListeners != nil {
		in, out := &in.AuthFailureListeners, &out.AuthFailureListeners
		*out = make([]AuthFailureListenersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AzureMigration != nil {
		in, out := &in.AzureMigration, &out.AzureMigration
		*out = make([]AzureMigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterMaxShardsPerNode != nil {
		in, out := &in.ClusterMaxShardsPerNode, &out.ClusterMaxShardsPerNode
		*out = new(int64)
		**out = **in
	}
	if in.ClusterRoutingAllocationNodeConcurrentRecoveries != nil {
		in, out := &in.ClusterRoutingAllocationNodeConcurrentRecoveries, &out.ClusterRoutingAllocationNodeConcurrentRecoveries
		*out = new(int64)
		**out = **in
	}
	if in.CustomDomain != nil {
		in, out := &in.CustomDomain, &out.CustomDomain
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderName != nil {
		in, out := &in.EmailSenderName, &out.EmailSenderName
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderUsername != nil {
		in, out := &in.EmailSenderUsername, &out.EmailSenderUsername
		*out = new(string)
		**out = **in
	}
	if in.EnableSecurityAudit != nil {
		in, out := &in.EnableSecurityAudit, &out.EnableSecurityAudit
		*out = new(bool)
		**out = **in
	}
	if in.GcsMigration != nil {
		in, out := &in.GcsMigration, &out.GcsMigration
		*out = make([]GcsMigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMaxContentLength != nil {
		in, out := &in.HTTPMaxContentLength, &out.HTTPMaxContentLength
		*out = new(int64)
		**out = **in
	}
	if in.HTTPMaxHeaderSize != nil {
		in, out := &in.HTTPMaxHeaderSize, &out.HTTPMaxHeaderSize
		*out = new(int64)
		**out = **in
	}
	if in.HTTPMaxInitialLineLength != nil {
		in, out := &in.HTTPMaxInitialLineLength, &out.HTTPMaxInitialLineLength
		*out = new(int64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexRollup != nil {
		in, out := &in.IndexRollup, &out.IndexRollup
		*out = make([]IndexRollupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IndexTemplate != nil {
		in, out := &in.IndexTemplate, &out.IndexTemplate
		*out = make([]IndexTemplateObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IndicesFielddataCacheSize != nil {
		in, out := &in.IndicesFielddataCacheSize, &out.IndicesFielddataCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryIndexBufferSize != nil {
		in, out := &in.IndicesMemoryIndexBufferSize, &out.IndicesMemoryIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryMaxIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMaxIndexBufferSize, &out.IndicesMemoryMaxIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryMinIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMinIndexBufferSize, &out.IndicesMemoryMinIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesQueriesCacheSize != nil {
		in, out := &in.IndicesQueriesCacheSize, &out.IndicesQueriesCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesQueryBoolMaxClauseCount != nil {
		in, out := &in.IndicesQueryBoolMaxClauseCount, &out.IndicesQueryBoolMaxClauseCount
		*out = new(int64)
		**out = **in
	}
	if in.IndicesRecoveryMaxBytesPerSec != nil {
		in, out := &in.IndicesRecoveryMaxBytesPerSec, &out.IndicesRecoveryMaxBytesPerSec
		*out = new(int64)
		**out = **in
	}
	if in.IndicesRecoveryMaxConcurrentFileChunks != nil {
		in, out := &in.IndicesRecoveryMaxConcurrentFileChunks, &out.IndicesRecoveryMaxConcurrentFileChunks
		*out = new(int64)
		**out = **in
	}
	if in.IsmEnabled != nil {
		in, out := &in.IsmEnabled, &out.IsmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryEnabled != nil {
		in, out := &in.IsmHistoryEnabled, &out.IsmHistoryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryMaxAge != nil {
		in, out := &in.IsmHistoryMaxAge, &out.IsmHistoryMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryMaxDocs != nil {
		in, out := &in.IsmHistoryMaxDocs, &out.IsmHistoryMaxDocs
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryRolloverCheckPeriod != nil {
		in, out := &in.IsmHistoryRolloverCheckPeriod, &out.IsmHistoryRolloverCheckPeriod
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryRolloverRetentionPeriod != nil {
		in, out := &in.IsmHistoryRolloverRetentionPeriod, &out.IsmHistoryRolloverRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.KeepIndexRefreshInterval != nil {
		in, out := &in.KeepIndexRefreshInterval, &out.KeepIndexRefreshInterval
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerEnabled != nil {
		in, out := &in.KnnMemoryCircuitBreakerEnabled, &out.KnnMemoryCircuitBreakerEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerLimit != nil {
		in, out := &in.KnnMemoryCircuitBreakerLimit, &out.KnnMemoryCircuitBreakerLimit
		*out = new(int64)
		**out = **in
	}
	if in.OpenID != nil {
		in, out := &in.OpenID, &out.OpenID
		*out = make([]OpenIDObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = make([]OpensearchDashboardsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OverrideMainResponseVersion != nil {
		in, out := &in.OverrideMainResponseVersion, &out.OverrideMainResponseVersion
		*out = new(bool)
		**out = **in
	}
	if in.PluginsAlertingFilterByBackendRoles != nil {
		in, out := &in.PluginsAlertingFilterByBackendRoles, &out.PluginsAlertingFilterByBackendRoles
		*out = new(bool)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.ReindexRemoteWhitelist != nil {
		in, out := &in.ReindexRemoteWhitelist, &out.ReindexRemoteWhitelist
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.S3Migration != nil {
		in, out := &in.S3Migration, &out.S3Migration
		*out = make([]S3MigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SAML != nil {
		in, out := &in.SAML, &out.SAML
		*out = make([]SAMLObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScriptMaxCompilationsRate != nil {
		in, out := &in.ScriptMaxCompilationsRate, &out.ScriptMaxCompilationsRate
		*out = new(string)
		**out = **in
	}
	if in.SearchMaxBuckets != nil {
		in, out := &in.SearchMaxBuckets, &out.SearchMaxBuckets
		*out = new(int64)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.ThreadPoolAnalyzeQueueSize != nil {
		in, out := &in.ThreadPoolAnalyzeQueueSize, &out.ThreadPoolAnalyzeQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolAnalyzeSize != nil {
		in, out := &in.ThreadPoolAnalyzeSize, &out.ThreadPoolAnalyzeSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolForceMergeSize != nil {
		in, out := &in.ThreadPoolForceMergeSize, &out.ThreadPoolForceMergeSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolGetQueueSize != nil {
		in, out := &in.ThreadPoolGetQueueSize, &out.ThreadPoolGetQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolGetSize != nil {
		in, out := &in.ThreadPoolGetSize, &out.ThreadPoolGetSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchQueueSize != nil {
		in, out := &in.ThreadPoolSearchQueueSize, &out.ThreadPoolSearchQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchSize != nil {
		in, out := &in.ThreadPoolSearchSize, &out.ThreadPoolSearchSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledQueueSize != nil {
		in, out := &in.ThreadPoolSearchThrottledQueueSize, &out.ThreadPoolSearchThrottledQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledSize != nil {
		in, out := &in.ThreadPoolSearchThrottledSize, &out.ThreadPoolSearchThrottledSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolWriteQueueSize != nil {
		in, out := &in.ThreadPoolWriteQueueSize, &out.ThreadPoolWriteQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolWriteSize != nil {
		in, out := &in.ThreadPoolWriteSize, &out.ThreadPoolWriteSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchPropertiesObservation.
func (in *ManagedDatabaseOpensearchPropertiesObservation) DeepCopy() *ManagedDatabaseOpensearchPropertiesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchPropertiesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchPropertiesParameters) DeepCopyInto(out *ManagedDatabaseOpensearchPropertiesParameters) {
	*out = *in
	if in.ActionAutoCreateIndexEnabled != nil {
		in, out := &in.ActionAutoCreateIndexEnabled, &out.ActionAutoCreateIndexEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ActionDestructiveRequiresName != nil {
		in, out := &in.ActionDestructiveRequiresName, &out.ActionDestructiveRequiresName
		*out = new(bool)
		**out = **in
	}
	if in.AuthFailureListeners != nil {
		in, out := &in.AuthFailureListeners, &out.AuthFailureListeners
		*out = make([]AuthFailureListenersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AzureMigration != nil {
		in, out := &in.AzureMigration, &out.AzureMigration
		*out = make([]AzureMigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterMaxShardsPerNode != nil {
		in, out := &in.ClusterMaxShardsPerNode, &out.ClusterMaxShardsPerNode
		*out = new(int64)
		**out = **in
	}
	if in.ClusterRoutingAllocationNodeConcurrentRecoveries != nil {
		in, out := &in.ClusterRoutingAllocationNodeConcurrentRecoveries, &out.ClusterRoutingAllocationNodeConcurrentRecoveries
		*out = new(int64)
		**out = **in
	}
	if in.CustomDomain != nil {
		in, out := &in.CustomDomain, &out.CustomDomain
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderName != nil {
		in, out := &in.EmailSenderName, &out.EmailSenderName
		*out = new(string)
		**out = **in
	}
	if in.EmailSenderPasswordSecretRef != nil {
		in, out := &in.EmailSenderPasswordSecretRef, &out.EmailSenderPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.EmailSenderUsername != nil {
		in, out := &in.EmailSenderUsername, &out.EmailSenderUsername
		*out = new(string)
		**out = **in
	}
	if in.EnableSecurityAudit != nil {
		in, out := &in.EnableSecurityAudit, &out.EnableSecurityAudit
		*out = new(bool)
		**out = **in
	}
	if in.GcsMigration != nil {
		in, out := &in.GcsMigration, &out.GcsMigration
		*out = make([]GcsMigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMaxContentLength != nil {
		in, out := &in.HTTPMaxContentLength, &out.HTTPMaxContentLength
		*out = new(int64)
		**out = **in
	}
	if in.HTTPMaxHeaderSize != nil {
		in, out := &in.HTTPMaxHeaderSize, &out.HTTPMaxHeaderSize
		*out = new(int64)
		**out = **in
	}
	if in.HTTPMaxInitialLineLength != nil {
		in, out := &in.HTTPMaxInitialLineLength, &out.HTTPMaxInitialLineLength
		*out = new(int64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexPatterns != nil {
		in, out := &in.IndexPatterns, &out.IndexPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IndexRollup != nil {
		in, out := &in.IndexRollup, &out.IndexRollup
		*out = make([]IndexRollupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IndexTemplate != nil {
		in, out := &in.IndexTemplate, &out.IndexTemplate
		*out = make([]IndexTemplateParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IndicesFielddataCacheSize != nil {
		in, out := &in.IndicesFielddataCacheSize, &out.IndicesFielddataCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryIndexBufferSize != nil {
		in, out := &in.IndicesMemoryIndexBufferSize, &out.IndicesMemoryIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryMaxIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMaxIndexBufferSize, &out.IndicesMemoryMaxIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesMemoryMinIndexBufferSize != nil {
		in, out := &in.IndicesMemoryMinIndexBufferSize, &out.IndicesMemoryMinIndexBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesQueriesCacheSize != nil {
		in, out := &in.IndicesQueriesCacheSize, &out.IndicesQueriesCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.IndicesQueryBoolMaxClauseCount != nil {
		in, out := &in.IndicesQueryBoolMaxClauseCount, &out.IndicesQueryBoolMaxClauseCount
		*out = new(int64)
		**out = **in
	}
	if in.IndicesRecoveryMaxBytesPerSec != nil {
		in, out := &in.IndicesRecoveryMaxBytesPerSec, &out.IndicesRecoveryMaxBytesPerSec
		*out = new(int64)
		**out = **in
	}
	if in.IndicesRecoveryMaxConcurrentFileChunks != nil {
		in, out := &in.IndicesRecoveryMaxConcurrentFileChunks, &out.IndicesRecoveryMaxConcurrentFileChunks
		*out = new(int64)
		**out = **in
	}
	if in.IsmEnabled != nil {
		in, out := &in.IsmEnabled, &out.IsmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryEnabled != nil {
		in, out := &in.IsmHistoryEnabled, &out.IsmHistoryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsmHistoryMaxAge != nil {
		in, out := &in.IsmHistoryMaxAge, &out.IsmHistoryMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryMaxDocs != nil {
		in, out := &in.IsmHistoryMaxDocs, &out.IsmHistoryMaxDocs
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryRolloverCheckPeriod != nil {
		in, out := &in.IsmHistoryRolloverCheckPeriod, &out.IsmHistoryRolloverCheckPeriod
		*out = new(int64)
		**out = **in
	}
	if in.IsmHistoryRolloverRetentionPeriod != nil {
		in, out := &in.IsmHistoryRolloverRetentionPeriod, &out.IsmHistoryRolloverRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.KeepIndexRefreshInterval != nil {
		in, out := &in.KeepIndexRefreshInterval, &out.KeepIndexRefreshInterval
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerEnabled != nil {
		in, out := &in.KnnMemoryCircuitBreakerEnabled, &out.KnnMemoryCircuitBreakerEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KnnMemoryCircuitBreakerLimit != nil {
		in, out := &in.KnnMemoryCircuitBreakerLimit, &out.KnnMemoryCircuitBreakerLimit
		*out = new(int64)
		**out = **in
	}
	if in.OpenID != nil {
		in, out := &in.OpenID, &out.OpenID
		*out = make([]OpenIDParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OpensearchDashboards != nil {
		in, out := &in.OpensearchDashboards, &out.OpensearchDashboards
		*out = make([]OpensearchDashboardsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OverrideMainResponseVersion != nil {
		in, out := &in.OverrideMainResponseVersion, &out.OverrideMainResponseVersion
		*out = new(bool)
		**out = **in
	}
	if in.PluginsAlertingFilterByBackendRoles != nil {
		in, out := &in.PluginsAlertingFilterByBackendRoles, &out.PluginsAlertingFilterByBackendRoles
		*out = new(bool)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.ReindexRemoteWhitelist != nil {
		in, out := &in.ReindexRemoteWhitelist, &out.ReindexRemoteWhitelist
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.S3Migration != nil {
		in, out := &in.S3Migration, &out.S3Migration
		*out = make([]S3MigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SAML != nil {
		in, out := &in.SAML, &out.SAML
		*out = make([]SAMLParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScriptMaxCompilationsRate != nil {
		in, out := &in.ScriptMaxCompilationsRate, &out.ScriptMaxCompilationsRate
		*out = new(string)
		**out = **in
	}
	if in.SearchMaxBuckets != nil {
		in, out := &in.SearchMaxBuckets, &out.SearchMaxBuckets
		*out = new(int64)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.ThreadPoolAnalyzeQueueSize != nil {
		in, out := &in.ThreadPoolAnalyzeQueueSize, &out.ThreadPoolAnalyzeQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolAnalyzeSize != nil {
		in, out := &in.ThreadPoolAnalyzeSize, &out.ThreadPoolAnalyzeSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolForceMergeSize != nil {
		in, out := &in.ThreadPoolForceMergeSize, &out.ThreadPoolForceMergeSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolGetQueueSize != nil {
		in, out := &in.ThreadPoolGetQueueSize, &out.ThreadPoolGetQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolGetSize != nil {
		in, out := &in.ThreadPoolGetSize, &out.ThreadPoolGetSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchQueueSize != nil {
		in, out := &in.ThreadPoolSearchQueueSize, &out.ThreadPoolSearchQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchSize != nil {
		in, out := &in.ThreadPoolSearchSize, &out.ThreadPoolSearchSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledQueueSize != nil {
		in, out := &in.ThreadPoolSearchThrottledQueueSize, &out.ThreadPoolSearchThrottledQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolSearchThrottledSize != nil {
		in, out := &in.ThreadPoolSearchThrottledSize, &out.ThreadPoolSearchThrottledSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolWriteQueueSize != nil {
		in, out := &in.ThreadPoolWriteQueueSize, &out.ThreadPoolWriteQueueSize
		*out = new(int64)
		**out = **in
	}
	if in.ThreadPoolWriteSize != nil {
		in, out := &in.ThreadPoolWriteSize, &out.ThreadPoolWriteSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchPropertiesParameters.
func (in *ManagedDatabaseOpensearchPropertiesParameters) DeepCopy() *ManagedDatabaseOpensearchPropertiesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchPropertiesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchSpec) DeepCopyInto(out *ManagedDatabaseOpensearchSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchSpec.
func (in *ManagedDatabaseOpensearchSpec) DeepCopy() *ManagedDatabaseOpensearchSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseOpensearchStatus) DeepCopyInto(out *ManagedDatabaseOpensearchStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseOpensearchStatus.
func (in *ManagedDatabaseOpensearchStatus) DeepCopy() *ManagedDatabaseOpensearchStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseOpensearchStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresql) DeepCopyInto(out *ManagedDatabasePostgresql) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresql.
func (in *ManagedDatabasePostgresql) DeepCopy() *ManagedDatabasePostgresql {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresql)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabasePostgresql) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlComponentsInitParameters) DeepCopyInto(out *ManagedDatabasePostgresqlComponentsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlComponentsInitParameters.
func (in *ManagedDatabasePostgresqlComponentsInitParameters) DeepCopy() *ManagedDatabasePostgresqlComponentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlComponentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlComponentsObservation) DeepCopyInto(out *ManagedDatabasePostgresqlComponentsObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlComponentsObservation.
func (in *ManagedDatabasePostgresqlComponentsObservation) DeepCopy() *ManagedDatabasePostgresqlComponentsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlComponentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlComponentsParameters) DeepCopyInto(out *ManagedDatabasePostgresqlComponentsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlComponentsParameters.
func (in *ManagedDatabasePostgresqlComponentsParameters) DeepCopy() *ManagedDatabasePostgresqlComponentsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlComponentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlInitParameters) DeepCopyInto(out *ManagedDatabasePostgresqlInitParameters) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabasePostgresqlNetworkInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabasePostgresqlNodeStatesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabasePostgresqlPropertiesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlInitParameters.
func (in *ManagedDatabasePostgresqlInitParameters) DeepCopy() *ManagedDatabasePostgresqlInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlList) DeepCopyInto(out *ManagedDatabasePostgresqlList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedDatabasePostgresql, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlList.
func (in *ManagedDatabasePostgresqlList) DeepCopy() *ManagedDatabasePostgresqlList {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabasePostgresqlList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlNetworkInitParameters) DeepCopyInto(out *ManagedDatabasePostgresqlNetworkInitParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlNetworkInitParameters.
func (in *ManagedDatabasePostgresqlNetworkInitParameters) DeepCopy() *ManagedDatabasePostgresqlNetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlNetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlNetworkObservation) DeepCopyInto(out *ManagedDatabasePostgresqlNetworkObservation) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlNetworkObservation.
func (in *ManagedDatabasePostgresqlNetworkObservation) DeepCopy() *ManagedDatabasePostgresqlNetworkObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlNetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlNetworkParameters) DeepCopyInto(out *ManagedDatabasePostgresqlNetworkParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlNetworkParameters.
func (in *ManagedDatabasePostgresqlNetworkParameters) DeepCopy() *ManagedDatabasePostgresqlNetworkParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlNetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlNodeStatesInitParameters) DeepCopyInto(out *ManagedDatabasePostgresqlNodeStatesInitParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlNodeStatesInitParameters.
func (in *ManagedDatabasePostgresqlNodeStatesInitParameters) DeepCopy() *ManagedDatabasePostgresqlNodeStatesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlNodeStatesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlNodeStatesObservation) DeepCopyInto(out *ManagedDatabasePostgresqlNodeStatesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlNodeStatesObservation.
func (in *ManagedDatabasePostgresqlNodeStatesObservation) DeepCopy() *ManagedDatabasePostgresqlNodeStatesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlNodeStatesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlNodeStatesParameters) DeepCopyInto(out *ManagedDatabasePostgresqlNodeStatesParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlNodeStatesParameters.
func (in *ManagedDatabasePostgresqlNodeStatesParameters) DeepCopy() *ManagedDatabasePostgresqlNodeStatesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlNodeStatesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlObservation) DeepCopyInto(out *ManagedDatabasePostgresqlObservation) {
	*out = *in
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]ManagedDatabasePostgresqlComponentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabasePostgresqlNetworkObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabasePostgresqlNodeStatesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.PrimaryDatabase != nil {
		in, out := &in.PrimaryDatabase, &out.PrimaryDatabase
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabasePostgresqlPropertiesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.Sslmode != nil {
		in, out := &in.Sslmode, &out.Sslmode
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlObservation.
func (in *ManagedDatabasePostgresqlObservation) DeepCopy() *ManagedDatabasePostgresqlObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlParameters) DeepCopyInto(out *ManagedDatabasePostgresqlParameters) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabasePostgresqlNetworkParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabasePostgresqlNodeStatesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabasePostgresqlPropertiesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlParameters.
func (in *ManagedDatabasePostgresqlParameters) DeepCopy() *ManagedDatabasePostgresqlParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlPropertiesInitParameters) DeepCopyInto(out *ManagedDatabasePostgresqlPropertiesInitParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AutovacuumAnalyzeScaleFactor != nil {
		in, out := &in.AutovacuumAnalyzeScaleFactor, &out.AutovacuumAnalyzeScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumAnalyzeThreshold != nil {
		in, out := &in.AutovacuumAnalyzeThreshold, &out.AutovacuumAnalyzeThreshold
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumFreezeMaxAge != nil {
		in, out := &in.AutovacuumFreezeMaxAge, &out.AutovacuumFreezeMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumMaxWorkers != nil {
		in, out := &in.AutovacuumMaxWorkers, &out.AutovacuumMaxWorkers
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumNaptime != nil {
		in, out := &in.AutovacuumNaptime, &out.AutovacuumNaptime
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostDelay != nil {
		in, out := &in.AutovacuumVacuumCostDelay, &out.AutovacuumVacuumCostDelay
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostLimit != nil {
		in, out := &in.AutovacuumVacuumCostLimit, &out.AutovacuumVacuumCostLimit
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumScaleFactor != nil {
		in, out := &in.AutovacuumVacuumScaleFactor, &out.AutovacuumVacuumScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumVacuumThreshold != nil {
		in, out := &in.AutovacuumVacuumThreshold, &out.AutovacuumVacuumThreshold
		*out = new(int64)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterDelay != nil {
		in, out := &in.BgwriterDelay, &out.BgwriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterFlushAfter != nil {
		in, out := &in.BgwriterFlushAfter, &out.BgwriterFlushAfter
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMaxpages != nil {
		in, out := &in.BgwriterLruMaxpages, &out.BgwriterLruMaxpages
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMultiplier != nil {
		in, out := &in.BgwriterLruMultiplier, &out.BgwriterLruMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.DeadlockTimeout != nil {
		in, out := &in.DeadlockTimeout, &out.DeadlockTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultToastCompression != nil {
		in, out := &in.DefaultToastCompression, &out.DefaultToastCompression
		*out = new(string)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IdleInTransactionSessionTimeout != nil {
		in, out := &in.IdleInTransactionSessionTimeout, &out.IdleInTransactionSessionTimeout
		*out = new(int64)
		**out = **in
	}
	if in.Jit != nil {
		in, out := &in.Jit, &out.Jit
		*out = new(bool)
		**out = **in
	}
	if in.LogAutovacuumMinDuration != nil {
		in, out := &in.LogAutovacuumMinDuration, &out.LogAutovacuumMinDuration
		*out = new(int64)
		**out = **in
	}
	if in.LogErrorVerbosity != nil {
		in, out := &in.LogErrorVerbosity, &out.LogErrorVerbosity
		*out = new(string)
		**out = **in
	}
	if in.LogLinePrefix != nil {
		in, out := &in.LogLinePrefix, &out.LogLinePrefix
		*out = new(string)
		**out = **in
	}
	if in.LogMinDurationStatement != nil {
		in, out := &in.LogMinDurationStatement, &out.LogMinDurationStatement
		*out = new(int64)
		**out = **in
	}
	if in.LogTempFiles != nil {
		in, out := &in.LogTempFiles, &out.LogTempFiles
		*out = new(int64)
		**out = **in
	}
	if in.MaxFilesPerProcess != nil {
		in, out := &in.MaxFilesPerProcess, &out.MaxFilesPerProcess
		*out = new(int64)
		**out = **in
	}
	if in.MaxLocksPerTransaction != nil {
		in, out := &in.MaxLocksPerTransaction, &out.MaxLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxLogicalReplicationWorkers != nil {
		in, out := &in.MaxLogicalReplicationWorkers, &out.MaxLogicalReplicationWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkers != nil {
		in, out := &in.MaxParallelWorkers, &out.MaxParallelWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkersPerGather != nil {
		in, out := &in.MaxParallelWorkersPerGather, &out.MaxParallelWorkersPerGather
		*out = new(int64)
		**out = **in
	}
	if in.MaxPredLocksPerTransaction != nil {
		in, out := &in.MaxPredLocksPerTransaction, &out.MaxPredLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxPreparedTransactions != nil {
		in, out := &in.MaxPreparedTransactions, &out.MaxPreparedTransactions
		*out = new(int64)
		**out = **in
	}
	if in.MaxReplicationSlots != nil {
		in, out := &in.MaxReplicationSlots, &out.MaxReplicationSlots
		*out = new(int64)
		**out = **in
	}
	if in.MaxSlotWalKeepSize != nil {
		in, out := &in.MaxSlotWalKeepSize, &out.MaxSlotWalKeepSize
		*out = new(int64)
		**out = **in
	}
	if in.MaxStackDepth != nil {
		in, out := &in.MaxStackDepth, &out.MaxStackDepth
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxWalSenders != nil {
		in, out := &in.MaxWalSenders, &out.MaxWalSenders
		*out = new(int64)
		**out = **in
	}
	if in.MaxWorkerProcesses != nil {
		in, out := &in.MaxWorkerProcesses, &out.MaxWorkerProcesses
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]PropertiesMigrationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PgPartmanBgwInterval != nil {
		in, out := &in.PgPartmanBgwInterval, &out.PgPartmanBgwInterval
		*out = new(int64)
		**out = **in
	}
	if in.PgPartmanBgwRole != nil {
		in, out := &in.PgPartmanBgwRole, &out.PgPartmanBgwRole
		*out = new(string)
		**out = **in
	}
	if in.PgStatMonitorEnable != nil {
		in, out := &in.PgStatMonitorEnable, &out.PgStatMonitorEnable
		*out = new(bool)
		**out = **in
	}
	if in.PgStatMonitorPgsmEnableQueryPlan != nil {
		in, out := &in.PgStatMonitorPgsmEnableQueryPlan, &out.PgStatMonitorPgsmEnableQueryPlan
		*out = new(bool)
		**out = **in
	}
	if in.PgStatMonitorPgsmMaxBuckets != nil {
		in, out := &in.PgStatMonitorPgsmMaxBuckets, &out.PgStatMonitorPgsmMaxBuckets
		*out = new(int64)
		**out = **in
	}
	if in.PgStatStatementsTrack != nil {
		in, out := &in.PgStatStatementsTrack, &out.PgStatStatementsTrack
		*out = new(string)
		**out = **in
	}
	if in.Pgbouncer != nil {
		in, out := &in.Pgbouncer, &out.Pgbouncer
		*out = make([]PgbouncerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pglookout != nil {
		in, out := &in.Pglookout, &out.Pglookout
		*out = make([]PglookoutInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.SharedBuffersPercentage != nil {
		in, out := &in.SharedBuffersPercentage, &out.SharedBuffersPercentage
		*out = new(float64)
		**out = **in
	}
	if in.SynchronousReplication != nil {
		in, out := &in.SynchronousReplication, &out.SynchronousReplication
		*out = new(string)
		**out = **in
	}
	if in.TempFileLimit != nil {
		in, out := &in.TempFileLimit, &out.TempFileLimit
		*out = new(int64)
		**out = **in
	}
	if in.Timescaledb != nil {
		in, out := &in.Timescaledb, &out.Timescaledb
		*out = make([]TimescaledbInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TrackActivityQuerySize != nil {
		in, out := &in.TrackActivityQuerySize, &out.TrackActivityQuerySize
		*out = new(int64)
		**out = **in
	}
	if in.TrackCommitTimestamp != nil {
		in, out := &in.TrackCommitTimestamp, &out.TrackCommitTimestamp
		*out = new(string)
		**out = **in
	}
	if in.TrackFunctions != nil {
		in, out := &in.TrackFunctions, &out.TrackFunctions
		*out = new(string)
		**out = **in
	}
	if in.TrackIoTiming != nil {
		in, out := &in.TrackIoTiming, &out.TrackIoTiming
		*out = new(string)
		**out = **in
	}
	if in.Variant != nil {
		in, out := &in.Variant, &out.Variant
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WalSenderTimeout != nil {
		in, out := &in.WalSenderTimeout, &out.WalSenderTimeout
		*out = new(int64)
		**out = **in
	}
	if in.WalWriterDelay != nil {
		in, out := &in.WalWriterDelay, &out.WalWriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.WorkMem != nil {
		in, out := &in.WorkMem, &out.WorkMem
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlPropertiesInitParameters.
func (in *ManagedDatabasePostgresqlPropertiesInitParameters) DeepCopy() *ManagedDatabasePostgresqlPropertiesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlPropertiesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlPropertiesObservation) DeepCopyInto(out *ManagedDatabasePostgresqlPropertiesObservation) {
	*out = *in
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AutovacuumAnalyzeScaleFactor != nil {
		in, out := &in.AutovacuumAnalyzeScaleFactor, &out.AutovacuumAnalyzeScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumAnalyzeThreshold != nil {
		in, out := &in.AutovacuumAnalyzeThreshold, &out.AutovacuumAnalyzeThreshold
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumFreezeMaxAge != nil {
		in, out := &in.AutovacuumFreezeMaxAge, &out.AutovacuumFreezeMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumMaxWorkers != nil {
		in, out := &in.AutovacuumMaxWorkers, &out.AutovacuumMaxWorkers
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumNaptime != nil {
		in, out := &in.AutovacuumNaptime, &out.AutovacuumNaptime
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostDelay != nil {
		in, out := &in.AutovacuumVacuumCostDelay, &out.AutovacuumVacuumCostDelay
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostLimit != nil {
		in, out := &in.AutovacuumVacuumCostLimit, &out.AutovacuumVacuumCostLimit
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumScaleFactor != nil {
		in, out := &in.AutovacuumVacuumScaleFactor, &out.AutovacuumVacuumScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumVacuumThreshold != nil {
		in, out := &in.AutovacuumVacuumThreshold, &out.AutovacuumVacuumThreshold
		*out = new(int64)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterDelay != nil {
		in, out := &in.BgwriterDelay, &out.BgwriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterFlushAfter != nil {
		in, out := &in.BgwriterFlushAfter, &out.BgwriterFlushAfter
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMaxpages != nil {
		in, out := &in.BgwriterLruMaxpages, &out.BgwriterLruMaxpages
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMultiplier != nil {
		in, out := &in.BgwriterLruMultiplier, &out.BgwriterLruMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.DeadlockTimeout != nil {
		in, out := &in.DeadlockTimeout, &out.DeadlockTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultToastCompression != nil {
		in, out := &in.DefaultToastCompression, &out.DefaultToastCompression
		*out = new(string)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IdleInTransactionSessionTimeout != nil {
		in, out := &in.IdleInTransactionSessionTimeout, &out.IdleInTransactionSessionTimeout
		*out = new(int64)
		**out = **in
	}
	if in.Jit != nil {
		in, out := &in.Jit, &out.Jit
		*out = new(bool)
		**out = **in
	}
	if in.LogAutovacuumMinDuration != nil {
		in, out := &in.LogAutovacuumMinDuration, &out.LogAutovacuumMinDuration
		*out = new(int64)
		**out = **in
	}
	if in.LogErrorVerbosity != nil {
		in, out := &in.LogErrorVerbosity, &out.LogErrorVerbosity
		*out = new(string)
		**out = **in
	}
	if in.LogLinePrefix != nil {
		in, out := &in.LogLinePrefix, &out.LogLinePrefix
		*out = new(string)
		**out = **in
	}
	if in.LogMinDurationStatement != nil {
		in, out := &in.LogMinDurationStatement, &out.LogMinDurationStatement
		*out = new(int64)
		**out = **in
	}
	if in.LogTempFiles != nil {
		in, out := &in.LogTempFiles, &out.LogTempFiles
		*out = new(int64)
		**out = **in
	}
	if in.MaxFilesPerProcess != nil {
		in, out := &in.MaxFilesPerProcess, &out.MaxFilesPerProcess
		*out = new(int64)
		**out = **in
	}
	if in.MaxLocksPerTransaction != nil {
		in, out := &in.MaxLocksPerTransaction, &out.MaxLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxLogicalReplicationWorkers != nil {
		in, out := &in.MaxLogicalReplicationWorkers, &out.MaxLogicalReplicationWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkers != nil {
		in, out := &in.MaxParallelWorkers, &out.MaxParallelWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkersPerGather != nil {
		in, out := &in.MaxParallelWorkersPerGather, &out.MaxParallelWorkersPerGather
		*out = new(int64)
		**out = **in
	}
	if in.MaxPredLocksPerTransaction != nil {
		in, out := &in.MaxPredLocksPerTransaction, &out.MaxPredLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxPreparedTransactions != nil {
		in, out := &in.MaxPreparedTransactions, &out.MaxPreparedTransactions
		*out = new(int64)
		**out = **in
	}
	if in.MaxReplicationSlots != nil {
		in, out := &in.MaxReplicationSlots, &out.MaxReplicationSlots
		*out = new(int64)
		**out = **in
	}
	if in.MaxSlotWalKeepSize != nil {
		in, out := &in.MaxSlotWalKeepSize, &out.MaxSlotWalKeepSize
		*out = new(int64)
		**out = **in
	}
	if in.MaxStackDepth != nil {
		in, out := &in.MaxStackDepth, &out.MaxStackDepth
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxWalSenders != nil {
		in, out := &in.MaxWalSenders, &out.MaxWalSenders
		*out = new(int64)
		**out = **in
	}
	if in.MaxWorkerProcesses != nil {
		in, out := &in.MaxWorkerProcesses, &out.MaxWorkerProcesses
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]PropertiesMigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PgPartmanBgwInterval != nil {
		in, out := &in.PgPartmanBgwInterval, &out.PgPartmanBgwInterval
		*out = new(int64)
		**out = **in
	}
	if in.PgPartmanBgwRole != nil {
		in, out := &in.PgPartmanBgwRole, &out.PgPartmanBgwRole
		*out = new(string)
		**out = **in
	}
	if in.PgStatMonitorEnable != nil {
		in, out := &in.PgStatMonitorEnable, &out.PgStatMonitorEnable
		*out = new(bool)
		**out = **in
	}
	if in.PgStatMonitorPgsmEnableQueryPlan != nil {
		in, out := &in.PgStatMonitorPgsmEnableQueryPlan, &out.PgStatMonitorPgsmEnableQueryPlan
		*out = new(bool)
		**out = **in
	}
	if in.PgStatMonitorPgsmMaxBuckets != nil {
		in, out := &in.PgStatMonitorPgsmMaxBuckets, &out.PgStatMonitorPgsmMaxBuckets
		*out = new(int64)
		**out = **in
	}
	if in.PgStatStatementsTrack != nil {
		in, out := &in.PgStatStatementsTrack, &out.PgStatStatementsTrack
		*out = new(string)
		**out = **in
	}
	if in.Pgbouncer != nil {
		in, out := &in.Pgbouncer, &out.Pgbouncer
		*out = make([]PgbouncerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pglookout != nil {
		in, out := &in.Pglookout, &out.Pglookout
		*out = make([]PglookoutObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.SharedBuffersPercentage != nil {
		in, out := &in.SharedBuffersPercentage, &out.SharedBuffersPercentage
		*out = new(float64)
		**out = **in
	}
	if in.SynchronousReplication != nil {
		in, out := &in.SynchronousReplication, &out.SynchronousReplication
		*out = new(string)
		**out = **in
	}
	if in.TempFileLimit != nil {
		in, out := &in.TempFileLimit, &out.TempFileLimit
		*out = new(int64)
		**out = **in
	}
	if in.Timescaledb != nil {
		in, out := &in.Timescaledb, &out.Timescaledb
		*out = make([]TimescaledbObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TrackActivityQuerySize != nil {
		in, out := &in.TrackActivityQuerySize, &out.TrackActivityQuerySize
		*out = new(int64)
		**out = **in
	}
	if in.TrackCommitTimestamp != nil {
		in, out := &in.TrackCommitTimestamp, &out.TrackCommitTimestamp
		*out = new(string)
		**out = **in
	}
	if in.TrackFunctions != nil {
		in, out := &in.TrackFunctions, &out.TrackFunctions
		*out = new(string)
		**out = **in
	}
	if in.TrackIoTiming != nil {
		in, out := &in.TrackIoTiming, &out.TrackIoTiming
		*out = new(string)
		**out = **in
	}
	if in.Variant != nil {
		in, out := &in.Variant, &out.Variant
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WalSenderTimeout != nil {
		in, out := &in.WalSenderTimeout, &out.WalSenderTimeout
		*out = new(int64)
		**out = **in
	}
	if in.WalWriterDelay != nil {
		in, out := &in.WalWriterDelay, &out.WalWriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.WorkMem != nil {
		in, out := &in.WorkMem, &out.WorkMem
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlPropertiesObservation.
func (in *ManagedDatabasePostgresqlPropertiesObservation) DeepCopy() *ManagedDatabasePostgresqlPropertiesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlPropertiesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlPropertiesParameters) DeepCopyInto(out *ManagedDatabasePostgresqlPropertiesParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.AutovacuumAnalyzeScaleFactor != nil {
		in, out := &in.AutovacuumAnalyzeScaleFactor, &out.AutovacuumAnalyzeScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumAnalyzeThreshold != nil {
		in, out := &in.AutovacuumAnalyzeThreshold, &out.AutovacuumAnalyzeThreshold
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumFreezeMaxAge != nil {
		in, out := &in.AutovacuumFreezeMaxAge, &out.AutovacuumFreezeMaxAge
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumMaxWorkers != nil {
		in, out := &in.AutovacuumMaxWorkers, &out.AutovacuumMaxWorkers
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumNaptime != nil {
		in, out := &in.AutovacuumNaptime, &out.AutovacuumNaptime
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostDelay != nil {
		in, out := &in.AutovacuumVacuumCostDelay, &out.AutovacuumVacuumCostDelay
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumCostLimit != nil {
		in, out := &in.AutovacuumVacuumCostLimit, &out.AutovacuumVacuumCostLimit
		*out = new(int64)
		**out = **in
	}
	if in.AutovacuumVacuumScaleFactor != nil {
		in, out := &in.AutovacuumVacuumScaleFactor, &out.AutovacuumVacuumScaleFactor
		*out = new(float64)
		**out = **in
	}
	if in.AutovacuumVacuumThreshold != nil {
		in, out := &in.AutovacuumVacuumThreshold, &out.AutovacuumVacuumThreshold
		*out = new(int64)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterDelay != nil {
		in, out := &in.BgwriterDelay, &out.BgwriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterFlushAfter != nil {
		in, out := &in.BgwriterFlushAfter, &out.BgwriterFlushAfter
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMaxpages != nil {
		in, out := &in.BgwriterLruMaxpages, &out.BgwriterLruMaxpages
		*out = new(int64)
		**out = **in
	}
	if in.BgwriterLruMultiplier != nil {
		in, out := &in.BgwriterLruMultiplier, &out.BgwriterLruMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.DeadlockTimeout != nil {
		in, out := &in.DeadlockTimeout, &out.DeadlockTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultToastCompression != nil {
		in, out := &in.DefaultToastCompression, &out.DefaultToastCompression
		*out = new(string)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IdleInTransactionSessionTimeout != nil {
		in, out := &in.IdleInTransactionSessionTimeout, &out.IdleInTransactionSessionTimeout
		*out = new(int64)
		**out = **in
	}
	if in.Jit != nil {
		in, out := &in.Jit, &out.Jit
		*out = new(bool)
		**out = **in
	}
	if in.LogAutovacuumMinDuration != nil {
		in, out := &in.LogAutovacuumMinDuration, &out.LogAutovacuumMinDuration
		*out = new(int64)
		**out = **in
	}
	if in.LogErrorVerbosity != nil {
		in, out := &in.LogErrorVerbosity, &out.LogErrorVerbosity
		*out = new(string)
		**out = **in
	}
	if in.LogLinePrefix != nil {
		in, out := &in.LogLinePrefix, &out.LogLinePrefix
		*out = new(string)
		**out = **in
	}
	if in.LogMinDurationStatement != nil {
		in, out := &in.LogMinDurationStatement, &out.LogMinDurationStatement
		*out = new(int64)
		**out = **in
	}
	if in.LogTempFiles != nil {
		in, out := &in.LogTempFiles, &out.LogTempFiles
		*out = new(int64)
		**out = **in
	}
	if in.MaxFilesPerProcess != nil {
		in, out := &in.MaxFilesPerProcess, &out.MaxFilesPerProcess
		*out = new(int64)
		**out = **in
	}
	if in.MaxLocksPerTransaction != nil {
		in, out := &in.MaxLocksPerTransaction, &out.MaxLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxLogicalReplicationWorkers != nil {
		in, out := &in.MaxLogicalReplicationWorkers, &out.MaxLogicalReplicationWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkers != nil {
		in, out := &in.MaxParallelWorkers, &out.MaxParallelWorkers
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelWorkersPerGather != nil {
		in, out := &in.MaxParallelWorkersPerGather, &out.MaxParallelWorkersPerGather
		*out = new(int64)
		**out = **in
	}
	if in.MaxPredLocksPerTransaction != nil {
		in, out := &in.MaxPredLocksPerTransaction, &out.MaxPredLocksPerTransaction
		*out = new(int64)
		**out = **in
	}
	if in.MaxPreparedTransactions != nil {
		in, out := &in.MaxPreparedTransactions, &out.MaxPreparedTransactions
		*out = new(int64)
		**out = **in
	}
	if in.MaxReplicationSlots != nil {
		in, out := &in.MaxReplicationSlots, &out.MaxReplicationSlots
		*out = new(int64)
		**out = **in
	}
	if in.MaxSlotWalKeepSize != nil {
		in, out := &in.MaxSlotWalKeepSize, &out.MaxSlotWalKeepSize
		*out = new(int64)
		**out = **in
	}
	if in.MaxStackDepth != nil {
		in, out := &in.MaxStackDepth, &out.MaxStackDepth
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyArchiveDelay != nil {
		in, out := &in.MaxStandbyArchiveDelay, &out.MaxStandbyArchiveDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxStandbyStreamingDelay != nil {
		in, out := &in.MaxStandbyStreamingDelay, &out.MaxStandbyStreamingDelay
		*out = new(int64)
		**out = **in
	}
	if in.MaxWalSenders != nil {
		in, out := &in.MaxWalSenders, &out.MaxWalSenders
		*out = new(int64)
		**out = **in
	}
	if in.MaxWorkerProcesses != nil {
		in, out := &in.MaxWorkerProcesses, &out.MaxWorkerProcesses
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]PropertiesMigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PgPartmanBgwInterval != nil {
		in, out := &in.PgPartmanBgwInterval, &out.PgPartmanBgwInterval
		*out = new(int64)
		**out = **in
	}
	if in.PgPartmanBgwRole != nil {
		in, out := &in.PgPartmanBgwRole, &out.PgPartmanBgwRole
		*out = new(string)
		**out = **in
	}
	if in.PgStatMonitorEnable != nil {
		in, out := &in.PgStatMonitorEnable, &out.PgStatMonitorEnable
		*out = new(bool)
		**out = **in
	}
	if in.PgStatMonitorPgsmEnableQueryPlan != nil {
		in, out := &in.PgStatMonitorPgsmEnableQueryPlan, &out.PgStatMonitorPgsmEnableQueryPlan
		*out = new(bool)
		**out = **in
	}
	if in.PgStatMonitorPgsmMaxBuckets != nil {
		in, out := &in.PgStatMonitorPgsmMaxBuckets, &out.PgStatMonitorPgsmMaxBuckets
		*out = new(int64)
		**out = **in
	}
	if in.PgStatStatementsTrack != nil {
		in, out := &in.PgStatStatementsTrack, &out.PgStatStatementsTrack
		*out = new(string)
		**out = **in
	}
	if in.Pgbouncer != nil {
		in, out := &in.Pgbouncer, &out.Pgbouncer
		*out = make([]PgbouncerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pglookout != nil {
		in, out := &in.Pglookout, &out.Pglookout
		*out = make([]PglookoutParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.SharedBuffersPercentage != nil {
		in, out := &in.SharedBuffersPercentage, &out.SharedBuffersPercentage
		*out = new(float64)
		**out = **in
	}
	if in.SynchronousReplication != nil {
		in, out := &in.SynchronousReplication, &out.SynchronousReplication
		*out = new(string)
		**out = **in
	}
	if in.TempFileLimit != nil {
		in, out := &in.TempFileLimit, &out.TempFileLimit
		*out = new(int64)
		**out = **in
	}
	if in.Timescaledb != nil {
		in, out := &in.Timescaledb, &out.Timescaledb
		*out = make([]TimescaledbParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TrackActivityQuerySize != nil {
		in, out := &in.TrackActivityQuerySize, &out.TrackActivityQuerySize
		*out = new(int64)
		**out = **in
	}
	if in.TrackCommitTimestamp != nil {
		in, out := &in.TrackCommitTimestamp, &out.TrackCommitTimestamp
		*out = new(string)
		**out = **in
	}
	if in.TrackFunctions != nil {
		in, out := &in.TrackFunctions, &out.TrackFunctions
		*out = new(string)
		**out = **in
	}
	if in.TrackIoTiming != nil {
		in, out := &in.TrackIoTiming, &out.TrackIoTiming
		*out = new(string)
		**out = **in
	}
	if in.Variant != nil {
		in, out := &in.Variant, &out.Variant
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WalSenderTimeout != nil {
		in, out := &in.WalSenderTimeout, &out.WalSenderTimeout
		*out = new(int64)
		**out = **in
	}
	if in.WalWriterDelay != nil {
		in, out := &in.WalWriterDelay, &out.WalWriterDelay
		*out = new(int64)
		**out = **in
	}
	if in.WorkMem != nil {
		in, out := &in.WorkMem, &out.WorkMem
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlPropertiesParameters.
func (in *ManagedDatabasePostgresqlPropertiesParameters) DeepCopy() *ManagedDatabasePostgresqlPropertiesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlPropertiesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlSpec) DeepCopyInto(out *ManagedDatabasePostgresqlSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlSpec.
func (in *ManagedDatabasePostgresqlSpec) DeepCopy() *ManagedDatabasePostgresqlSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabasePostgresqlStatus) DeepCopyInto(out *ManagedDatabasePostgresqlStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabasePostgresqlStatus.
func (in *ManagedDatabasePostgresqlStatus) DeepCopy() *ManagedDatabasePostgresqlStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabasePostgresqlStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedis) DeepCopyInto(out *ManagedDatabaseRedis) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedis.
func (in *ManagedDatabaseRedis) DeepCopy() *ManagedDatabaseRedis {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedis)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseRedis) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisComponentsInitParameters) DeepCopyInto(out *ManagedDatabaseRedisComponentsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisComponentsInitParameters.
func (in *ManagedDatabaseRedisComponentsInitParameters) DeepCopy() *ManagedDatabaseRedisComponentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisComponentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisComponentsObservation) DeepCopyInto(out *ManagedDatabaseRedisComponentsObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisComponentsObservation.
func (in *ManagedDatabaseRedisComponentsObservation) DeepCopy() *ManagedDatabaseRedisComponentsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisComponentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisComponentsParameters) DeepCopyInto(out *ManagedDatabaseRedisComponentsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisComponentsParameters.
func (in *ManagedDatabaseRedisComponentsParameters) DeepCopy() *ManagedDatabaseRedisComponentsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisComponentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisInitParameters) DeepCopyInto(out *ManagedDatabaseRedisInitParameters) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabaseRedisNetworkInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabaseRedisNodeStatesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabaseRedisPropertiesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisInitParameters.
func (in *ManagedDatabaseRedisInitParameters) DeepCopy() *ManagedDatabaseRedisInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisList) DeepCopyInto(out *ManagedDatabaseRedisList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedDatabaseRedis, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisList.
func (in *ManagedDatabaseRedisList) DeepCopy() *ManagedDatabaseRedisList {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseRedisList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisNetworkInitParameters) DeepCopyInto(out *ManagedDatabaseRedisNetworkInitParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisNetworkInitParameters.
func (in *ManagedDatabaseRedisNetworkInitParameters) DeepCopy() *ManagedDatabaseRedisNetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisNetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisNetworkObservation) DeepCopyInto(out *ManagedDatabaseRedisNetworkObservation) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisNetworkObservation.
func (in *ManagedDatabaseRedisNetworkObservation) DeepCopy() *ManagedDatabaseRedisNetworkObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisNetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisNetworkParameters) DeepCopyInto(out *ManagedDatabaseRedisNetworkParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisNetworkParameters.
func (in *ManagedDatabaseRedisNetworkParameters) DeepCopy() *ManagedDatabaseRedisNetworkParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisNetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisNodeStatesInitParameters) DeepCopyInto(out *ManagedDatabaseRedisNodeStatesInitParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisNodeStatesInitParameters.
func (in *ManagedDatabaseRedisNodeStatesInitParameters) DeepCopy() *ManagedDatabaseRedisNodeStatesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisNodeStatesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisNodeStatesObservation) DeepCopyInto(out *ManagedDatabaseRedisNodeStatesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisNodeStatesObservation.
func (in *ManagedDatabaseRedisNodeStatesObservation) DeepCopy() *ManagedDatabaseRedisNodeStatesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisNodeStatesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisNodeStatesParameters) DeepCopyInto(out *ManagedDatabaseRedisNodeStatesParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisNodeStatesParameters.
func (in *ManagedDatabaseRedisNodeStatesParameters) DeepCopy() *ManagedDatabaseRedisNodeStatesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisNodeStatesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisObservation) DeepCopyInto(out *ManagedDatabaseRedisObservation) {
	*out = *in
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]ManagedDatabaseRedisComponentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabaseRedisNetworkObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabaseRedisNodeStatesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.PrimaryDatabase != nil {
		in, out := &in.PrimaryDatabase, &out.PrimaryDatabase
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabaseRedisPropertiesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisObservation.
func (in *ManagedDatabaseRedisObservation) DeepCopy() *ManagedDatabaseRedisObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisParameters) DeepCopyInto(out *ManagedDatabaseRedisParameters) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]ManagedDatabaseRedisNetworkParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeStates != nil {
		in, out := &in.NodeStates, &out.NodeStates
		*out = make([]ManagedDatabaseRedisNodeStatesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Powered != nil {
		in, out := &in.Powered, &out.Powered
		*out = new(bool)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make([]ManagedDatabaseRedisPropertiesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisParameters.
func (in *ManagedDatabaseRedisParameters) DeepCopy() *ManagedDatabaseRedisParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisPropertiesInitParameters) DeepCopyInto(out *ManagedDatabaseRedisPropertiesInitParameters) {
	*out = *in
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]ManagedDatabaseRedisPropertiesMigrationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.RedisACLChannelsDefault != nil {
		in, out := &in.RedisACLChannelsDefault, &out.RedisACLChannelsDefault
		*out = new(string)
		**out = **in
	}
	if in.RedisIoThreads != nil {
		in, out := &in.RedisIoThreads, &out.RedisIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.RedisLfuDecayTime != nil {
		in, out := &in.RedisLfuDecayTime, &out.RedisLfuDecayTime
		*out = new(int64)
		**out = **in
	}
	if in.RedisLfuLogFactor != nil {
		in, out := &in.RedisLfuLogFactor, &out.RedisLfuLogFactor
		*out = new(int64)
		**out = **in
	}
	if in.RedisMaxmemoryPolicy != nil {
		in, out := &in.RedisMaxmemoryPolicy, &out.RedisMaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.RedisNotifyKeyspaceEvents != nil {
		in, out := &in.RedisNotifyKeyspaceEvents, &out.RedisNotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	if in.RedisNumberOfDatabases != nil {
		in, out := &in.RedisNumberOfDatabases, &out.RedisNumberOfDatabases
		*out = new(int64)
		**out = **in
	}
	if in.RedisPersistence != nil {
		in, out := &in.RedisPersistence, &out.RedisPersistence
		*out = new(string)
		**out = **in
	}
	if in.RedisPubsubClientOutputBufferLimit != nil {
		in, out := &in.RedisPubsubClientOutputBufferLimit, &out.RedisPubsubClientOutputBufferLimit
		*out = new(int64)
		**out = **in
	}
	if in.RedisSSL != nil {
		in, out := &in.RedisSSL, &out.RedisSSL
		*out = new(bool)
		**out = **in
	}
	if in.RedisTimeout != nil {
		in, out := &in.RedisTimeout, &out.RedisTimeout
		*out = new(int64)
		**out = **in
	}
	if in.RedisVersion != nil {
		in, out := &in.RedisVersion, &out.RedisVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisPropertiesInitParameters.
func (in *ManagedDatabaseRedisPropertiesInitParameters) DeepCopy() *ManagedDatabaseRedisPropertiesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisPropertiesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisPropertiesMigrationInitParameters) DeepCopyInto(out *ManagedDatabaseRedisPropertiesMigrationInitParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisPropertiesMigrationInitParameters.
func (in *ManagedDatabaseRedisPropertiesMigrationInitParameters) DeepCopy() *ManagedDatabaseRedisPropertiesMigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisPropertiesMigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisPropertiesMigrationObservation) DeepCopyInto(out *ManagedDatabaseRedisPropertiesMigrationObservation) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisPropertiesMigrationObservation.
func (in *ManagedDatabaseRedisPropertiesMigrationObservation) DeepCopy() *ManagedDatabaseRedisPropertiesMigrationObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisPropertiesMigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisPropertiesMigrationParameters) DeepCopyInto(out *ManagedDatabaseRedisPropertiesMigrationParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisPropertiesMigrationParameters.
func (in *ManagedDatabaseRedisPropertiesMigrationParameters) DeepCopy() *ManagedDatabaseRedisPropertiesMigrationParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisPropertiesMigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisPropertiesObservation) DeepCopyInto(out *ManagedDatabaseRedisPropertiesObservation) {
	*out = *in
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]ManagedDatabaseRedisPropertiesMigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.RedisACLChannelsDefault != nil {
		in, out := &in.RedisACLChannelsDefault, &out.RedisACLChannelsDefault
		*out = new(string)
		**out = **in
	}
	if in.RedisIoThreads != nil {
		in, out := &in.RedisIoThreads, &out.RedisIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.RedisLfuDecayTime != nil {
		in, out := &in.RedisLfuDecayTime, &out.RedisLfuDecayTime
		*out = new(int64)
		**out = **in
	}
	if in.RedisLfuLogFactor != nil {
		in, out := &in.RedisLfuLogFactor, &out.RedisLfuLogFactor
		*out = new(int64)
		**out = **in
	}
	if in.RedisMaxmemoryPolicy != nil {
		in, out := &in.RedisMaxmemoryPolicy, &out.RedisMaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.RedisNotifyKeyspaceEvents != nil {
		in, out := &in.RedisNotifyKeyspaceEvents, &out.RedisNotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	if in.RedisNumberOfDatabases != nil {
		in, out := &in.RedisNumberOfDatabases, &out.RedisNumberOfDatabases
		*out = new(int64)
		**out = **in
	}
	if in.RedisPersistence != nil {
		in, out := &in.RedisPersistence, &out.RedisPersistence
		*out = new(string)
		**out = **in
	}
	if in.RedisPubsubClientOutputBufferLimit != nil {
		in, out := &in.RedisPubsubClientOutputBufferLimit, &out.RedisPubsubClientOutputBufferLimit
		*out = new(int64)
		**out = **in
	}
	if in.RedisSSL != nil {
		in, out := &in.RedisSSL, &out.RedisSSL
		*out = new(bool)
		**out = **in
	}
	if in.RedisTimeout != nil {
		in, out := &in.RedisTimeout, &out.RedisTimeout
		*out = new(int64)
		**out = **in
	}
	if in.RedisVersion != nil {
		in, out := &in.RedisVersion, &out.RedisVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisPropertiesObservation.
func (in *ManagedDatabaseRedisPropertiesObservation) DeepCopy() *ManagedDatabaseRedisPropertiesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisPropertiesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisPropertiesParameters) DeepCopyInto(out *ManagedDatabaseRedisPropertiesParameters) {
	*out = *in
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]ManagedDatabaseRedisPropertiesMigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.RedisACLChannelsDefault != nil {
		in, out := &in.RedisACLChannelsDefault, &out.RedisACLChannelsDefault
		*out = new(string)
		**out = **in
	}
	if in.RedisIoThreads != nil {
		in, out := &in.RedisIoThreads, &out.RedisIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.RedisLfuDecayTime != nil {
		in, out := &in.RedisLfuDecayTime, &out.RedisLfuDecayTime
		*out = new(int64)
		**out = **in
	}
	if in.RedisLfuLogFactor != nil {
		in, out := &in.RedisLfuLogFactor, &out.RedisLfuLogFactor
		*out = new(int64)
		**out = **in
	}
	if in.RedisMaxmemoryPolicy != nil {
		in, out := &in.RedisMaxmemoryPolicy, &out.RedisMaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.RedisNotifyKeyspaceEvents != nil {
		in, out := &in.RedisNotifyKeyspaceEvents, &out.RedisNotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	if in.RedisNumberOfDatabases != nil {
		in, out := &in.RedisNumberOfDatabases, &out.RedisNumberOfDatabases
		*out = new(int64)
		**out = **in
	}
	if in.RedisPersistence != nil {
		in, out := &in.RedisPersistence, &out.RedisPersistence
		*out = new(string)
		**out = **in
	}
	if in.RedisPubsubClientOutputBufferLimit != nil {
		in, out := &in.RedisPubsubClientOutputBufferLimit, &out.RedisPubsubClientOutputBufferLimit
		*out = new(int64)
		**out = **in
	}
	if in.RedisSSL != nil {
		in, out := &in.RedisSSL, &out.RedisSSL
		*out = new(bool)
		**out = **in
	}
	if in.RedisTimeout != nil {
		in, out := &in.RedisTimeout, &out.RedisTimeout
		*out = new(int64)
		**out = **in
	}
	if in.RedisVersion != nil {
		in, out := &in.RedisVersion, &out.RedisVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisPropertiesParameters.
func (in *ManagedDatabaseRedisPropertiesParameters) DeepCopy() *ManagedDatabaseRedisPropertiesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisPropertiesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisSpec) DeepCopyInto(out *ManagedDatabaseRedisSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisSpec.
func (in *ManagedDatabaseRedisSpec) DeepCopy() *ManagedDatabaseRedisSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseRedisStatus) DeepCopyInto(out *ManagedDatabaseRedisStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseRedisStatus.
func (in *ManagedDatabaseRedisStatus) DeepCopy() *ManagedDatabaseRedisStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseRedisStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUser) DeepCopyInto(out *ManagedDatabaseUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUser.
func (in *ManagedDatabaseUser) DeepCopy() *ManagedDatabaseUser {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUserInitParameters) DeepCopyInto(out *ManagedDatabaseUserInitParameters) {
	*out = *in
	if in.Authentication != nil {
		in, out := &in.Authentication, &out.Authentication
		*out = new(string)
		**out = **in
	}
	if in.OpensearchAccessControl != nil {
		in, out := &in.OpensearchAccessControl, &out.OpensearchAccessControl
		*out = make([]OpensearchAccessControlInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PgAccessControl != nil {
		in, out := &in.PgAccessControl, &out.PgAccessControl
		*out = make([]PgAccessControlInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisAccessControl != nil {
		in, out := &in.RedisAccessControl, &out.RedisAccessControl
		*out = make([]RedisAccessControlInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUserInitParameters.
func (in *ManagedDatabaseUserInitParameters) DeepCopy() *ManagedDatabaseUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUserList) DeepCopyInto(out *ManagedDatabaseUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedDatabaseUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUserList.
func (in *ManagedDatabaseUserList) DeepCopy() *ManagedDatabaseUserList {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedDatabaseUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUserObservation) DeepCopyInto(out *ManagedDatabaseUserObservation) {
	*out = *in
	if in.Authentication != nil {
		in, out := &in.Authentication, &out.Authentication
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.OpensearchAccessControl != nil {
		in, out := &in.OpensearchAccessControl, &out.OpensearchAccessControl
		*out = make([]OpensearchAccessControlObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PgAccessControl != nil {
		in, out := &in.PgAccessControl, &out.PgAccessControl
		*out = make([]PgAccessControlObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisAccessControl != nil {
		in, out := &in.RedisAccessControl, &out.RedisAccessControl
		*out = make([]RedisAccessControlObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUserObservation.
func (in *ManagedDatabaseUserObservation) DeepCopy() *ManagedDatabaseUserObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUserParameters) DeepCopyInto(out *ManagedDatabaseUserParameters) {
	*out = *in
	if in.Authentication != nil {
		in, out := &in.Authentication, &out.Authentication
		*out = new(string)
		**out = **in
	}
	if in.OpensearchAccessControl != nil {
		in, out := &in.OpensearchAccessControl, &out.OpensearchAccessControl
		*out = make([]OpensearchAccessControlParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PgAccessControl != nil {
		in, out := &in.PgAccessControl, &out.PgAccessControl
		*out = make([]PgAccessControlParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisAccessControl != nil {
		in, out := &in.RedisAccessControl, &out.RedisAccessControl
		*out = make([]RedisAccessControlParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
	if in.ServiceRef != nil {
		in, out := &in.ServiceRef, &out.ServiceRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceSelector != nil {
		in, out := &in.ServiceSelector, &out.ServiceSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUserParameters.
func (in *ManagedDatabaseUserParameters) DeepCopy() *ManagedDatabaseUserParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUserSpec) DeepCopyInto(out *ManagedDatabaseUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUserSpec.
func (in *ManagedDatabaseUserSpec) DeepCopy() *ManagedDatabaseUserSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedDatabaseUserStatus) DeepCopyInto(out *ManagedDatabaseUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedDatabaseUserStatus.
func (in *ManagedDatabaseUserStatus) DeepCopy() *ManagedDatabaseUserStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedDatabaseUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationInitParameters) DeepCopyInto(out *MigrationInitParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationInitParameters.
func (in *MigrationInitParameters) DeepCopy() *MigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(MigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationObservation) DeepCopyInto(out *MigrationObservation) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationObservation.
func (in *MigrationObservation) DeepCopy() *MigrationObservation {
	if in == nil {
		return nil
	}
	out := new(MigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationParameters) DeepCopyInto(out *MigrationParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationParameters.
func (in *MigrationParameters) DeepCopy() *MigrationParameters {
	if in == nil {
		return nil
	}
	out := new(MigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkInitParameters) DeepCopyInto(out *NetworkInitParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkInitParameters.
func (in *NetworkInitParameters) DeepCopy() *NetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkObservation) DeepCopyInto(out *NetworkObservation) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkObservation.
func (in *NetworkObservation) DeepCopy() *NetworkObservation {
	if in == nil {
		return nil
	}
	out := new(NetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkParameters) DeepCopyInto(out *NetworkParameters) {
	*out = *in
	if in.Family != nil {
		in, out := &in.Family, &out.Family
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UUIDRef != nil {
		in, out := &in.UUIDRef, &out.UUIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UUIDSelector != nil {
		in, out := &in.UUIDSelector, &out.UUIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkParameters.
func (in *NetworkParameters) DeepCopy() *NetworkParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeStatesInitParameters) DeepCopyInto(out *NodeStatesInitParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeStatesInitParameters.
func (in *NodeStatesInitParameters) DeepCopy() *NodeStatesInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeStatesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeStatesObservation) DeepCopyInto(out *NodeStatesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeStatesObservation.
func (in *NodeStatesObservation) DeepCopy() *NodeStatesObservation {
	if in == nil {
		return nil
	}
	out := new(NodeStatesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeStatesParameters) DeepCopyInto(out *NodeStatesParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeStatesParameters.
func (in *NodeStatesParameters) DeepCopy() *NodeStatesParameters {
	if in == nil {
		return nil
	}
	out := new(NodeStatesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIDInitParameters) DeepCopyInto(out *OpenIDInitParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecret != nil {
		in, out := &in.ClientSecret, &out.ClientSecret
		*out = new(string)
		**out = **in
	}
	if in.ConnectURL != nil {
		in, out := &in.ConnectURL, &out.ConnectURL
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	if in.JwtHeader != nil {
		in, out := &in.JwtHeader, &out.JwtHeader
		*out = new(string)
		**out = **in
	}
	if in.JwtURLParameter != nil {
		in, out := &in.JwtURLParameter, &out.JwtURLParameter
		*out = new(string)
		**out = **in
	}
	if in.RefreshRateLimitCount != nil {
		in, out := &in.RefreshRateLimitCount, &out.RefreshRateLimitCount
		*out = new(int64)
		**out = **in
	}
	if in.RefreshRateLimitTimeWindowMs != nil {
		in, out := &in.RefreshRateLimitTimeWindowMs, &out.RefreshRateLimitTimeWindowMs
		*out = new(int64)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIDInitParameters.
func (in *OpenIDInitParameters) DeepCopy() *OpenIDInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpenIDInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIDObservation) DeepCopyInto(out *OpenIDObservation) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecret != nil {
		in, out := &in.ClientSecret, &out.ClientSecret
		*out = new(string)
		**out = **in
	}
	if in.ConnectURL != nil {
		in, out := &in.ConnectURL, &out.ConnectURL
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	if in.JwtHeader != nil {
		in, out := &in.JwtHeader, &out.JwtHeader
		*out = new(string)
		**out = **in
	}
	if in.JwtURLParameter != nil {
		in, out := &in.JwtURLParameter, &out.JwtURLParameter
		*out = new(string)
		**out = **in
	}
	if in.RefreshRateLimitCount != nil {
		in, out := &in.RefreshRateLimitCount, &out.RefreshRateLimitCount
		*out = new(int64)
		**out = **in
	}
	if in.RefreshRateLimitTimeWindowMs != nil {
		in, out := &in.RefreshRateLimitTimeWindowMs, &out.RefreshRateLimitTimeWindowMs
		*out = new(int64)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIDObservation.
func (in *OpenIDObservation) DeepCopy() *OpenIDObservation {
	if in == nil {
		return nil
	}
	out := new(OpenIDObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIDParameters) DeepCopyInto(out *OpenIDParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecret != nil {
		in, out := &in.ClientSecret, &out.ClientSecret
		*out = new(string)
		**out = **in
	}
	if in.ConnectURL != nil {
		in, out := &in.ConnectURL, &out.ConnectURL
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(string)
		**out = **in
	}
	if in.JwtHeader != nil {
		in, out := &in.JwtHeader, &out.JwtHeader
		*out = new(string)
		**out = **in
	}
	if in.JwtURLParameter != nil {
		in, out := &in.JwtURLParameter, &out.JwtURLParameter
		*out = new(string)
		**out = **in
	}
	if in.RefreshRateLimitCount != nil {
		in, out := &in.RefreshRateLimitCount, &out.RefreshRateLimitCount
		*out = new(int64)
		**out = **in
	}
	if in.RefreshRateLimitTimeWindowMs != nil {
		in, out := &in.RefreshRateLimitTimeWindowMs, &out.RefreshRateLimitTimeWindowMs
		*out = new(int64)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIDParameters.
func (in *OpenIDParameters) DeepCopy() *OpenIDParameters {
	if in == nil {
		return nil
	}
	out := new(OpenIDParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchAccessControlInitParameters) DeepCopyInto(out *OpensearchAccessControlInitParameters) {
	*out = *in
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchAccessControlInitParameters.
func (in *OpensearchAccessControlInitParameters) DeepCopy() *OpensearchAccessControlInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchAccessControlInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchAccessControlObservation) DeepCopyInto(out *OpensearchAccessControlObservation) {
	*out = *in
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchAccessControlObservation.
func (in *OpensearchAccessControlObservation) DeepCopy() *OpensearchAccessControlObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchAccessControlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchAccessControlParameters) DeepCopyInto(out *OpensearchAccessControlParameters) {
	*out = *in
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchAccessControlParameters.
func (in *OpensearchAccessControlParameters) DeepCopy() *OpensearchAccessControlParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchAccessControlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchDashboardsInitParameters) DeepCopyInto(out *OpensearchDashboardsInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxOldSpaceSize != nil {
		in, out := &in.MaxOldSpaceSize, &out.MaxOldSpaceSize
		*out = new(int64)
		**out = **in
	}
	if in.OpensearchRequestTimeout != nil {
		in, out := &in.OpensearchRequestTimeout, &out.OpensearchRequestTimeout
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchDashboardsInitParameters.
func (in *OpensearchDashboardsInitParameters) DeepCopy() *OpensearchDashboardsInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchDashboardsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchDashboardsObservation) DeepCopyInto(out *OpensearchDashboardsObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxOldSpaceSize != nil {
		in, out := &in.MaxOldSpaceSize, &out.MaxOldSpaceSize
		*out = new(int64)
		**out = **in
	}
	if in.OpensearchRequestTimeout != nil {
		in, out := &in.OpensearchRequestTimeout, &out.OpensearchRequestTimeout
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchDashboardsObservation.
func (in *OpensearchDashboardsObservation) DeepCopy() *OpensearchDashboardsObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchDashboardsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchDashboardsParameters) DeepCopyInto(out *OpensearchDashboardsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxOldSpaceSize != nil {
		in, out := &in.MaxOldSpaceSize, &out.MaxOldSpaceSize
		*out = new(int64)
		**out = **in
	}
	if in.OpensearchRequestTimeout != nil {
		in, out := &in.OpensearchRequestTimeout, &out.OpensearchRequestTimeout
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchDashboardsParameters.
func (in *OpensearchDashboardsParameters) DeepCopy() *OpensearchDashboardsParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchDashboardsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PgAccessControlInitParameters) DeepCopyInto(out *PgAccessControlInitParameters) {
	*out = *in
	if in.AllowReplication != nil {
		in, out := &in.AllowReplication, &out.AllowReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PgAccessControlInitParameters.
func (in *PgAccessControlInitParameters) DeepCopy() *PgAccessControlInitParameters {
	if in == nil {
		return nil
	}
	out := new(PgAccessControlInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PgAccessControlObservation) DeepCopyInto(out *PgAccessControlObservation) {
	*out = *in
	if in.AllowReplication != nil {
		in, out := &in.AllowReplication, &out.AllowReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PgAccessControlObservation.
func (in *PgAccessControlObservation) DeepCopy() *PgAccessControlObservation {
	if in == nil {
		return nil
	}
	out := new(PgAccessControlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PgAccessControlParameters) DeepCopyInto(out *PgAccessControlParameters) {
	*out = *in
	if in.AllowReplication != nil {
		in, out := &in.AllowReplication, &out.AllowReplication
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PgAccessControlParameters.
func (in *PgAccessControlParameters) DeepCopy() *PgAccessControlParameters {
	if in == nil {
		return nil
	}
	out := new(PgAccessControlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PgbouncerInitParameters) DeepCopyInto(out *PgbouncerInitParameters) {
	*out = *in
	if in.AutodbIdleTimeout != nil {
		in, out := &in.AutodbIdleTimeout, &out.AutodbIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.AutodbMaxDBConnections != nil {
		in, out := &in.AutodbMaxDBConnections, &out.AutodbMaxDBConnections
		*out = new(int64)
		**out = **in
	}
	if in.AutodbPoolMode != nil {
		in, out := &in.AutodbPoolMode, &out.AutodbPoolMode
		*out = new(string)
		**out = **in
	}
	if in.AutodbPoolSize != nil {
		in, out := &in.AutodbPoolSize, &out.AutodbPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.IgnoreStartupParameters != nil {
		in, out := &in.IgnoreStartupParameters, &out.IgnoreStartupParameters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxPreparedStatements != nil {
		in, out := &in.MaxPreparedStatements, &out.MaxPreparedStatements
		*out = new(int64)
		**out = **in
	}
	if in.MinPoolSize != nil {
		in, out := &in.MinPoolSize, &out.MinPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.ServerIdleTimeout != nil {
		in, out := &in.ServerIdleTimeout, &out.ServerIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.ServerLifetime != nil {
		in, out := &in.ServerLifetime, &out.ServerLifetime
		*out = new(int64)
		**out = **in
	}
	if in.ServerResetQueryAlways != nil {
		in, out := &in.ServerResetQueryAlways, &out.ServerResetQueryAlways
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PgbouncerInitParameters.
func (in *PgbouncerInitParameters) DeepCopy() *PgbouncerInitParameters {
	if in == nil {
		return nil
	}
	out := new(PgbouncerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PgbouncerObservation) DeepCopyInto(out *PgbouncerObservation) {
	*out = *in
	if in.AutodbIdleTimeout != nil {
		in, out := &in.AutodbIdleTimeout, &out.AutodbIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.AutodbMaxDBConnections != nil {
		in, out := &in.AutodbMaxDBConnections, &out.AutodbMaxDBConnections
		*out = new(int64)
		**out = **in
	}
	if in.AutodbPoolMode != nil {
		in, out := &in.AutodbPoolMode, &out.AutodbPoolMode
		*out = new(string)
		**out = **in
	}
	if in.AutodbPoolSize != nil {
		in, out := &in.AutodbPoolSize, &out.AutodbPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.IgnoreStartupParameters != nil {
		in, out := &in.IgnoreStartupParameters, &out.IgnoreStartupParameters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxPreparedStatements != nil {
		in, out := &in.MaxPreparedStatements, &out.MaxPreparedStatements
		*out = new(int64)
		**out = **in
	}
	if in.MinPoolSize != nil {
		in, out := &in.MinPoolSize, &out.MinPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.ServerIdleTimeout != nil {
		in, out := &in.ServerIdleTimeout, &out.ServerIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.ServerLifetime != nil {
		in, out := &in.ServerLifetime, &out.ServerLifetime
		*out = new(int64)
		**out = **in
	}
	if in.ServerResetQueryAlways != nil {
		in, out := &in.ServerResetQueryAlways, &out.ServerResetQueryAlways
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PgbouncerObservation.
func (in *PgbouncerObservation) DeepCopy() *PgbouncerObservation {
	if in == nil {
		return nil
	}
	out := new(PgbouncerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PgbouncerParameters) DeepCopyInto(out *PgbouncerParameters) {
	*out = *in
	if in.AutodbIdleTimeout != nil {
		in, out := &in.AutodbIdleTimeout, &out.AutodbIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.AutodbMaxDBConnections != nil {
		in, out := &in.AutodbMaxDBConnections, &out.AutodbMaxDBConnections
		*out = new(int64)
		**out = **in
	}
	if in.AutodbPoolMode != nil {
		in, out := &in.AutodbPoolMode, &out.AutodbPoolMode
		*out = new(string)
		**out = **in
	}
	if in.AutodbPoolSize != nil {
		in, out := &in.AutodbPoolSize, &out.AutodbPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.IgnoreStartupParameters != nil {
		in, out := &in.IgnoreStartupParameters, &out.IgnoreStartupParameters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxPreparedStatements != nil {
		in, out := &in.MaxPreparedStatements, &out.MaxPreparedStatements
		*out = new(int64)
		**out = **in
	}
	if in.MinPoolSize != nil {
		in, out := &in.MinPoolSize, &out.MinPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.ServerIdleTimeout != nil {
		in, out := &in.ServerIdleTimeout, &out.ServerIdleTimeout
		*out = new(int64)
		**out = **in
	}
	if in.ServerLifetime != nil {
		in, out := &in.ServerLifetime, &out.ServerLifetime
		*out = new(int64)
		**out = **in
	}
	if in.ServerResetQueryAlways != nil {
		in, out := &in.ServerResetQueryAlways, &out.ServerResetQueryAlways
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PgbouncerParameters.
func (in *PgbouncerParameters) DeepCopy() *PgbouncerParameters {
	if in == nil {
		return nil
	}
	out := new(PgbouncerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PglookoutInitParameters) DeepCopyInto(out *PglookoutInitParameters) {
	*out = *in
	if in.MaxFailoverReplicationTimeLag != nil {
		in, out := &in.MaxFailoverReplicationTimeLag, &out.MaxFailoverReplicationTimeLag
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PglookoutInitParameters.
func (in *PglookoutInitParameters) DeepCopy() *PglookoutInitParameters {
	if in == nil {
		return nil
	}
	out := new(PglookoutInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PglookoutObservation) DeepCopyInto(out *PglookoutObservation) {
	*out = *in
	if in.MaxFailoverReplicationTimeLag != nil {
		in, out := &in.MaxFailoverReplicationTimeLag, &out.MaxFailoverReplicationTimeLag
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PglookoutObservation.
func (in *PglookoutObservation) DeepCopy() *PglookoutObservation {
	if in == nil {
		return nil
	}
	out := new(PglookoutObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PglookoutParameters) DeepCopyInto(out *PglookoutParameters) {
	*out = *in
	if in.MaxFailoverReplicationTimeLag != nil {
		in, out := &in.MaxFailoverReplicationTimeLag, &out.MaxFailoverReplicationTimeLag
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PglookoutParameters.
func (in *PglookoutParameters) DeepCopy() *PglookoutParameters {
	if in == nil {
		return nil
	}
	out := new(PglookoutParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertiesInitParameters) DeepCopyInto(out *PropertiesInitParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BinlogRetentionPeriod != nil {
		in, out := &in.BinlogRetentionPeriod, &out.BinlogRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.GroupConcatMaxLen != nil {
		in, out := &in.GroupConcatMaxLen, &out.GroupConcatMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InformationSchemaStatsExpiry != nil {
		in, out := &in.InformationSchemaStatsExpiry, &out.InformationSchemaStatsExpiry
		*out = new(int64)
		**out = **in
	}
	if in.InnodbChangeBufferMaxSize != nil {
		in, out := &in.InnodbChangeBufferMaxSize, &out.InnodbChangeBufferMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFlushNeighbors != nil {
		in, out := &in.InnodbFlushNeighbors, &out.InnodbFlushNeighbors
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtMinTokenSize != nil {
		in, out := &in.InnodbFtMinTokenSize, &out.InnodbFtMinTokenSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtServerStopwordTable != nil {
		in, out := &in.InnodbFtServerStopwordTable, &out.InnodbFtServerStopwordTable
		*out = new(string)
		**out = **in
	}
	if in.InnodbLockWaitTimeout != nil {
		in, out := &in.InnodbLockWaitTimeout, &out.InnodbLockWaitTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InnodbLogBufferSize != nil {
		in, out := &in.InnodbLogBufferSize, &out.InnodbLogBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbOnlineAlterLogMaxSize != nil {
		in, out := &in.InnodbOnlineAlterLogMaxSize, &out.InnodbOnlineAlterLogMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbPrintAllDeadlocks != nil {
		in, out := &in.InnodbPrintAllDeadlocks, &out.InnodbPrintAllDeadlocks
		*out = new(bool)
		**out = **in
	}
	if in.InnodbReadIoThreads != nil {
		in, out := &in.InnodbReadIoThreads, &out.InnodbReadIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.InnodbRollbackOnTimeout != nil {
		in, out := &in.InnodbRollbackOnTimeout, &out.InnodbRollbackOnTimeout
		*out = new(bool)
		**out = **in
	}
	if in.InnodbThreadConcurrency != nil {
		in, out := &in.InnodbThreadConcurrency, &out.InnodbThreadConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.InnodbWriteIoThreads != nil {
		in, out := &in.InnodbWriteIoThreads, &out.InnodbWriteIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.InteractiveTimeout != nil {
		in, out := &in.InteractiveTimeout, &out.InteractiveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InternalTmpMemStorageEngine != nil {
		in, out := &in.InternalTmpMemStorageEngine, &out.InternalTmpMemStorageEngine
		*out = new(string)
		**out = **in
	}
	if in.LongQueryTime != nil {
		in, out := &in.LongQueryTime, &out.LongQueryTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxAllowedPacket != nil {
		in, out := &in.MaxAllowedPacket, &out.MaxAllowedPacket
		*out = new(int64)
		**out = **in
	}
	if in.MaxHeapTableSize != nil {
		in, out := &in.MaxHeapTableSize, &out.MaxHeapTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]MigrationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetBufferLength != nil {
		in, out := &in.NetBufferLength, &out.NetBufferLength
		*out = new(int64)
		**out = **in
	}
	if in.NetReadTimeout != nil {
		in, out := &in.NetReadTimeout, &out.NetReadTimeout
		*out = new(int64)
		**out = **in
	}
	if in.NetWriteTimeout != nil {
		in, out := &in.NetWriteTimeout, &out.NetWriteTimeout
		*out = new(int64)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.SQLMode != nil {
		in, out := &in.SQLMode, &out.SQLMode
		*out = new(string)
		**out = **in
	}
	if in.SQLRequirePrimaryKey != nil {
		in, out := &in.SQLRequirePrimaryKey, &out.SQLRequirePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.SlowQueryLog != nil {
		in, out := &in.SlowQueryLog, &out.SlowQueryLog
		*out = new(bool)
		**out = **in
	}
	if in.SortBufferSize != nil {
		in, out := &in.SortBufferSize, &out.SortBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.TmpTableSize != nil {
		in, out := &in.TmpTableSize, &out.TmpTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WaitTimeout != nil {
		in, out := &in.WaitTimeout, &out.WaitTimeout
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertiesInitParameters.
func (in *PropertiesInitParameters) DeepCopy() *PropertiesInitParameters {
	if in == nil {
		return nil
	}
	out := new(PropertiesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertiesMigrationInitParameters) DeepCopyInto(out *PropertiesMigrationInitParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertiesMigrationInitParameters.
func (in *PropertiesMigrationInitParameters) DeepCopy() *PropertiesMigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(PropertiesMigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertiesMigrationObservation) DeepCopyInto(out *PropertiesMigrationObservation) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertiesMigrationObservation.
func (in *PropertiesMigrationObservation) DeepCopy() *PropertiesMigrationObservation {
	if in == nil {
		return nil
	}
	out := new(PropertiesMigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertiesMigrationParameters) DeepCopyInto(out *PropertiesMigrationParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.IgnoreRoles != nil {
		in, out := &in.IgnoreRoles, &out.IgnoreRoles
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertiesMigrationParameters.
func (in *PropertiesMigrationParameters) DeepCopy() *PropertiesMigrationParameters {
	if in == nil {
		return nil
	}
	out := new(PropertiesMigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertiesObservation) DeepCopyInto(out *PropertiesObservation) {
	*out = *in
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BinlogRetentionPeriod != nil {
		in, out := &in.BinlogRetentionPeriod, &out.BinlogRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.GroupConcatMaxLen != nil {
		in, out := &in.GroupConcatMaxLen, &out.GroupConcatMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InformationSchemaStatsExpiry != nil {
		in, out := &in.InformationSchemaStatsExpiry, &out.InformationSchemaStatsExpiry
		*out = new(int64)
		**out = **in
	}
	if in.InnodbChangeBufferMaxSize != nil {
		in, out := &in.InnodbChangeBufferMaxSize, &out.InnodbChangeBufferMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFlushNeighbors != nil {
		in, out := &in.InnodbFlushNeighbors, &out.InnodbFlushNeighbors
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtMinTokenSize != nil {
		in, out := &in.InnodbFtMinTokenSize, &out.InnodbFtMinTokenSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtServerStopwordTable != nil {
		in, out := &in.InnodbFtServerStopwordTable, &out.InnodbFtServerStopwordTable
		*out = new(string)
		**out = **in
	}
	if in.InnodbLockWaitTimeout != nil {
		in, out := &in.InnodbLockWaitTimeout, &out.InnodbLockWaitTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InnodbLogBufferSize != nil {
		in, out := &in.InnodbLogBufferSize, &out.InnodbLogBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbOnlineAlterLogMaxSize != nil {
		in, out := &in.InnodbOnlineAlterLogMaxSize, &out.InnodbOnlineAlterLogMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbPrintAllDeadlocks != nil {
		in, out := &in.InnodbPrintAllDeadlocks, &out.InnodbPrintAllDeadlocks
		*out = new(bool)
		**out = **in
	}
	if in.InnodbReadIoThreads != nil {
		in, out := &in.InnodbReadIoThreads, &out.InnodbReadIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.InnodbRollbackOnTimeout != nil {
		in, out := &in.InnodbRollbackOnTimeout, &out.InnodbRollbackOnTimeout
		*out = new(bool)
		**out = **in
	}
	if in.InnodbThreadConcurrency != nil {
		in, out := &in.InnodbThreadConcurrency, &out.InnodbThreadConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.InnodbWriteIoThreads != nil {
		in, out := &in.InnodbWriteIoThreads, &out.InnodbWriteIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.InteractiveTimeout != nil {
		in, out := &in.InteractiveTimeout, &out.InteractiveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InternalTmpMemStorageEngine != nil {
		in, out := &in.InternalTmpMemStorageEngine, &out.InternalTmpMemStorageEngine
		*out = new(string)
		**out = **in
	}
	if in.LongQueryTime != nil {
		in, out := &in.LongQueryTime, &out.LongQueryTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxAllowedPacket != nil {
		in, out := &in.MaxAllowedPacket, &out.MaxAllowedPacket
		*out = new(int64)
		**out = **in
	}
	if in.MaxHeapTableSize != nil {
		in, out := &in.MaxHeapTableSize, &out.MaxHeapTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]MigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetBufferLength != nil {
		in, out := &in.NetBufferLength, &out.NetBufferLength
		*out = new(int64)
		**out = **in
	}
	if in.NetReadTimeout != nil {
		in, out := &in.NetReadTimeout, &out.NetReadTimeout
		*out = new(int64)
		**out = **in
	}
	if in.NetWriteTimeout != nil {
		in, out := &in.NetWriteTimeout, &out.NetWriteTimeout
		*out = new(int64)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.SQLMode != nil {
		in, out := &in.SQLMode, &out.SQLMode
		*out = new(string)
		**out = **in
	}
	if in.SQLRequirePrimaryKey != nil {
		in, out := &in.SQLRequirePrimaryKey, &out.SQLRequirePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.SlowQueryLog != nil {
		in, out := &in.SlowQueryLog, &out.SlowQueryLog
		*out = new(bool)
		**out = **in
	}
	if in.SortBufferSize != nil {
		in, out := &in.SortBufferSize, &out.SortBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.TmpTableSize != nil {
		in, out := &in.TmpTableSize, &out.TmpTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WaitTimeout != nil {
		in, out := &in.WaitTimeout, &out.WaitTimeout
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertiesObservation.
func (in *PropertiesObservation) DeepCopy() *PropertiesObservation {
	if in == nil {
		return nil
	}
	out := new(PropertiesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertiesParameters) DeepCopyInto(out *PropertiesParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.AutomaticUtilityNetworkIPFilter != nil {
		in, out := &in.AutomaticUtilityNetworkIPFilter, &out.AutomaticUtilityNetworkIPFilter
		*out = new(bool)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(int64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(int64)
		**out = **in
	}
	if in.BinlogRetentionPeriod != nil {
		in, out := &in.BinlogRetentionPeriod, &out.BinlogRetentionPeriod
		*out = new(int64)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.GroupConcatMaxLen != nil {
		in, out := &in.GroupConcatMaxLen, &out.GroupConcatMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InformationSchemaStatsExpiry != nil {
		in, out := &in.InformationSchemaStatsExpiry, &out.InformationSchemaStatsExpiry
		*out = new(int64)
		**out = **in
	}
	if in.InnodbChangeBufferMaxSize != nil {
		in, out := &in.InnodbChangeBufferMaxSize, &out.InnodbChangeBufferMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFlushNeighbors != nil {
		in, out := &in.InnodbFlushNeighbors, &out.InnodbFlushNeighbors
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtMinTokenSize != nil {
		in, out := &in.InnodbFtMinTokenSize, &out.InnodbFtMinTokenSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbFtServerStopwordTable != nil {
		in, out := &in.InnodbFtServerStopwordTable, &out.InnodbFtServerStopwordTable
		*out = new(string)
		**out = **in
	}
	if in.InnodbLockWaitTimeout != nil {
		in, out := &in.InnodbLockWaitTimeout, &out.InnodbLockWaitTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InnodbLogBufferSize != nil {
		in, out := &in.InnodbLogBufferSize, &out.InnodbLogBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbOnlineAlterLogMaxSize != nil {
		in, out := &in.InnodbOnlineAlterLogMaxSize, &out.InnodbOnlineAlterLogMaxSize
		*out = new(int64)
		**out = **in
	}
	if in.InnodbPrintAllDeadlocks != nil {
		in, out := &in.InnodbPrintAllDeadlocks, &out.InnodbPrintAllDeadlocks
		*out = new(bool)
		**out = **in
	}
	if in.InnodbReadIoThreads != nil {
		in, out := &in.InnodbReadIoThreads, &out.InnodbReadIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.InnodbRollbackOnTimeout != nil {
		in, out := &in.InnodbRollbackOnTimeout, &out.InnodbRollbackOnTimeout
		*out = new(bool)
		**out = **in
	}
	if in.InnodbThreadConcurrency != nil {
		in, out := &in.InnodbThreadConcurrency, &out.InnodbThreadConcurrency
		*out = new(int64)
		**out = **in
	}
	if in.InnodbWriteIoThreads != nil {
		in, out := &in.InnodbWriteIoThreads, &out.InnodbWriteIoThreads
		*out = new(int64)
		**out = **in
	}
	if in.InteractiveTimeout != nil {
		in, out := &in.InteractiveTimeout, &out.InteractiveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InternalTmpMemStorageEngine != nil {
		in, out := &in.InternalTmpMemStorageEngine, &out.InternalTmpMemStorageEngine
		*out = new(string)
		**out = **in
	}
	if in.LongQueryTime != nil {
		in, out := &in.LongQueryTime, &out.LongQueryTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxAllowedPacket != nil {
		in, out := &in.MaxAllowedPacket, &out.MaxAllowedPacket
		*out = new(int64)
		**out = **in
	}
	if in.MaxHeapTableSize != nil {
		in, out := &in.MaxHeapTableSize, &out.MaxHeapTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]MigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetBufferLength != nil {
		in, out := &in.NetBufferLength, &out.NetBufferLength
		*out = new(int64)
		**out = **in
	}
	if in.NetReadTimeout != nil {
		in, out := &in.NetReadTimeout, &out.NetReadTimeout
		*out = new(int64)
		**out = **in
	}
	if in.NetWriteTimeout != nil {
		in, out := &in.NetWriteTimeout, &out.NetWriteTimeout
		*out = new(int64)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = new(bool)
		**out = **in
	}
	if in.SQLMode != nil {
		in, out := &in.SQLMode, &out.SQLMode
		*out = new(string)
		**out = **in
	}
	if in.SQLRequirePrimaryKey != nil {
		in, out := &in.SQLRequirePrimaryKey, &out.SQLRequirePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.ServiceLog != nil {
		in, out := &in.ServiceLog, &out.ServiceLog
		*out = new(bool)
		**out = **in
	}
	if in.SlowQueryLog != nil {
		in, out := &in.SlowQueryLog, &out.SlowQueryLog
		*out = new(bool)
		**out = **in
	}
	if in.SortBufferSize != nil {
		in, out := &in.SortBufferSize, &out.SortBufferSize
		*out = new(int64)
		**out = **in
	}
	if in.TmpTableSize != nil {
		in, out := &in.TmpTableSize, &out.TmpTableSize
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WaitTimeout != nil {
		in, out := &in.WaitTimeout, &out.WaitTimeout
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertiesParameters.
func (in *PropertiesParameters) DeepCopy() *PropertiesParameters {
	if in == nil {
		return nil
	}
	out := new(PropertiesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisAccessControlInitParameters) DeepCopyInto(out *RedisAccessControlInitParameters) {
	*out = *in
	if in.Categories != nil {
		in, out := &in.Categories, &out.Categories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Channels != nil {
		in, out := &in.Channels, &out.Channels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Commands != nil {
		in, out := &in.Commands, &out.Commands
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisAccessControlInitParameters.
func (in *RedisAccessControlInitParameters) DeepCopy() *RedisAccessControlInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisAccessControlInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisAccessControlObservation) DeepCopyInto(out *RedisAccessControlObservation) {
	*out = *in
	if in.Categories != nil {
		in, out := &in.Categories, &out.Categories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Channels != nil {
		in, out := &in.Channels, &out.Channels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Commands != nil {
		in, out := &in.Commands, &out.Commands
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisAccessControlObservation.
func (in *RedisAccessControlObservation) DeepCopy() *RedisAccessControlObservation {
	if in == nil {
		return nil
	}
	out := new(RedisAccessControlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisAccessControlParameters) DeepCopyInto(out *RedisAccessControlParameters) {
	*out = *in
	if in.Categories != nil {
		in, out := &in.Categories, &out.Categories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Channels != nil {
		in, out := &in.Channels, &out.Channels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Commands != nil {
		in, out := &in.Commands, &out.Commands
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisAccessControlParameters.
func (in *RedisAccessControlParameters) DeepCopy() *RedisAccessControlParameters {
	if in == nil {
		return nil
	}
	out := new(RedisAccessControlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesInitParameters) DeepCopyInto(out *RulesInitParameters) {
	*out = *in
	if in.Index != nil {
		in, out := &in.Index, &out.Index
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesInitParameters.
func (in *RulesInitParameters) DeepCopy() *RulesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RulesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesObservation) DeepCopyInto(out *RulesObservation) {
	*out = *in
	if in.Index != nil {
		in, out := &in.Index, &out.Index
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesObservation.
func (in *RulesObservation) DeepCopy() *RulesObservation {
	if in == nil {
		return nil
	}
	out := new(RulesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesParameters) DeepCopyInto(out *RulesParameters) {
	*out = *in
	if in.Index != nil {
		in, out := &in.Index, &out.Index
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesParameters.
func (in *RulesParameters) DeepCopy() *RulesParameters {
	if in == nil {
		return nil
	}
	out := new(RulesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3MigrationInitParameters) DeepCopyInto(out *S3MigrationInitParameters) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.ServerSideEncryption != nil {
		in, out := &in.ServerSideEncryption, &out.ServerSideEncryption
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3MigrationInitParameters.
func (in *S3MigrationInitParameters) DeepCopy() *S3MigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(S3MigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3MigrationObservation) DeepCopyInto(out *S3MigrationObservation) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.ServerSideEncryption != nil {
		in, out := &in.ServerSideEncryption, &out.ServerSideEncryption
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3MigrationObservation.
func (in *S3MigrationObservation) DeepCopy() *S3MigrationObservation {
	if in == nil {
		return nil
	}
	out := new(S3MigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3MigrationParameters) DeepCopyInto(out *S3MigrationParameters) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.BasePath != nil {
		in, out := &in.BasePath, &out.BasePath
		*out = new(string)
		**out = **in
	}
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.ChunkSize != nil {
		in, out := &in.ChunkSize, &out.ChunkSize
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(bool)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.ServerSideEncryption != nil {
		in, out := &in.ServerSideEncryption, &out.ServerSideEncryption
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3MigrationParameters.
func (in *S3MigrationParameters) DeepCopy() *S3MigrationParameters {
	if in == nil {
		return nil
	}
	out := new(S3MigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLInitParameters) DeepCopyInto(out *SAMLInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.IdpEntityID != nil {
		in, out := &in.IdpEntityID, &out.IdpEntityID
		*out = new(string)
		**out = **in
	}
	if in.IdpMetadataURL != nil {
		in, out := &in.IdpMetadataURL, &out.IdpMetadataURL
		*out = new(string)
		**out = **in
	}
	if in.IdpPemtrustedcasContent != nil {
		in, out := &in.IdpPemtrustedcasContent, &out.IdpPemtrustedcasContent
		*out = new(string)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.SpEntityID != nil {
		in, out := &in.SpEntityID, &out.SpEntityID
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLInitParameters.
func (in *SAMLInitParameters) DeepCopy() *SAMLInitParameters {
	if in == nil {
		return nil
	}
	out := new(SAMLInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLObservation) DeepCopyInto(out *SAMLObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.IdpEntityID != nil {
		in, out := &in.IdpEntityID, &out.IdpEntityID
		*out = new(string)
		**out = **in
	}
	if in.IdpMetadataURL != nil {
		in, out := &in.IdpMetadataURL, &out.IdpMetadataURL
		*out = new(string)
		**out = **in
	}
	if in.IdpPemtrustedcasContent != nil {
		in, out := &in.IdpPemtrustedcasContent, &out.IdpPemtrustedcasContent
		*out = new(string)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.SpEntityID != nil {
		in, out := &in.SpEntityID, &out.SpEntityID
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLObservation.
func (in *SAMLObservation) DeepCopy() *SAMLObservation {
	if in == nil {
		return nil
	}
	out := new(SAMLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLParameters) DeepCopyInto(out *SAMLParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.IdpEntityID != nil {
		in, out := &in.IdpEntityID, &out.IdpEntityID
		*out = new(string)
		**out = **in
	}
	if in.IdpMetadataURL != nil {
		in, out := &in.IdpMetadataURL, &out.IdpMetadataURL
		*out = new(string)
		**out = **in
	}
	if in.IdpPemtrustedcasContent != nil {
		in, out := &in.IdpPemtrustedcasContent, &out.IdpPemtrustedcasContent
		*out = new(string)
		**out = **in
	}
	if in.RolesKey != nil {
		in, out := &in.RolesKey, &out.RolesKey
		*out = new(string)
		**out = **in
	}
	if in.SpEntityID != nil {
		in, out := &in.SpEntityID, &out.SpEntityID
		*out = new(string)
		**out = **in
	}
	if in.SubjectKey != nil {
		in, out := &in.SubjectKey, &out.SubjectKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLParameters.
func (in *SAMLParameters) DeepCopy() *SAMLParameters {
	if in == nil {
		return nil
	}
	out := new(SAMLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimescaledbInitParameters) DeepCopyInto(out *TimescaledbInitParameters) {
	*out = *in
	if in.MaxBackgroundWorkers != nil {
		in, out := &in.MaxBackgroundWorkers, &out.MaxBackgroundWorkers
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimescaledbInitParameters.
func (in *TimescaledbInitParameters) DeepCopy() *TimescaledbInitParameters {
	if in == nil {
		return nil
	}
	out := new(TimescaledbInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimescaledbObservation) DeepCopyInto(out *TimescaledbObservation) {
	*out = *in
	if in.MaxBackgroundWorkers != nil {
		in, out := &in.MaxBackgroundWorkers, &out.MaxBackgroundWorkers
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimescaledbObservation.
func (in *TimescaledbObservation) DeepCopy() *TimescaledbObservation {
	if in == nil {
		return nil
	}
	out := new(TimescaledbObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimescaledbParameters) DeepCopyInto(out *TimescaledbParameters) {
	*out = *in
	if in.MaxBackgroundWorkers != nil {
		in, out := &in.MaxBackgroundWorkers, &out.MaxBackgroundWorkers
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimescaledbParameters.
func (in *TimescaledbParameters) DeepCopy() *TimescaledbParameters {
	if in == nil {
		return nil
	}
	out := new(TimescaledbParameters)
	in.DeepCopyInto(out)
	return out
}
