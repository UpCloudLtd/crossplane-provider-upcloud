/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedDatabaseRedisComponentsInitParameters struct {
}

type ManagedDatabaseRedisComponentsObservation struct {

	// (String)
	Component *string `json:"component,omitempty" tf:"component,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String)
	Route *string `json:"route,omitempty" tf:"route,omitempty"`

	// (String)
	Usage *string `json:"usage,omitempty" tf:"usage,omitempty"`
}

type ManagedDatabaseRedisComponentsParameters struct {
}

type ManagedDatabaseRedisInitParameters struct {

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	Network []ManagedDatabaseRedisNetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (Block List, Max: 1) Database Engine properties for Redis (see below for nested schema)
	// Database Engine properties for Redis
	Properties []ManagedDatabaseRedisPropertiesInitParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabaseRedisNetworkInitParameters struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Network
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type ManagedDatabaseRedisNetworkObservation struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ManagedDatabaseRedisNetworkParameters struct {

	// (String) Network family. Currently only IPv4 is supported.
	// Network family. Currently only `IPv4` is supported.
	// +kubebuilder:validation:Optional
	Family *string `json:"family" tf:"family,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// The name of the network. Must be unique within the service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Type of the service
	// The type of the network. Must be private.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) Private network UUID. Must reside in the same zone as the database.
	// Private network UUID. Must reside in the same zone as the database.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type ManagedDatabaseRedisNodeStatesInitParameters struct {
}

type ManagedDatabaseRedisNodeStatesObservation struct {

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) State of the service
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ManagedDatabaseRedisNodeStatesParameters struct {
}

type ManagedDatabaseRedisObservation struct {

	// (List of Object) Service component information (see below for nested schema)
	// Service component information
	Components []ManagedDatabaseRedisComponentsObservation `json:"components,omitempty" tf:"components,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	Network []ManagedDatabaseRedisNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// (List of Object) Information about nodes providing the managed service (see below for nested schema)
	// Information about nodes providing the managed service
	NodeStates []ManagedDatabaseRedisNodeStatesObservation `json:"nodeStates,omitempty" tf:"node_states,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (String) Primary database name
	// Primary database name
	PrimaryDatabase *string `json:"primaryDatabase,omitempty" tf:"primary_database,omitempty"`

	// (Block List, Max: 1) Database Engine properties for Redis (see below for nested schema)
	// Database Engine properties for Redis
	Properties []ManagedDatabaseRedisPropertiesObservation `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Hostname to the service instance
	// Hostname to the service instance
	ServiceHost *string `json:"serviceHost,omitempty" tf:"service_host,omitempty"`

	// (String) Port to the service instance
	// Port to the service instance
	ServicePort *string `json:"servicePort,omitempty" tf:"service_port,omitempty"`

	// (String) Primary username to the service instance
	// Primary username to the service instance
	ServiceUsername *string `json:"serviceUsername,omitempty" tf:"service_username,omitempty"`

	// (String) State of the service
	// State of the service
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Type of the service
	// Type of the service
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabaseRedisParameters struct {

	// (String) Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	// +kubebuilder:validation:Optional
	MaintenanceWindowDow *string `json:"maintenanceWindowDow,omitempty" tf:"maintenance_window_dow,omitempty"`

	// (String) Maintenance window UTC time in hh:mm:ss format
	// Maintenance window UTC time in hh:mm:ss format
	// +kubebuilder:validation:Optional
	MaintenanceWindowTime *string `json:"maintenanceWindowTime,omitempty" tf:"maintenance_window_time,omitempty"`

	// (String) Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set, Max: 8) Private networks attached to the managed database (see below for nested schema)
	// Private networks attached to the managed database
	// +kubebuilder:validation:Optional
	Network []ManagedDatabaseRedisNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (String) Service plan to use. This determines how much resources the instance will have. You can list available plans with upctl database plans <type>.
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (Boolean) The administrative power state of the service
	// The administrative power state of the service
	// +kubebuilder:validation:Optional
	Powered *bool `json:"powered,omitempty" tf:"powered,omitempty"`

	// (Block List, Max: 1) Database Engine properties for Redis (see below for nested schema)
	// Database Engine properties for Redis
	// +kubebuilder:validation:Optional
	Properties []ManagedDatabaseRedisPropertiesParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Title of a managed database instance
	// Title of a managed database instance
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// fra1. You can list available zones with upctl zone list.
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ManagedDatabaseRedisPropertiesInitParameters struct {

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	Migration []ManagedDatabaseRedisPropertiesMigrationInitParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// pubsub-default.
	// Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
	RedisACLChannelsDefault *string `json:"redisAclChannelsDefault,omitempty" tf:"redis_acl_channels_default,omitempty"`

	// (Number) Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
	// Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
	RedisIoThreads *float64 `json:"redisIoThreads,omitempty" tf:"redis_io_threads,omitempty"`

	// policy counter decay time in minutes.
	// LFU maxmemory-policy counter decay time in minutes.
	RedisLfuDecayTime *float64 `json:"redisLfuDecayTime,omitempty" tf:"redis_lfu_decay_time,omitempty"`

	// lfu and allkeys-lfu maxmemory-policies.
	// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
	RedisLfuLogFactor *float64 `json:"redisLfuLogFactor,omitempty" tf:"redis_lfu_log_factor,omitempty"`

	// policy.
	// Redis maxmemory-policy.
	RedisMaxmemoryPolicy *string `json:"redisMaxmemoryPolicy,omitempty" tf:"redis_maxmemory_policy,omitempty"`

	// keyspace-events option.
	// Set notify-keyspace-events option.
	RedisNotifyKeyspaceEvents *string `json:"redisNotifyKeyspaceEvents,omitempty" tf:"redis_notify_keyspace_events,omitempty"`

	// (Number) Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
	// Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
	RedisNumberOfDatabases *float64 `json:"redisNumberOfDatabases,omitempty" tf:"redis_number_of_databases,omitempty"`

	// (String) Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	// Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	RedisPersistence *string `json:"redisPersistence,omitempty" tf:"redis_persistence,omitempty"`

	// (Number) Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	// Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	RedisPubsubClientOutputBufferLimit *float64 `json:"redisPubsubClientOutputBufferLimit,omitempty" tf:"redis_pubsub_client_output_buffer_limit,omitempty"`

	// (Boolean) Require SSL to access Redis.
	// Require SSL to access Redis.
	RedisSSL *bool `json:"redisSsl,omitempty" tf:"redis_ssl,omitempty"`

	// (Number) Redis idle connection timeout in seconds.
	// Redis idle connection timeout in seconds.
	RedisTimeout *float64 `json:"redisTimeout,omitempty" tf:"redis_timeout,omitempty"`

	// (String) Redis major version.
	// Redis major version.
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`
}

type ManagedDatabaseRedisPropertiesMigrationInitParameters struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ManagedDatabaseRedisPropertiesMigrationObservation struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ManagedDatabaseRedisPropertiesMigrationParameters struct {

	// (String) Database name for bootstrapping the initial connection.
	// Database name for bootstrapping the initial connection.
	// +kubebuilder:validation:Optional
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// (String) Hostname or IP address of the server where to migrate data from.
	// Hostname or IP address of the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
	// +kubebuilder:validation:Optional
	IgnoreDbs *string `json:"ignoreDbs,omitempty" tf:"ignore_dbs,omitempty"`

	// (String) The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String, Sensitive) Password for authentication with the server where to migrate data from.
	// Password for authentication with the server where to migrate data from.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port number of the server where to migrate data from.
	// Port number of the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) The server where to migrate data from is secured with SSL.
	// The server where to migrate data from is secured with SSL.
	// +kubebuilder:validation:Optional
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) User name for authentication with the server where to migrate data from.
	// User name for authentication with the server where to migrate data from.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ManagedDatabaseRedisPropertiesObservation struct {

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	Migration []ManagedDatabaseRedisPropertiesMigrationObservation `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// pubsub-default.
	// Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
	RedisACLChannelsDefault *string `json:"redisAclChannelsDefault,omitempty" tf:"redis_acl_channels_default,omitempty"`

	// (Number) Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
	// Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
	RedisIoThreads *float64 `json:"redisIoThreads,omitempty" tf:"redis_io_threads,omitempty"`

	// policy counter decay time in minutes.
	// LFU maxmemory-policy counter decay time in minutes.
	RedisLfuDecayTime *float64 `json:"redisLfuDecayTime,omitempty" tf:"redis_lfu_decay_time,omitempty"`

	// lfu and allkeys-lfu maxmemory-policies.
	// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
	RedisLfuLogFactor *float64 `json:"redisLfuLogFactor,omitempty" tf:"redis_lfu_log_factor,omitempty"`

	// policy.
	// Redis maxmemory-policy.
	RedisMaxmemoryPolicy *string `json:"redisMaxmemoryPolicy,omitempty" tf:"redis_maxmemory_policy,omitempty"`

	// keyspace-events option.
	// Set notify-keyspace-events option.
	RedisNotifyKeyspaceEvents *string `json:"redisNotifyKeyspaceEvents,omitempty" tf:"redis_notify_keyspace_events,omitempty"`

	// (Number) Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
	// Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
	RedisNumberOfDatabases *float64 `json:"redisNumberOfDatabases,omitempty" tf:"redis_number_of_databases,omitempty"`

	// (String) Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	// Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	RedisPersistence *string `json:"redisPersistence,omitempty" tf:"redis_persistence,omitempty"`

	// (Number) Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	// Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	RedisPubsubClientOutputBufferLimit *float64 `json:"redisPubsubClientOutputBufferLimit,omitempty" tf:"redis_pubsub_client_output_buffer_limit,omitempty"`

	// (Boolean) Require SSL to access Redis.
	// Require SSL to access Redis.
	RedisSSL *bool `json:"redisSsl,omitempty" tf:"redis_ssl,omitempty"`

	// (Number) Redis idle connection timeout in seconds.
	// Redis idle connection timeout in seconds.
	RedisTimeout *float64 `json:"redisTimeout,omitempty" tf:"redis_timeout,omitempty"`

	// (String) Redis major version.
	// Redis major version.
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`
}

type ManagedDatabaseRedisPropertiesParameters struct {

	// (Boolean) Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
	// +kubebuilder:validation:Optional
	AutomaticUtilityNetworkIPFilter *bool `json:"automaticUtilityNetworkIpFilter,omitempty" tf:"automatic_utility_network_ip_filter,omitempty"`

	// (List of String) IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
	// +kubebuilder:validation:Optional
	IPFilter []*string `json:"ipFilter,omitempty" tf:"ip_filter,omitempty"`

	// (Block List, Max: 1) Migrate data from existing server. (see below for nested schema)
	// Migrate data from existing server.
	// +kubebuilder:validation:Optional
	Migration []ManagedDatabaseRedisPropertiesMigrationParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// (Boolean) Public Access. Allow access to the service from the public Internet.
	// Public Access. Allow access to the service from the public Internet.
	// +kubebuilder:validation:Optional
	PublicAccess *bool `json:"publicAccess,omitempty" tf:"public_access,omitempty"`

	// pubsub-default.
	// Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
	// +kubebuilder:validation:Optional
	RedisACLChannelsDefault *string `json:"redisAclChannelsDefault,omitempty" tf:"redis_acl_channels_default,omitempty"`

	// (Number) Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
	// Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
	// +kubebuilder:validation:Optional
	RedisIoThreads *float64 `json:"redisIoThreads,omitempty" tf:"redis_io_threads,omitempty"`

	// policy counter decay time in minutes.
	// LFU maxmemory-policy counter decay time in minutes.
	// +kubebuilder:validation:Optional
	RedisLfuDecayTime *float64 `json:"redisLfuDecayTime,omitempty" tf:"redis_lfu_decay_time,omitempty"`

	// lfu and allkeys-lfu maxmemory-policies.
	// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
	// +kubebuilder:validation:Optional
	RedisLfuLogFactor *float64 `json:"redisLfuLogFactor,omitempty" tf:"redis_lfu_log_factor,omitempty"`

	// policy.
	// Redis maxmemory-policy.
	// +kubebuilder:validation:Optional
	RedisMaxmemoryPolicy *string `json:"redisMaxmemoryPolicy,omitempty" tf:"redis_maxmemory_policy,omitempty"`

	// keyspace-events option.
	// Set notify-keyspace-events option.
	// +kubebuilder:validation:Optional
	RedisNotifyKeyspaceEvents *string `json:"redisNotifyKeyspaceEvents,omitempty" tf:"redis_notify_keyspace_events,omitempty"`

	// (Number) Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
	// Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
	// +kubebuilder:validation:Optional
	RedisNumberOfDatabases *float64 `json:"redisNumberOfDatabases,omitempty" tf:"redis_number_of_databases,omitempty"`

	// (String) Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	// Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	// +kubebuilder:validation:Optional
	RedisPersistence *string `json:"redisPersistence,omitempty" tf:"redis_persistence,omitempty"`

	// (Number) Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	// Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	// +kubebuilder:validation:Optional
	RedisPubsubClientOutputBufferLimit *float64 `json:"redisPubsubClientOutputBufferLimit,omitempty" tf:"redis_pubsub_client_output_buffer_limit,omitempty"`

	// (Boolean) Require SSL to access Redis.
	// Require SSL to access Redis.
	// +kubebuilder:validation:Optional
	RedisSSL *bool `json:"redisSsl,omitempty" tf:"redis_ssl,omitempty"`

	// (Number) Redis idle connection timeout in seconds.
	// Redis idle connection timeout in seconds.
	// +kubebuilder:validation:Optional
	RedisTimeout *float64 `json:"redisTimeout,omitempty" tf:"redis_timeout,omitempty"`

	// (String) Redis major version.
	// Redis major version.
	// +kubebuilder:validation:Optional
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version,omitempty"`

	// (Boolean) Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// Service logging. Store logs for the service so that they are available in the HTTP API and console.
	// +kubebuilder:validation:Optional
	ServiceLog *bool `json:"serviceLog,omitempty" tf:"service_log,omitempty"`
}

// ManagedDatabaseRedisSpec defines the desired state of ManagedDatabaseRedis
type ManagedDatabaseRedisSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedDatabaseRedisParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedDatabaseRedisInitParameters `json:"initProvider,omitempty"`
}

// ManagedDatabaseRedisStatus defines the observed state of ManagedDatabaseRedis.
type ManagedDatabaseRedisStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedDatabaseRedisObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedDatabaseRedis is the Schema for the ManagedDatabaseRediss API. This resource represents Redis managed database. See UpCloud Managed Databases https://upcloud.com/products/managed-databases product page for more details about the service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type ManagedDatabaseRedis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plan) || (has(self.initProvider) && has(self.initProvider.plan))",message="spec.forProvider.plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ManagedDatabaseRedisSpec   `json:"spec"`
	Status ManagedDatabaseRedisStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDatabaseRedisList contains a list of ManagedDatabaseRediss
type ManagedDatabaseRedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedDatabaseRedis `json:"items"`
}

// Repository type metadata.
var (
	ManagedDatabaseRedis_Kind             = "ManagedDatabaseRedis"
	ManagedDatabaseRedis_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedDatabaseRedis_Kind}.String()
	ManagedDatabaseRedis_KindAPIVersion   = ManagedDatabaseRedis_Kind + "." + CRDGroupVersion.String()
	ManagedDatabaseRedis_GroupVersionKind = CRDGroupVersion.WithKind(ManagedDatabaseRedis_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedDatabaseRedis{}, &ManagedDatabaseRedisList{})
}
