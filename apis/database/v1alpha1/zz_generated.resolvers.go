/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/UpCloudLtd/provider-upcloud/apis/network/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ManagedDatabaseLogicalDatabase.
func (mg *ManagedDatabaseLogicalDatabase) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Service),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceRef,
		Selector:     mg.Spec.ForProvider.ServiceSelector,
		To: reference.To{
			List:    &ManagedDatabasePostgresqlList{},
			Managed: &ManagedDatabasePostgresql{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Service")
	}
	mg.Spec.ForProvider.Service = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedDatabaseMysql.
func (mg *ManagedDatabaseMysql) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].UUID")
		}
		mg.Spec.ForProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.InitProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].UUID")
		}
		mg.Spec.InitProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedDatabaseOpensearch.
func (mg *ManagedDatabaseOpensearch) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].UUID")
		}
		mg.Spec.ForProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.InitProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].UUID")
		}
		mg.Spec.InitProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedDatabasePostgresql.
func (mg *ManagedDatabasePostgresql) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].UUID")
		}
		mg.Spec.ForProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.InitProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].UUID")
		}
		mg.Spec.InitProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedDatabaseRedis.
func (mg *ManagedDatabaseRedis) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].UUID")
		}
		mg.Spec.ForProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].UUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Network[i3].UUIDRef,
			Selector:     mg.Spec.InitProvider.Network[i3].UUIDSelector,
			To: reference.To{
				List:    &v1alpha1.NetworkList{},
				Managed: &v1alpha1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].UUID")
		}
		mg.Spec.InitProvider.Network[i3].UUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].UUIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedDatabaseUser.
func (mg *ManagedDatabaseUser) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Service),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceRef,
		Selector:     mg.Spec.ForProvider.ServiceSelector,
		To: reference.To{
			List:    &ManagedDatabasePostgresqlList{},
			Managed: &ManagedDatabasePostgresql{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Service")
	}
	mg.Spec.ForProvider.Service = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRef = rsp.ResolvedReference

	return nil
}
