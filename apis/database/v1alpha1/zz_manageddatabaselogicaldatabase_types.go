/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedDatabaseLogicalDatabaseInitParameters struct {

	// (String) Default character set for the database (LC_CTYPE)
	// Default character set for the database (LC_CTYPE)
	CharacterSet *string `json:"characterSet,omitempty" tf:"character_set,omitempty"`

	// (String) Default collation for the database (LC_COLLATE)
	// Default collation for the database (LC_COLLATE)
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`
}

type ManagedDatabaseLogicalDatabaseObservation struct {

	// (String) Default character set for the database (LC_CTYPE)
	// Default character set for the database (LC_CTYPE)
	CharacterSet *string `json:"characterSet,omitempty" tf:"character_set,omitempty"`

	// (String) Default collation for the database (LC_COLLATE)
	// Default collation for the database (LC_COLLATE)
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Service's UUID for which this user belongs to
	// The service to which the logical database belongs. Please note that reference fields (`serviceRef` and `serviceSelector`) only work for PostgreSQL databases. For other databases you need to leverage compositions and patches to pass database service ID to logical database `service` field. See https://docs.crossplane.io/latest/concepts/patch-and-transform/#patching-between-resources for more info.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ManagedDatabaseLogicalDatabaseParameters struct {

	// (String) Default character set for the database (LC_CTYPE)
	// Default character set for the database (LC_CTYPE)
	// +kubebuilder:validation:Optional
	CharacterSet *string `json:"characterSet,omitempty" tf:"character_set,omitempty"`

	// (String) Default collation for the database (LC_COLLATE)
	// Default collation for the database (LC_COLLATE)
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// (String) Service's UUID for which this user belongs to
	// The service to which the logical database belongs. Please note that reference fields (`serviceRef` and `serviceSelector`) only work for PostgreSQL databases. For other databases you need to leverage compositions and patches to pass database service ID to logical database `service` field. See https://docs.crossplane.io/latest/concepts/patch-and-transform/#patching-between-resources for more info.
	// +crossplane:generate:reference:type=github.com/UpCloudLtd/crossplane-provider-upcloud/apis/database/v1alpha1.ManagedDatabasePostgresql
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`

	// Reference to a ManagedDatabasePostgresql in database to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a ManagedDatabasePostgresql in database to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`
}

// ManagedDatabaseLogicalDatabaseSpec defines the desired state of ManagedDatabaseLogicalDatabase
type ManagedDatabaseLogicalDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedDatabaseLogicalDatabaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedDatabaseLogicalDatabaseInitParameters `json:"initProvider,omitempty"`
}

// ManagedDatabaseLogicalDatabaseStatus defines the observed state of ManagedDatabaseLogicalDatabase.
type ManagedDatabaseLogicalDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedDatabaseLogicalDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedDatabaseLogicalDatabase is the Schema for the ManagedDatabaseLogicalDatabases API. This resource represents a logical database in managed database
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type ManagedDatabaseLogicalDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedDatabaseLogicalDatabaseSpec   `json:"spec"`
	Status            ManagedDatabaseLogicalDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDatabaseLogicalDatabaseList contains a list of ManagedDatabaseLogicalDatabases
type ManagedDatabaseLogicalDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedDatabaseLogicalDatabase `json:"items"`
}

// Repository type metadata.
var (
	ManagedDatabaseLogicalDatabase_Kind             = "ManagedDatabaseLogicalDatabase"
	ManagedDatabaseLogicalDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedDatabaseLogicalDatabase_Kind}.String()
	ManagedDatabaseLogicalDatabase_KindAPIVersion   = ManagedDatabaseLogicalDatabase_Kind + "." + CRDGroupVersion.String()
	ManagedDatabaseLogicalDatabase_GroupVersionKind = CRDGroupVersion.WithKind(ManagedDatabaseLogicalDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedDatabaseLogicalDatabase{}, &ManagedDatabaseLogicalDatabaseList{})
}
