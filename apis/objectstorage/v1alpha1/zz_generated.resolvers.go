/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ManagedObjectStoragePolicy.
func (mg *ManagedObjectStoragePolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceUUIDRef,
		Selector:     mg.Spec.ForProvider.ServiceUUIDSelector,
		To: reference.To{
			List:    &ManagedObjectStorageList{},
			Managed: &ManagedObjectStorage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceUUID")
	}
	mg.Spec.ForProvider.ServiceUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceUUIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedObjectStorageUser.
func (mg *ManagedObjectStorageUser) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceUUIDRef,
		Selector:     mg.Spec.ForProvider.ServiceUUIDSelector,
		To: reference.To{
			List:    &ManagedObjectStorageList{},
			Managed: &ManagedObjectStorage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceUUID")
	}
	mg.Spec.ForProvider.ServiceUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceUUIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedObjectStorageUserAccessKey.
func (mg *ManagedObjectStorageUserAccessKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceUUIDRef,
		Selector:     mg.Spec.ForProvider.ServiceUUIDSelector,
		To: reference.To{
			List:    &ManagedObjectStorageList{},
			Managed: &ManagedObjectStorage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceUUID")
	}
	mg.Spec.ForProvider.ServiceUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceUUIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Username),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UsernameRef,
		Selector:     mg.Spec.ForProvider.UsernameSelector,
		To: reference.To{
			List:    &ManagedObjectStorageUserList{},
			Managed: &ManagedObjectStorageUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Username")
	}
	mg.Spec.ForProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsernameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedObjectStorageUserPolicy.
func (mg *ManagedObjectStorageUserPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NameRef,
		Selector:     mg.Spec.ForProvider.NameSelector,
		To: reference.To{
			List:    &ManagedObjectStoragePolicyList{},
			Managed: &ManagedObjectStoragePolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceUUIDRef,
		Selector:     mg.Spec.ForProvider.ServiceUUIDSelector,
		To: reference.To{
			List:    &ManagedObjectStorageList{},
			Managed: &ManagedObjectStorage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceUUID")
	}
	mg.Spec.ForProvider.ServiceUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceUUIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Username),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UsernameRef,
		Selector:     mg.Spec.ForProvider.UsernameSelector,
		To: reference.To{
			List:    &ManagedObjectStorageUserList{},
			Managed: &ManagedObjectStorageUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Username")
	}
	mg.Spec.ForProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsernameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NameRef,
		Selector:     mg.Spec.InitProvider.NameSelector,
		To: reference.To{
			List:    &ManagedObjectStoragePolicyList{},
			Managed: &ManagedObjectStoragePolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceUUIDRef,
		Selector:     mg.Spec.InitProvider.ServiceUUIDSelector,
		To: reference.To{
			List:    &ManagedObjectStorageList{},
			Managed: &ManagedObjectStorage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceUUID")
	}
	mg.Spec.InitProvider.ServiceUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceUUIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Username),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UsernameRef,
		Selector:     mg.Spec.InitProvider.UsernameSelector,
		To: reference.To{
			List:    &ManagedObjectStorageUserList{},
			Managed: &ManagedObjectStorageUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Username")
	}
	mg.Spec.InitProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UsernameRef = rsp.ResolvedReference

	return nil
}
