/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointInitParameters struct {
}

type EndpointObservation struct {

	// (String)
	// Domain name of the endpoint.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// (String)
	// URL for IAM.
	IAMURL *string `json:"iamUrl,omitempty" tf:"iam_url,omitempty"`

	// (String)
	// URL for STS.
	StsURL *string `json:"stsUrl,omitempty" tf:"sts_url,omitempty"`

	// (String) Network type.
	// Type of the endpoint (`private` / `public`).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EndpointParameters struct {
}

type ManagedObjectStorageInitParameters struct {

	// (String) Service status managed by the end user.
	// Service status managed by the end user.
	ConfiguredStatus *string `json:"configuredStatus,omitempty" tf:"configured_status,omitempty"`

	// value pairs to classify the managed object storage.
	// Key-value pairs to classify the managed object storage.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Name of the Managed Object Storage service. Must be unique within account.
	// Name of the Managed Object Storage service. Must be unique within account.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain access from multiple private networks that might reside in different zones, create the networks and a corresponding router for each network. (see below for nested schema)
	// Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain access from multiple private networks that might reside in different zones, create the networks and a corresponding router for each network.
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (String) Region in which the service will be hosted, see upcloud_managed_object_storage_regions data source.
	// Region in which the service will be hosted, see `upcloud_managed_object_storage_regions` data source.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ManagedObjectStorageObservation struct {

	// (String) Service status managed by the end user.
	// Service status managed by the end user.
	ConfiguredStatus *string `json:"configuredStatus,omitempty" tf:"configured_status,omitempty"`

	// (String) Creation time.
	// Creation time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Set of Object) Endpoints for accessing the Managed Object Storage service. (see below for nested schema)
	// Endpoints for accessing the Managed Object Storage service.
	Endpoint []EndpointObservation `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value pairs to classify the managed object storage.
	// Key-value pairs to classify the managed object storage.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Name of the Managed Object Storage service. Must be unique within account.
	// Name of the Managed Object Storage service. Must be unique within account.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain access from multiple private networks that might reside in different zones, create the networks and a corresponding router for each network. (see below for nested schema)
	// Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain access from multiple private networks that might reside in different zones, create the networks and a corresponding router for each network.
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// (String) Operational state of the Managed Object Storage service.
	// Operational state of the Managed Object Storage service.
	OperationalState *string `json:"operationalState,omitempty" tf:"operational_state,omitempty"`

	// (String) Region in which the service will be hosted, see upcloud_managed_object_storage_regions data source.
	// Region in which the service will be hosted, see `upcloud_managed_object_storage_regions` data source.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Creation time.
	// Creation time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ManagedObjectStorageParameters struct {

	// (String) Service status managed by the end user.
	// Service status managed by the end user.
	// +kubebuilder:validation:Optional
	ConfiguredStatus *string `json:"configuredStatus" tf:"configured_status,omitempty"`

	// value pairs to classify the managed object storage.
	// Key-value pairs to classify the managed object storage.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Name of the Managed Object Storage service. Must be unique within account.
	// Name of the Managed Object Storage service. Must be unique within account.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block Set) Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain access from multiple private networks that might reside in different zones, create the networks and a corresponding router for each network. (see below for nested schema)
	// Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain access from multiple private networks that might reside in different zones, create the networks and a corresponding router for each network.
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// (String) Region in which the service will be hosted, see upcloud_managed_object_storage_regions data source.
	// Region in which the service will be hosted, see `upcloud_managed_object_storage_regions` data source.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type NetworkInitParameters struct {

	// (String) Network family. IPv6 currently not supported.
	// Network family. IPv6 currently not supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the Managed Object Storage service. Must be unique within account.
	// Network name. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Network type.
	// Network type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network uuid. For public networks the field should be omitted.
	// Private network uuid. For public networks the field should be omitted.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkObservation struct {

	// (String) Network family. IPv6 currently not supported.
	// Network family. IPv6 currently not supported.
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// (String) Name of the Managed Object Storage service. Must be unique within account.
	// Network name. Must be unique within the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Network type.
	// Network type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Private network uuid. For public networks the field should be omitted.
	// Private network uuid. For public networks the field should be omitted.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkParameters struct {

	// (String) Network family. IPv6 currently not supported.
	// Network family. IPv6 currently not supported.
	// +kubebuilder:validation:Optional
	Family *string `json:"family" tf:"family,omitempty"`

	// (String) Name of the Managed Object Storage service. Must be unique within account.
	// Network name. Must be unique within the service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Network type.
	// Network type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) Private network uuid. For public networks the field should be omitted.
	// Private network uuid. For public networks the field should be omitted.
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// ManagedObjectStorageSpec defines the desired state of ManagedObjectStorage
type ManagedObjectStorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedObjectStorageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedObjectStorageInitParameters `json:"initProvider,omitempty"`
}

// ManagedObjectStorageStatus defines the observed state of ManagedObjectStorage.
type ManagedObjectStorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedObjectStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedObjectStorage is the Schema for the ManagedObjectStorages API. This resource represents an UpCloud Managed Object Storage instance, which provides S3 compatible storage.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upcloud}
type ManagedObjectStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configuredStatus) || (has(self.initProvider) && has(self.initProvider.configuredStatus))",message="spec.forProvider.configuredStatus is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   ManagedObjectStorageSpec   `json:"spec"`
	Status ManagedObjectStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedObjectStorageList contains a list of ManagedObjectStorages
type ManagedObjectStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedObjectStorage `json:"items"`
}

// Repository type metadata.
var (
	ManagedObjectStorage_Kind             = "ManagedObjectStorage"
	ManagedObjectStorage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedObjectStorage_Kind}.String()
	ManagedObjectStorage_KindAPIVersion   = ManagedObjectStorage_Kind + "." + CRDGroupVersion.String()
	ManagedObjectStorage_GroupVersionKind = CRDGroupVersion.WithKind(ManagedObjectStorage_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedObjectStorage{}, &ManagedObjectStorageList{})
}
